
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002678  0000270c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800176  00800176  00002822  2**0
                  ALLOC
  3 .stab         000038a0  00000000  00000000  00002824  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001451  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007515  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007528  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000080  00000000  00000000  00007568  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005c6  00000000  00000000  000075e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000537  00000000  00000000  00007bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000213  00000000  00000000  000080e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  000082f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/*                                 	HMI Header File                                                      */
#include "HMI_ECU.h"

/*				main HMI_ECU Function		*/
int main(void) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	c4 54       	subi	r28, 0x44	; 68
      9c:	d1 09       	sbc	r29, r1
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
	UART_init(); /* initialize UART module*/
      a8:	0e 94 06 10 	call	0x200c	; 0x200c <UART_init>
	LCD_init(); /* initialize LCD module*/
      ac:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_init>

	/*		Determined function that call Back by Timer 	*/
	TIMER_setCallBack(TimerControl);
      b0:	8e eb       	ldi	r24, 0xBE	; 190
      b2:	92 e0       	ldi	r25, 0x02	; 2
      b4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <TIMER_setCallBack>
	/*print start massage on LCD screen*/
	LCD_displayStringRowColumn(0, 3, "Welcome !");
      b8:	45 e6       	ldi	r20, 0x65	; 101
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	63 e0       	ldi	r22, 0x03	; 3
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 19 0c 	call	0x1832	; 0x1832 <LCD_displayStringRowColumn>
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	aa e7       	ldi	r26, 0x7A	; 122
      ca:	b4 e4       	ldi	r27, 0x44	; 68
      cc:	89 83       	std	Y+1, r24	; 0x01
      ce:	9a 83       	std	Y+2, r25	; 0x02
      d0:	ab 83       	std	Y+3, r26	; 0x03
      d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	4a ef       	ldi	r20, 0xFA	; 250
      da:	54 e4       	ldi	r21, 0x44	; 68
      dc:	69 81       	ldd	r22, Y+1	; 0x01
      de:	7a 81       	ldd	r23, Y+2	; 0x02
      e0:	8b 81       	ldd	r24, Y+3	; 0x03
      e2:	9c 81       	ldd	r25, Y+4	; 0x04
      e4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
      e8:	6d a3       	std	Y+37, r22	; 0x25
      ea:	7e a3       	std	Y+38, r23	; 0x26
      ec:	8f a3       	std	Y+39, r24	; 0x27
      ee:	98 a7       	std	Y+40, r25	; 0x28
      f0:	8d a1       	ldd	r24, Y+37	; 0x25
      f2:	9e a1       	ldd	r25, Y+38	; 0x26
      f4:	af a1       	ldd	r26, Y+39	; 0x27
      f6:	b8 a5       	ldd	r27, Y+40	; 0x28
      f8:	8d 83       	std	Y+5, r24	; 0x05
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	af 83       	std	Y+7, r26	; 0x07
      fe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	40 e8       	ldi	r20, 0x80	; 128
     106:	5f e3       	ldi	r21, 0x3F	; 63
     108:	6d 81       	ldd	r22, Y+5	; 0x05
     10a:	7e 81       	ldd	r23, Y+6	; 0x06
     10c:	8f 81       	ldd	r24, Y+7	; 0x07
     10e:	98 85       	ldd	r25, Y+8	; 0x08
     110:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     114:	88 23       	and	r24, r24
     116:	2c f4       	brge	.+10     	; 0x122 <main+0x90>
		__ticks = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	89 87       	std	Y+9, r24	; 0x09
     120:	54 c0       	rjmp	.+168    	; 0x1ca <main+0x138>
	else if (__tmp > 65535)
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	4f e7       	ldi	r20, 0x7F	; 127
     128:	57 e4       	ldi	r21, 0x47	; 71
     12a:	6d 81       	ldd	r22, Y+5	; 0x05
     12c:	7e 81       	ldd	r23, Y+6	; 0x06
     12e:	8f 81       	ldd	r24, Y+7	; 0x07
     130:	98 85       	ldd	r25, Y+8	; 0x08
     132:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     136:	18 16       	cp	r1, r24
     138:	d4 f5       	brge	.+116    	; 0x1ae <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e2       	ldi	r20, 0x20	; 32
     140:	51 e4       	ldi	r21, 0x41	; 65
     142:	69 81       	ldd	r22, Y+1	; 0x01
     144:	7a 81       	ldd	r23, Y+2	; 0x02
     146:	8b 81       	ldd	r24, Y+3	; 0x03
     148:	9c 81       	ldd	r25, Y+4	; 0x04
     14a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     14e:	69 a7       	std	Y+41, r22	; 0x29
     150:	7a a7       	std	Y+42, r23	; 0x2a
     152:	8b a7       	std	Y+43, r24	; 0x2b
     154:	9c a7       	std	Y+44, r25	; 0x2c
     156:	89 a5       	ldd	r24, Y+41	; 0x29
     158:	9a a5       	ldd	r25, Y+42	; 0x2a
     15a:	ab a5       	ldd	r26, Y+43	; 0x2b
     15c:	bc a5       	ldd	r27, Y+44	; 0x2c
     15e:	8d 8f       	std	Y+29, r24	; 0x1d
     160:	9e 8f       	std	Y+30, r25	; 0x1e
     162:	af 8f       	std	Y+31, r26	; 0x1f
     164:	b8 a3       	std	Y+32, r27	; 0x20
     166:	6d 8d       	ldd	r22, Y+29	; 0x1d
     168:	7e 8d       	ldd	r23, Y+30	; 0x1e
     16a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     16c:	98 a1       	ldd	r25, Y+32	; 0x20
     16e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     172:	6d a7       	std	Y+45, r22	; 0x2d
     174:	7e a7       	std	Y+46, r23	; 0x2e
     176:	8f a7       	std	Y+47, r24	; 0x2f
     178:	98 ab       	std	Y+48, r25	; 0x30
     17a:	ad a5       	ldd	r26, Y+45	; 0x2d
     17c:	be a5       	ldd	r27, Y+46	; 0x2e
     17e:	ba 87       	std	Y+10, r27	; 0x0a
     180:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     182:	10 c0       	rjmp	.+32     	; 0x1a4 <main+0x112>
     184:	88 ec       	ldi	r24, 0xC8	; 200
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	9c 87       	std	Y+12, r25	; 0x0c
     18a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18c:	8b 85       	ldd	r24, Y+11	; 0x0b
     18e:	9c 85       	ldd	r25, Y+12	; 0x0c
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <main+0xfe>
     194:	9c 87       	std	Y+12, r25	; 0x0c
     196:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     198:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	89 85       	ldd	r24, Y+9	; 0x09
     19c:	9a 85       	ldd	r25, Y+10	; 0x0a
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	9a 87       	std	Y+10, r25	; 0x0a
     1a2:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     1a4:	89 85       	ldd	r24, Y+9	; 0x09
     1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1a8:	89 2b       	or	r24, r25
     1aa:	61 f7       	brne	.-40     	; 0x184 <main+0xf2>
		}
		return;
     1ac:	19 c0       	rjmp	.+50     	; 0x1e0 <main+0x14e>
	}
	else
		__ticks = (uint16_t)__tmp;
     1ae:	6d 81       	ldd	r22, Y+5	; 0x05
     1b0:	7e 81       	ldd	r23, Y+6	; 0x06
     1b2:	8f 81       	ldd	r24, Y+7	; 0x07
     1b4:	98 85       	ldd	r25, Y+8	; 0x08
     1b6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     1ba:	69 ab       	std	Y+49, r22	; 0x31
     1bc:	7a ab       	std	Y+50, r23	; 0x32
     1be:	8b ab       	std	Y+51, r24	; 0x33
     1c0:	9c ab       	std	Y+52, r25	; 0x34
     1c2:	89 a9       	ldd	r24, Y+49	; 0x31
     1c4:	9a a9       	ldd	r25, Y+50	; 0x32
     1c6:	9a 87       	std	Y+10, r25	; 0x0a
     1c8:	89 87       	std	Y+9, r24	; 0x09
     1ca:	89 85       	ldd	r24, Y+9	; 0x09
     1cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ce:	9e 87       	std	Y+14, r25	; 0x0e
     1d0:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     1d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d4:	9e 85       	ldd	r25, Y+14	; 0x0e
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x144>
     1da:	9e 87       	std	Y+14, r25	; 0x0e
     1dc:	8d 87       	std	Y+13, r24	; 0x0d
}
     1de:	00 00       	nop
	_delay_ms(1000);/* wait one second to show massage*/

	/* Wait until HMI_ECU is ready */
	while (UART_recieveByte() != '#');
     1e0:	00 00       	nop
     1e2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     1e6:	83 32       	cpi	r24, 0x23	; 35
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x150>
	/*wait until MC2 Determine that is first used or not and receive Reply */
	if (UART_recieveByte() == SUCCESS) {
     1ea:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <main+0x164>
		createNewPass(); /*  start to create password */
     1f2:	0e 94 ba 01 	call	0x374	; 0x374 <createNewPass>
	} else {
	}
	/* Start of infinity loop */
	while (1) {
		mainOption(); /* print option on LCD Screen choose open door or change password*/
     1f6:	0e 94 a4 01 	call	0x348	; 0x348 <mainOption>
		/* receive press key from KeyPad */
		key = KeyPad_getPressedKey();
     1fa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <KeyPad_getPressedKey>
     1fe:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <key>
		if (key == '+') {
     202:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     206:	8b 32       	cpi	r24, 0x2B	; 43
     208:	19 f4       	brne	.+6      	; 0x210 <main+0x17e>
			openDoor(); /*if user enter '+' key start to open door mode*/
     20a:	0e 94 0d 04 	call	0x81a	; 0x81a <openDoor>
     20e:	06 c0       	rjmp	.+12     	; 0x21c <main+0x18a>
		} else if (key == '-') {
     210:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     214:	8d 32       	cpi	r24, 0x2D	; 45
     216:	11 f4       	brne	.+4      	; 0x21c <main+0x18a>
			changePass(); /*if user enter ''-' key start to change pass mode*/
     218:	0e 94 7d 02 	call	0x4fa	; 0x4fa <changePass>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	aa ef       	ldi	r26, 0xFA	; 250
     222:	b3 e4       	ldi	r27, 0x43	; 67
     224:	8f 87       	std	Y+15, r24	; 0x0f
     226:	98 8b       	std	Y+16, r25	; 0x10
     228:	a9 8b       	std	Y+17, r26	; 0x11
     22a:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a ef       	ldi	r20, 0xFA	; 250
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	6f 85       	ldd	r22, Y+15	; 0x0f
     236:	78 89       	ldd	r23, Y+16	; 0x10
     238:	89 89       	ldd	r24, Y+17	; 0x11
     23a:	9a 89       	ldd	r25, Y+18	; 0x12
     23c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     240:	6d ab       	std	Y+53, r22	; 0x35
     242:	7e ab       	std	Y+54, r23	; 0x36
     244:	8f ab       	std	Y+55, r24	; 0x37
     246:	98 af       	std	Y+56, r25	; 0x38
     248:	8d a9       	ldd	r24, Y+53	; 0x35
     24a:	9e a9       	ldd	r25, Y+54	; 0x36
     24c:	af a9       	ldd	r26, Y+55	; 0x37
     24e:	b8 ad       	ldd	r27, Y+56	; 0x38
     250:	8b 8b       	std	Y+19, r24	; 0x13
     252:	9c 8b       	std	Y+20, r25	; 0x14
     254:	ad 8b       	std	Y+21, r26	; 0x15
     256:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e8       	ldi	r20, 0x80	; 128
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	6b 89       	ldd	r22, Y+19	; 0x13
     262:	7c 89       	ldd	r23, Y+20	; 0x14
     264:	8d 89       	ldd	r24, Y+21	; 0x15
     266:	9e 89       	ldd	r25, Y+22	; 0x16
     268:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     26c:	88 23       	and	r24, r24
     26e:	2c f4       	brge	.+10     	; 0x27a <main+0x1e8>
		__ticks = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	98 8f       	std	Y+24, r25	; 0x18
     276:	8f 8b       	std	Y+23, r24	; 0x17
     278:	5b c0       	rjmp	.+182    	; 0x330 <main+0x29e>
	else if (__tmp > 65535)
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	3f ef       	ldi	r19, 0xFF	; 255
     27e:	4f e7       	ldi	r20, 0x7F	; 127
     280:	57 e4       	ldi	r21, 0x47	; 71
     282:	6b 89       	ldd	r22, Y+19	; 0x13
     284:	7c 89       	ldd	r23, Y+20	; 0x14
     286:	8d 89       	ldd	r24, Y+21	; 0x15
     288:	9e 89       	ldd	r25, Y+22	; 0x16
     28a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     28e:	18 16       	cp	r1, r24
     290:	0c f0       	brlt	.+2      	; 0x294 <main+0x202>
     292:	3c c0       	rjmp	.+120    	; 0x30c <main+0x27a>
		__ticks = (uint16_t) (__ms * 10.0);
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e2       	ldi	r20, 0x20	; 32
     29a:	51 e4       	ldi	r21, 0x41	; 65
     29c:	6f 85       	ldd	r22, Y+15	; 0x0f
     29e:	78 89       	ldd	r23, Y+16	; 0x10
     2a0:	89 89       	ldd	r24, Y+17	; 0x11
     2a2:	9a 89       	ldd	r25, Y+18	; 0x12
     2a4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     2a8:	69 af       	std	Y+57, r22	; 0x39
     2aa:	7a af       	std	Y+58, r23	; 0x3a
     2ac:	8b af       	std	Y+59, r24	; 0x3b
     2ae:	9c af       	std	Y+60, r25	; 0x3c
     2b0:	89 ad       	ldd	r24, Y+57	; 0x39
     2b2:	9a ad       	ldd	r25, Y+58	; 0x3a
     2b4:	ab ad       	ldd	r26, Y+59	; 0x3b
     2b6:	bc ad       	ldd	r27, Y+60	; 0x3c
     2b8:	89 a3       	std	Y+33, r24	; 0x21
     2ba:	9a a3       	std	Y+34, r25	; 0x22
     2bc:	ab a3       	std	Y+35, r26	; 0x23
     2be:	bc a3       	std	Y+36, r27	; 0x24
     2c0:	69 a1       	ldd	r22, Y+33	; 0x21
     2c2:	7a a1       	ldd	r23, Y+34	; 0x22
     2c4:	8b a1       	ldd	r24, Y+35	; 0x23
     2c6:	9c a1       	ldd	r25, Y+36	; 0x24
     2c8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     2cc:	21 96       	adiw	r28, 0x01	; 1
     2ce:	6c af       	std	Y+60, r22	; 0x3c
     2d0:	7d af       	std	Y+61, r23	; 0x3d
     2d2:	8e af       	std	Y+62, r24	; 0x3e
     2d4:	9f af       	std	Y+63, r25	; 0x3f
     2d6:	21 97       	sbiw	r28, 0x01	; 1
     2d8:	ad ad       	ldd	r26, Y+61	; 0x3d
     2da:	be ad       	ldd	r27, Y+62	; 0x3e
     2dc:	b8 8f       	std	Y+24, r27	; 0x18
     2de:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     2e0:	10 c0       	rjmp	.+32     	; 0x302 <main+0x270>
     2e2:	88 ec       	ldi	r24, 0xC8	; 200
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	9a 8f       	std	Y+26, r25	; 0x1a
     2e8:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     2ea:	89 8d       	ldd	r24, Y+25	; 0x19
     2ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x25c>
     2f2:	9a 8f       	std	Y+26, r25	; 0x1a
     2f4:	89 8f       	std	Y+25, r24	; 0x19
}
     2f6:	00 00       	nop
			__ticks --;
     2f8:	8f 89       	ldd	r24, Y+23	; 0x17
     2fa:	98 8d       	ldd	r25, Y+24	; 0x18
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	98 8f       	std	Y+24, r25	; 0x18
     300:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     302:	8f 89       	ldd	r24, Y+23	; 0x17
     304:	98 8d       	ldd	r25, Y+24	; 0x18
     306:	89 2b       	or	r24, r25
     308:	61 f7       	brne	.-40     	; 0x2e2 <main+0x250>
		return;
     30a:	1d c0       	rjmp	.+58     	; 0x346 <main+0x2b4>
		__ticks = (uint16_t)__tmp;
     30c:	6b 89       	ldd	r22, Y+19	; 0x13
     30e:	7c 89       	ldd	r23, Y+20	; 0x14
     310:	8d 89       	ldd	r24, Y+21	; 0x15
     312:	9e 89       	ldd	r25, Y+22	; 0x16
     314:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     318:	25 96       	adiw	r28, 0x05	; 5
     31a:	6c af       	std	Y+60, r22	; 0x3c
     31c:	7d af       	std	Y+61, r23	; 0x3d
     31e:	8e af       	std	Y+62, r24	; 0x3e
     320:	9f af       	std	Y+63, r25	; 0x3f
     322:	25 97       	sbiw	r28, 0x05	; 5
     324:	23 96       	adiw	r28, 0x03	; 3
     326:	8e ad       	ldd	r24, Y+62	; 0x3e
     328:	9f ad       	ldd	r25, Y+63	; 0x3f
     32a:	23 97       	sbiw	r28, 0x03	; 3
     32c:	98 8f       	std	Y+24, r25	; 0x18
     32e:	8f 8b       	std	Y+23, r24	; 0x17
     330:	8f 89       	ldd	r24, Y+23	; 0x17
     332:	98 8d       	ldd	r25, Y+24	; 0x18
     334:	9c 8f       	std	Y+28, r25	; 0x1c
     336:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     338:	8b 8d       	ldd	r24, Y+27	; 0x1b
     33a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x2aa>
     340:	9c 8f       	std	Y+28, r25	; 0x1c
     342:	8b 8f       	std	Y+27, r24	; 0x1b
}
     344:	00 00       	nop
	while (1) {
     346:	57 cf       	rjmp	.-338    	; 0x1f6 <main+0x164>

00000348 <mainOption>:
}

/*
 * Description: Function print option on LCD Screen ( open door or change pass ) .
 */
void mainOption(void) {
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
	/* print option on LCD Screen ( open door or change pass )*/
	LCD_clearScreen();
     350:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
	LCD_displayString(" + : open Door ");
     354:	8f e6       	ldi	r24, 0x6F	; 111
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_goToRowColumn>
	LCD_displayString(" - : Change Pass ");
     364:	8f e7       	ldi	r24, 0x7F	; 127
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
}
     36c:	00 00       	nop
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <createNewPass>:

/*
 * Description: Function to create password at first used or change password .
 */
void createNewPass(void) {
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	a3 97       	sbiw	r28, 0x23	; 35
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
	uint8 stat;
	do {
		/* enter first pass*/
		enterPass(" Enter New Pass ");
     388:	81 e9       	ldi	r24, 0x91	; 145
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 1c 03 	call	0x638	; 0x638 <enterPass>
		enterPass(" Re-enter Pass ");		/* enter second pass*/
     390:	82 ea       	ldi	r24, 0xA2	; 162
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 1c 03 	call	0x638	; 0x638 <enterPass>
		/* wait until MC2 determine that two pass is equal or not*/
		if (UART_recieveByte() == SUCCESS) {
     398:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	49 f4       	brne	.+18     	; 0x3b2 <createNewPass+0x3e>
			LCD_clearScreen();
     3a0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
			/* tells user that enter pass is accepted & store in EEPROM */
			LCD_displayString("Pass is Created");
     3a4:	82 eb       	ldi	r24, 0xB2	; 178
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
			stat = SUCCESS;	/* make stat success to break while loop*/
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <createNewPass+0x4c>
		} else {
			LCD_clearScreen();
     3b2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
			/* tells user that enter pass is not accepted */
			LCD_displayString(" ERROR Password ");
     3b6:	82 ec       	ldi	r24, 0xC2	; 194
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
			stat = ERROR;/* make stat success to do this again while loop*/
     3be:	19 82       	std	Y+1, r1	; 0x01
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	aa e7       	ldi	r26, 0x7A	; 122
     3c6:	b4 e4       	ldi	r27, 0x44	; 68
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	9b 83       	std	Y+3, r25	; 0x03
     3cc:	ac 83       	std	Y+4, r26	; 0x04
     3ce:	bd 83       	std	Y+5, r27	; 0x05
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4a ef       	ldi	r20, 0xFA	; 250
     3d6:	54 e4       	ldi	r21, 0x44	; 68
     3d8:	6a 81       	ldd	r22, Y+2	; 0x02
     3da:	7b 81       	ldd	r23, Y+3	; 0x03
     3dc:	8c 81       	ldd	r24, Y+4	; 0x04
     3de:	9d 81       	ldd	r25, Y+5	; 0x05
     3e0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     3e4:	6c 8b       	std	Y+20, r22	; 0x14
     3e6:	7d 8b       	std	Y+21, r23	; 0x15
     3e8:	8e 8b       	std	Y+22, r24	; 0x16
     3ea:	9f 8b       	std	Y+23, r25	; 0x17
     3ec:	8c 89       	ldd	r24, Y+20	; 0x14
     3ee:	9d 89       	ldd	r25, Y+21	; 0x15
     3f0:	ae 89       	ldd	r26, Y+22	; 0x16
     3f2:	bf 89       	ldd	r27, Y+23	; 0x17
     3f4:	8e 83       	std	Y+6, r24	; 0x06
     3f6:	9f 83       	std	Y+7, r25	; 0x07
     3f8:	a8 87       	std	Y+8, r26	; 0x08
     3fa:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5f e3       	ldi	r21, 0x3F	; 63
     404:	6e 81       	ldd	r22, Y+6	; 0x06
     406:	7f 81       	ldd	r23, Y+7	; 0x07
     408:	88 85       	ldd	r24, Y+8	; 0x08
     40a:	99 85       	ldd	r25, Y+9	; 0x09
     40c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     410:	88 23       	and	r24, r24
     412:	2c f4       	brge	.+10     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		__ticks = 1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	9b 87       	std	Y+11, r25	; 0x0b
     41a:	8a 87       	std	Y+10, r24	; 0x0a
     41c:	54 c0       	rjmp	.+168    	; 0x4c6 <__stack+0x67>
	else if (__tmp > 65535)
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	3f ef       	ldi	r19, 0xFF	; 255
     422:	4f e7       	ldi	r20, 0x7F	; 127
     424:	57 e4       	ldi	r21, 0x47	; 71
     426:	6e 81       	ldd	r22, Y+6	; 0x06
     428:	7f 81       	ldd	r23, Y+7	; 0x07
     42a:	88 85       	ldd	r24, Y+8	; 0x08
     42c:	99 85       	ldd	r25, Y+9	; 0x09
     42e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     432:	18 16       	cp	r1, r24
     434:	d4 f5       	brge	.+116    	; 0x4aa <__stack+0x4b>
		__ticks = (uint16_t) (__ms * 10.0);
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e2       	ldi	r20, 0x20	; 32
     43c:	51 e4       	ldi	r21, 0x41	; 65
     43e:	6a 81       	ldd	r22, Y+2	; 0x02
     440:	7b 81       	ldd	r23, Y+3	; 0x03
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     44a:	68 8f       	std	Y+24, r22	; 0x18
     44c:	79 8f       	std	Y+25, r23	; 0x19
     44e:	8a 8f       	std	Y+26, r24	; 0x1a
     450:	9b 8f       	std	Y+27, r25	; 0x1b
     452:	88 8d       	ldd	r24, Y+24	; 0x18
     454:	99 8d       	ldd	r25, Y+25	; 0x19
     456:	aa 8d       	ldd	r26, Y+26	; 0x1a
     458:	bb 8d       	ldd	r27, Y+27	; 0x1b
     45a:	88 8b       	std	Y+16, r24	; 0x10
     45c:	99 8b       	std	Y+17, r25	; 0x11
     45e:	aa 8b       	std	Y+18, r26	; 0x12
     460:	bb 8b       	std	Y+19, r27	; 0x13
     462:	68 89       	ldd	r22, Y+16	; 0x10
     464:	79 89       	ldd	r23, Y+17	; 0x11
     466:	8a 89       	ldd	r24, Y+18	; 0x12
     468:	9b 89       	ldd	r25, Y+19	; 0x13
     46a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     46e:	6c 8f       	std	Y+28, r22	; 0x1c
     470:	7d 8f       	std	Y+29, r23	; 0x1d
     472:	8e 8f       	std	Y+30, r24	; 0x1e
     474:	9f 8f       	std	Y+31, r25	; 0x1f
     476:	ac 8d       	ldd	r26, Y+28	; 0x1c
     478:	bd 8d       	ldd	r27, Y+29	; 0x1d
     47a:	bb 87       	std	Y+11, r27	; 0x0b
     47c:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
     47e:	10 c0       	rjmp	.+32     	; 0x4a0 <__stack+0x41>
     480:	88 ec       	ldi	r24, 0xC8	; 200
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	9d 87       	std	Y+13, r25	; 0x0d
     486:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
     488:	8c 85       	ldd	r24, Y+12	; 0x0c
     48a:	9d 85       	ldd	r25, Y+13	; 0x0d
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
     490:	9d 87       	std	Y+13, r25	; 0x0d
     492:	8c 87       	std	Y+12, r24	; 0x0c
}
     494:	00 00       	nop
			__ticks --;
     496:	8a 85       	ldd	r24, Y+10	; 0x0a
     498:	9b 85       	ldd	r25, Y+11	; 0x0b
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	9b 87       	std	Y+11, r25	; 0x0b
     49e:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
     4a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     4a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     4a4:	89 2b       	or	r24, r25
     4a6:	61 f7       	brne	.-40     	; 0x480 <__stack+0x21>
		return;
     4a8:	19 c0       	rjmp	.+50     	; 0x4dc <__stack+0x7d>
		__ticks = (uint16_t)__tmp;
     4aa:	6e 81       	ldd	r22, Y+6	; 0x06
     4ac:	7f 81       	ldd	r23, Y+7	; 0x07
     4ae:	88 85       	ldd	r24, Y+8	; 0x08
     4b0:	99 85       	ldd	r25, Y+9	; 0x09
     4b2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     4b6:	68 a3       	std	Y+32, r22	; 0x20
     4b8:	79 a3       	std	Y+33, r23	; 0x21
     4ba:	8a a3       	std	Y+34, r24	; 0x22
     4bc:	9b a3       	std	Y+35, r25	; 0x23
     4be:	88 a1       	ldd	r24, Y+32	; 0x20
     4c0:	99 a1       	ldd	r25, Y+33	; 0x21
     4c2:	9b 87       	std	Y+11, r25	; 0x0b
     4c4:	8a 87       	std	Y+10, r24	; 0x0a
     4c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4ca:	9f 87       	std	Y+15, r25	; 0x0f
     4cc:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
     4ce:	8e 85       	ldd	r24, Y+14	; 0x0e
     4d0:	9f 85       	ldd	r25, Y+15	; 0x0f
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__stack+0x73>
     4d6:	9f 87       	std	Y+15, r25	; 0x0f
     4d8:	8e 87       	std	Y+14, r24	; 0x0e
}
     4da:	00 00       	nop
		}
		_delay_ms(1000);
	} while (stat != SUCCESS); /*do this until user enter two equal password*/
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <__stack+0x85>
     4e2:	52 cf       	rjmp	.-348    	; 0x388 <createNewPass+0x14>
}
     4e4:	00 00       	nop
     4e6:	00 00       	nop
     4e8:	a3 96       	adiw	r28, 0x23	; 35
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <changePass>:

/*
 * Description: Function use to check that password enter is equal to password or not to open garage .
 */
void changePass(void) {
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	/*enter password by user */
	enterPass(" Enter old Pass");
     502:	83 ed       	ldi	r24, 0xD3	; 211
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 1c 03 	call	0x638	; 0x638 <enterPass>
	/*take replay from MC2 that entered pass is correct or not*/
	if (UART_recieveByte() == SUCCESS) {
     50a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	19 f4       	brne	.+6      	; 0x518 <changePass+0x1e>
		createNewPass(); /*start create new pass*/
     512:	0e 94 ba 01 	call	0x374	; 0x374 <createNewPass>
	} else {
		LCD_clearScreen();
		/*print error massage that means user enter incorrect pass*/
		LCD_displayString("  ERROR Pass ");
	}
}
     516:	06 c0       	rjmp	.+12     	; 0x524 <changePass+0x2a>
		LCD_clearScreen();
     518:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
		LCD_displayString("  ERROR Pass ");
     51c:	83 ee       	ldi	r24, 0xE3	; 227
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
}
     524:	00 00       	nop
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <closeDoor>:

/*
 * Description: Function check that garage open first then close it .
 */
void closeDoor(void) {
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	/* tells MC2 that MC1 become ready & start communication */
	UART_sendByte('#');
     534:	83 e2       	ldi	r24, 0x23	; 35
     536:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
	do {
		/*send press key from Key pad to MC2*/
		UART_sendByte(KeyPad_getPressedKey());
     53a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <KeyPad_getPressedKey>
     53e:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
		/*receive replay from MC2 to know that is correct key is press or not*/
	} while (UART_recieveByte() != SUCCESS);
     542:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	c1 f7       	brne	.-16     	; 0x53a <closeDoor+0xe>

	LCD_clearScreen();
     54a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
	/*tells user that garage start closing by print massage on LCD */
	LCD_displayString(" Door is Locking ");
     54e:	81 ef       	ldi	r24, 0xF1	; 241
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
	TIMER_init(&timePtr);	/* initialize timer to start  count*/
     556:	80 e6       	ldi	r24, 0x60	; 96
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <TIMER_init>
	timeIndex = 0;	/* Initialize timer interrupt counter */
     55e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	g_state = CLOSING;	/* indicate that garage in closing mode */
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_state>
	while (g_state == CLOSING);	/*  wait until garage mode change to close mode */
     568:	00 00       	nop
     56a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	e1 f3       	breq	.-8      	; 0x56a <closeDoor+0x3e>

}
     572:	00 00       	nop
     574:	00 00       	nop
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <TimerControl>:

/*
 * Description: it is callBack Function that call by Timer when interrupt has happen .
 */
void TimerControl(void) {
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	/* Increment to show how many timer1 interrupt happen after initialize Timer  */
	timeIndex++;
     584:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
	/* check first that garage state is closing to close it . */
	if (g_state == CLOSING) {
     58e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	b1 f4       	brne	.+44     	; 0x5c2 <TimerControl+0x46>
		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
     596:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	08 f4       	brcc	.+2      	; 0x5a0 <TimerControl+0x24>
     59e:	48 c0       	rjmp	.+144    	; 0x630 <TimerControl+0xb4>
			/* Clear Timer1 Register & active Sleep mode For Timer1.*/
			TIMER_Deinit();
     5a0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER_Deinit>
			/*receive state of garage door */
			if (UART_recieveByte() == CLOSE) {
     5a4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     5a8:	83 30       	cpi	r24, 0x03	; 3
     5aa:	09 f0       	breq	.+2      	; 0x5ae <TimerControl+0x32>
     5ac:	41 c0       	rjmp	.+130    	; 0x630 <TimerControl+0xb4>
				g_state = CLOSE; /*change global state of garage door to close state*/
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_state>
				LCD_clearScreen();
     5b4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
				/*print closed massage that indicate of garage door state */
				LCD_displayString(" Door is Closed ");
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
			}
		}

	}

}
     5c0:	37 c0       	rjmp	.+110    	; 0x630 <TimerControl+0xb4>
	} else if (g_state == BUZZER) { /* check first that garage state is in BUZZER mode */
     5c2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     5c6:	84 30       	cpi	r24, 0x04	; 4
     5c8:	a1 f4       	brne	.+40     	; 0x5f2 <TimerControl+0x76>
		if (timeIndex >= 12) {
     5ca:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     5ce:	8c 30       	cpi	r24, 0x0C	; 12
     5d0:	78 f1       	brcs	.+94     	; 0x630 <TimerControl+0xb4>
			if (UART_recieveByte() == CLOSE) {
     5d2:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	59 f5       	brne	.+86     	; 0x630 <TimerControl+0xb4>
				g_state = CLOSE; /*show state of garage door now is Close*/
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_state>
				TIMER_Deinit();
     5e0:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER_Deinit>
				LCD_clearScreen();
     5e4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
				LCD_displayString(" Door is Closed ");
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
}
     5f0:	1f c0       	rjmp	.+62     	; 0x630 <TimerControl+0xb4>
	} else if (g_state == OPENING) { /* check first that garage state is in opening mode */
     5f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     5f6:	88 23       	and	r24, r24
     5f8:	d9 f4       	brne	.+54     	; 0x630 <TimerControl+0xb4>
		if (timeIndex >= 3) {
     5fa:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	b8 f0       	brcs	.+46     	; 0x630 <TimerControl+0xb4>
			TIMER_Deinit();
     602:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <TIMER_Deinit>
			if (UART_recieveByte() == OPEN) {
     606:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	89 f4       	brne	.+34     	; 0x630 <TimerControl+0xb4>
				g_state = OPEN; /*show state of garage door now is open*/
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_state>
				LCD_clearScreen();
     614:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
				LCD_displayString(" Door is Opened ");
     618:	84 e1       	ldi	r24, 0x14	; 20
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
				LCD_goToRowColumn(1, 0);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_goToRowColumn>
				LCD_displayString("+: to Close Door");
     628:	85 e2       	ldi	r24, 0x25	; 37
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
}
     630:	00 00       	nop
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <enterPass>:

/*
 * Description: Function receive press key  From KeyPad & send to Control -ECU
 * pointer to select which massage will appear in LCD Screen .
 */
void enterPass(const char *Str) {
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	a4 97       	sbiw	r28, 0x24	; 36
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	98 8b       	std	Y+16, r25	; 0x10
     64e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
     650:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
	/*print determined massage*/
	LCD_displayString(Str);
     654:	8f 85       	ldd	r24, Y+15	; 0x0f
     656:	98 89       	ldd	r25, Y+16	; 0x10
     658:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_goToRowColumn>
	do {
		/* tells MC2 that MC1 become ready & start communication */
		UART_sendByte('*');
     664:	8a e2       	ldi	r24, 0x2A	; 42
     666:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
		/*receive press key from KeyPad Module*/
		key = KeyPad_getPressedKey();
     66a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <KeyPad_getPressedKey>
     66e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <key>
		/*check if press key is number or option key*/
		if ((key >= 48) && (key <= 57)) {
     672:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     676:	80 33       	cpi	r24, 0x30	; 48
     678:	88 f0       	brcs	.+34     	; 0x69c <enterPass+0x64>
     67a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     67e:	8a 33       	cpi	r24, 0x3A	; 58
     680:	68 f4       	brcc	.+26     	; 0x69c <enterPass+0x64>
			key -= 48; /*minus 48 that is ASCII of zero number*/
     682:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     686:	80 53       	subi	r24, 0x30	; 48
     688:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <key>
			UART_sendByte(key); /*send number of press key */
     68c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     690:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
			LCD_displayCharacter('*'); /*display '*' to indicate that key is send to MC2 */
     694:	8a e2       	ldi	r24, 0x2A	; 42
     696:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <enterPass+0x6c>
		} else {
			/*if press key is option key send by ASCII*/
			UART_sendByte(key);
     69c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     6a0:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	a8 ec       	ldi	r26, 0xC8	; 200
     6aa:	b3 e4       	ldi	r27, 0x43	; 67
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	9a 83       	std	Y+2, r25	; 0x02
     6b0:	ab 83       	std	Y+3, r26	; 0x03
     6b2:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	4a ef       	ldi	r20, 0xFA	; 250
     6ba:	54 e4       	ldi	r21, 0x44	; 68
     6bc:	69 81       	ldd	r22, Y+1	; 0x01
     6be:	7a 81       	ldd	r23, Y+2	; 0x02
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     6c8:	6d 8b       	std	Y+21, r22	; 0x15
     6ca:	7e 8b       	std	Y+22, r23	; 0x16
     6cc:	8f 8b       	std	Y+23, r24	; 0x17
     6ce:	98 8f       	std	Y+24, r25	; 0x18
     6d0:	8d 89       	ldd	r24, Y+21	; 0x15
     6d2:	9e 89       	ldd	r25, Y+22	; 0x16
     6d4:	af 89       	ldd	r26, Y+23	; 0x17
     6d6:	b8 8d       	ldd	r27, Y+24	; 0x18
     6d8:	8d 83       	std	Y+5, r24	; 0x05
     6da:	9e 83       	std	Y+6, r25	; 0x06
     6dc:	af 83       	std	Y+7, r26	; 0x07
     6de:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e8       	ldi	r20, 0x80	; 128
     6e6:	5f e3       	ldi	r21, 0x3F	; 63
     6e8:	6d 81       	ldd	r22, Y+5	; 0x05
     6ea:	7e 81       	ldd	r23, Y+6	; 0x06
     6ec:	8f 81       	ldd	r24, Y+7	; 0x07
     6ee:	98 85       	ldd	r25, Y+8	; 0x08
     6f0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     6f4:	88 23       	and	r24, r24
     6f6:	2c f4       	brge	.+10     	; 0x702 <enterPass+0xca>
		__ticks = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9a 87       	std	Y+10, r25	; 0x0a
     6fe:	89 87       	std	Y+9, r24	; 0x09
     700:	54 c0       	rjmp	.+168    	; 0x7aa <enterPass+0x172>
	else if (__tmp > 65535)
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	4f e7       	ldi	r20, 0x7F	; 127
     708:	57 e4       	ldi	r21, 0x47	; 71
     70a:	6d 81       	ldd	r22, Y+5	; 0x05
     70c:	7e 81       	ldd	r23, Y+6	; 0x06
     70e:	8f 81       	ldd	r24, Y+7	; 0x07
     710:	98 85       	ldd	r25, Y+8	; 0x08
     712:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     716:	18 16       	cp	r1, r24
     718:	d4 f5       	brge	.+116    	; 0x78e <enterPass+0x156>
		__ticks = (uint16_t) (__ms * 10.0);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e2       	ldi	r20, 0x20	; 32
     720:	51 e4       	ldi	r21, 0x41	; 65
     722:	69 81       	ldd	r22, Y+1	; 0x01
     724:	7a 81       	ldd	r23, Y+2	; 0x02
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     72e:	69 8f       	std	Y+25, r22	; 0x19
     730:	7a 8f       	std	Y+26, r23	; 0x1a
     732:	8b 8f       	std	Y+27, r24	; 0x1b
     734:	9c 8f       	std	Y+28, r25	; 0x1c
     736:	89 8d       	ldd	r24, Y+25	; 0x19
     738:	9a 8d       	ldd	r25, Y+26	; 0x1a
     73a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     73c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     73e:	89 8b       	std	Y+17, r24	; 0x11
     740:	9a 8b       	std	Y+18, r25	; 0x12
     742:	ab 8b       	std	Y+19, r26	; 0x13
     744:	bc 8b       	std	Y+20, r27	; 0x14
     746:	69 89       	ldd	r22, Y+17	; 0x11
     748:	7a 89       	ldd	r23, Y+18	; 0x12
     74a:	8b 89       	ldd	r24, Y+19	; 0x13
     74c:	9c 89       	ldd	r25, Y+20	; 0x14
     74e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     752:	6d 8f       	std	Y+29, r22	; 0x1d
     754:	7e 8f       	std	Y+30, r23	; 0x1e
     756:	8f 8f       	std	Y+31, r24	; 0x1f
     758:	98 a3       	std	Y+32, r25	; 0x20
     75a:	ad 8d       	ldd	r26, Y+29	; 0x1d
     75c:	be 8d       	ldd	r27, Y+30	; 0x1e
     75e:	ba 87       	std	Y+10, r27	; 0x0a
     760:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     762:	10 c0       	rjmp	.+32     	; 0x784 <enterPass+0x14c>
     764:	88 ec       	ldi	r24, 0xC8	; 200
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	9c 87       	std	Y+12, r25	; 0x0c
     76a:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <enterPass+0x138>
     774:	9c 87       	std	Y+12, r25	; 0x0c
     776:	8b 87       	std	Y+11, r24	; 0x0b
}
     778:	00 00       	nop
			__ticks --;
     77a:	89 85       	ldd	r24, Y+9	; 0x09
     77c:	9a 85       	ldd	r25, Y+10	; 0x0a
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	9a 87       	std	Y+10, r25	; 0x0a
     782:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     784:	89 85       	ldd	r24, Y+9	; 0x09
     786:	9a 85       	ldd	r25, Y+10	; 0x0a
     788:	89 2b       	or	r24, r25
     78a:	61 f7       	brne	.-40     	; 0x764 <enterPass+0x12c>
		return;
     78c:	19 c0       	rjmp	.+50     	; 0x7c0 <enterPass+0x188>
		__ticks = (uint16_t)__tmp;
     78e:	6d 81       	ldd	r22, Y+5	; 0x05
     790:	7e 81       	ldd	r23, Y+6	; 0x06
     792:	8f 81       	ldd	r24, Y+7	; 0x07
     794:	98 85       	ldd	r25, Y+8	; 0x08
     796:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     79a:	69 a3       	std	Y+33, r22	; 0x21
     79c:	7a a3       	std	Y+34, r23	; 0x22
     79e:	8b a3       	std	Y+35, r24	; 0x23
     7a0:	9c a3       	std	Y+36, r25	; 0x24
     7a2:	89 a1       	ldd	r24, Y+33	; 0x21
     7a4:	9a a1       	ldd	r25, Y+34	; 0x22
     7a6:	9a 87       	std	Y+10, r25	; 0x0a
     7a8:	89 87       	std	Y+9, r24	; 0x09
     7aa:	89 85       	ldd	r24, Y+9	; 0x09
     7ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ae:	9e 87       	std	Y+14, r25	; 0x0e
     7b0:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     7b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <enterPass+0x17e>
     7ba:	9e 87       	std	Y+14, r25	; 0x0e
     7bc:	8d 87       	std	Y+13, r24	; 0x0d
}
     7be:	00 00       	nop
		}
		_delay_ms(400);/*  that wait to synchronize between human & ECU */
	} while (key != '=');
     7c0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <key>
     7c4:	8d 33       	cpi	r24, 0x3D	; 61
     7c6:	09 f0       	breq	.+2      	; 0x7ca <enterPass+0x192>
     7c8:	4d cf       	rjmp	.-358    	; 0x664 <enterPass+0x2c>
}
     7ca:	00 00       	nop
     7cc:	00 00       	nop
     7ce:	a4 96       	adiw	r28, 0x24	; 36
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <runBuzzer>:

void runBuzzer(void){
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     7e8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
	/* print thief massage */
	LCD_displayString(" You are Thief!");
     7ec:	86 e3       	ldi	r24, 0x36	; 54
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
	/* initialize timer to start count */
	TIMER_init(&timePtr);
     7f4:	80 e6       	ldi	r24, 0x60	; 96
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <TIMER_init>
	timeIndex=0;	 /* Initialize timer interrupt counter */
     7fc:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	g_state=BUZZER;	 /* indicate that garage in Buzzer mode */
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_state>
	while(g_state == BUZZER);/*  wait until garage mode change from Buzzer mode */
     806:	00 00       	nop
     808:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     80c:	84 30       	cpi	r24, 0x04	; 4
     80e:	e1 f3       	breq	.-8      	; 0x808 <runBuzzer+0x28>

}
     810:	00 00       	nop
     812:	00 00       	nop
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <openDoor>:

/*
 * Description: Function check enter password by user to open garage .
 */
void openDoor(void){
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	a3 97       	sbiw	r28, 0x23	; 35
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     82e:	19 82       	std	Y+1, r1	; 0x01
	do {
		/*recive password from KeyPad & send to MC2 */
		enterPass(" Plz enter Pass");
     830:	86 e4       	ldi	r24, 0x46	; 70
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 1c 03 	call	0x638	; 0x638 <enterPass>
		/*  wait until MC2 is ready */
		while(UART_recieveByte() == '#');
     838:	00 00       	nop
     83a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     83e:	83 32       	cpi	r24, 0x23	; 35
     840:	e1 f3       	breq	.-8      	; 0x83a <openDoor+0x20>
		/* check that entered  pass is correct or not*/
		if (UART_recieveByte() == SUCCESS) {
     842:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	c1 f4       	brne	.+48     	; 0x87a <openDoor+0x60>
			LCD_clearScreen();
     84a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
			/* print massage that indicate garage door is start open */
			LCD_displayString("Door is Opening");
     84e:	86 e5       	ldi	r24, 0x56	; 86
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
			/* initialize timer to start  count*/
			TIMER_init(&timePtr);
     856:	80 e6       	ldi	r24, 0x60	; 96
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <TIMER_init>
			timeIndex = 0;	/* Initialize timer interrupt counter */
     85e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
			g_state = OPENING;	/* indicate that garage in opening mode */
     862:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <g_state>
			while(g_state == OPENING);	/*  wait until garage mode change to open mode */
     866:	00 00       	nop
     868:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_state>
     86c:	88 23       	and	r24, r24
     86e:	e1 f3       	breq	.-8      	; 0x868 <openDoor+0x4e>
			closeDoor();	/*  start with close mode */
     870:	0e 94 96 02 	call	0x52c	; 0x52c <closeDoor>
			i=10;	/* choose (10) that any number > 3 to break while loop*/
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	97 c0       	rjmp	.+302    	; 0x9a8 <openDoor+0x18e>
		} else {
			LCD_clearScreen();
     87a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_clearScreen>
			/* print massage that entered pass is incorrect */
			LCD_displayString(" 	 ERROR Pass ");
     87e:	86 e6       	ldi	r24, 0x66	; 102
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	aa e7       	ldi	r26, 0x7A	; 122
     88c:	b4 e4       	ldi	r27, 0x44	; 68
     88e:	8a 83       	std	Y+2, r24	; 0x02
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	ac 83       	std	Y+4, r26	; 0x04
     894:	bd 83       	std	Y+5, r27	; 0x05
	__tmp = ((F_CPU) / 4e3) * __ms;
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4a ef       	ldi	r20, 0xFA	; 250
     89c:	54 e4       	ldi	r21, 0x44	; 68
     89e:	6a 81       	ldd	r22, Y+2	; 0x02
     8a0:	7b 81       	ldd	r23, Y+3	; 0x03
     8a2:	8c 81       	ldd	r24, Y+4	; 0x04
     8a4:	9d 81       	ldd	r25, Y+5	; 0x05
     8a6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     8aa:	6c 8b       	std	Y+20, r22	; 0x14
     8ac:	7d 8b       	std	Y+21, r23	; 0x15
     8ae:	8e 8b       	std	Y+22, r24	; 0x16
     8b0:	9f 8b       	std	Y+23, r25	; 0x17
     8b2:	8c 89       	ldd	r24, Y+20	; 0x14
     8b4:	9d 89       	ldd	r25, Y+21	; 0x15
     8b6:	ae 89       	ldd	r26, Y+22	; 0x16
     8b8:	bf 89       	ldd	r27, Y+23	; 0x17
     8ba:	8e 83       	std	Y+6, r24	; 0x06
     8bc:	9f 83       	std	Y+7, r25	; 0x07
     8be:	a8 87       	std	Y+8, r26	; 0x08
     8c0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e8       	ldi	r20, 0x80	; 128
     8c8:	5f e3       	ldi	r21, 0x3F	; 63
     8ca:	6e 81       	ldd	r22, Y+6	; 0x06
     8cc:	7f 81       	ldd	r23, Y+7	; 0x07
     8ce:	88 85       	ldd	r24, Y+8	; 0x08
     8d0:	99 85       	ldd	r25, Y+9	; 0x09
     8d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     8d6:	88 23       	and	r24, r24
     8d8:	2c f4       	brge	.+10     	; 0x8e4 <openDoor+0xca>
		__ticks = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	9b 87       	std	Y+11, r25	; 0x0b
     8e0:	8a 87       	std	Y+10, r24	; 0x0a
     8e2:	54 c0       	rjmp	.+168    	; 0x98c <openDoor+0x172>
	else if (__tmp > 65535)
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	3f ef       	ldi	r19, 0xFF	; 255
     8e8:	4f e7       	ldi	r20, 0x7F	; 127
     8ea:	57 e4       	ldi	r21, 0x47	; 71
     8ec:	6e 81       	ldd	r22, Y+6	; 0x06
     8ee:	7f 81       	ldd	r23, Y+7	; 0x07
     8f0:	88 85       	ldd	r24, Y+8	; 0x08
     8f2:	99 85       	ldd	r25, Y+9	; 0x09
     8f4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     8f8:	18 16       	cp	r1, r24
     8fa:	d4 f5       	brge	.+116    	; 0x970 <openDoor+0x156>
		__ticks = (uint16_t) (__ms * 10.0);
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e2       	ldi	r20, 0x20	; 32
     902:	51 e4       	ldi	r21, 0x41	; 65
     904:	6a 81       	ldd	r22, Y+2	; 0x02
     906:	7b 81       	ldd	r23, Y+3	; 0x03
     908:	8c 81       	ldd	r24, Y+4	; 0x04
     90a:	9d 81       	ldd	r25, Y+5	; 0x05
     90c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     910:	68 8f       	std	Y+24, r22	; 0x18
     912:	79 8f       	std	Y+25, r23	; 0x19
     914:	8a 8f       	std	Y+26, r24	; 0x1a
     916:	9b 8f       	std	Y+27, r25	; 0x1b
     918:	88 8d       	ldd	r24, Y+24	; 0x18
     91a:	99 8d       	ldd	r25, Y+25	; 0x19
     91c:	aa 8d       	ldd	r26, Y+26	; 0x1a
     91e:	bb 8d       	ldd	r27, Y+27	; 0x1b
     920:	88 8b       	std	Y+16, r24	; 0x10
     922:	99 8b       	std	Y+17, r25	; 0x11
     924:	aa 8b       	std	Y+18, r26	; 0x12
     926:	bb 8b       	std	Y+19, r27	; 0x13
     928:	68 89       	ldd	r22, Y+16	; 0x10
     92a:	79 89       	ldd	r23, Y+17	; 0x11
     92c:	8a 89       	ldd	r24, Y+18	; 0x12
     92e:	9b 89       	ldd	r25, Y+19	; 0x13
     930:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     934:	6c 8f       	std	Y+28, r22	; 0x1c
     936:	7d 8f       	std	Y+29, r23	; 0x1d
     938:	8e 8f       	std	Y+30, r24	; 0x1e
     93a:	9f 8f       	std	Y+31, r25	; 0x1f
     93c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     93e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     940:	bb 87       	std	Y+11, r27	; 0x0b
     942:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
     944:	10 c0       	rjmp	.+32     	; 0x966 <openDoor+0x14c>
     946:	88 ec       	ldi	r24, 0xC8	; 200
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	9d 87       	std	Y+13, r25	; 0x0d
     94c:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
     94e:	8c 85       	ldd	r24, Y+12	; 0x0c
     950:	9d 85       	ldd	r25, Y+13	; 0x0d
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <openDoor+0x138>
     956:	9d 87       	std	Y+13, r25	; 0x0d
     958:	8c 87       	std	Y+12, r24	; 0x0c
}
     95a:	00 00       	nop
			__ticks --;
     95c:	8a 85       	ldd	r24, Y+10	; 0x0a
     95e:	9b 85       	ldd	r25, Y+11	; 0x0b
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	9b 87       	std	Y+11, r25	; 0x0b
     964:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
     966:	8a 85       	ldd	r24, Y+10	; 0x0a
     968:	9b 85       	ldd	r25, Y+11	; 0x0b
     96a:	89 2b       	or	r24, r25
     96c:	61 f7       	brne	.-40     	; 0x946 <openDoor+0x12c>
		return;
     96e:	19 c0       	rjmp	.+50     	; 0x9a2 <openDoor+0x188>
		__ticks = (uint16_t)__tmp;
     970:	6e 81       	ldd	r22, Y+6	; 0x06
     972:	7f 81       	ldd	r23, Y+7	; 0x07
     974:	88 85       	ldd	r24, Y+8	; 0x08
     976:	99 85       	ldd	r25, Y+9	; 0x09
     978:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     97c:	68 a3       	std	Y+32, r22	; 0x20
     97e:	79 a3       	std	Y+33, r23	; 0x21
     980:	8a a3       	std	Y+34, r24	; 0x22
     982:	9b a3       	std	Y+35, r25	; 0x23
     984:	88 a1       	ldd	r24, Y+32	; 0x20
     986:	99 a1       	ldd	r25, Y+33	; 0x21
     988:	9b 87       	std	Y+11, r25	; 0x0b
     98a:	8a 87       	std	Y+10, r24	; 0x0a
     98c:	8a 85       	ldd	r24, Y+10	; 0x0a
     98e:	9b 85       	ldd	r25, Y+11	; 0x0b
     990:	9f 87       	std	Y+15, r25	; 0x0f
     992:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
     994:	8e 85       	ldd	r24, Y+14	; 0x0e
     996:	9f 85       	ldd	r25, Y+15	; 0x0f
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <openDoor+0x17e>
     99c:	9f 87       	std	Y+15, r25	; 0x0f
     99e:	8e 87       	std	Y+14, r24	; 0x0e
}
     9a0:	00 00       	nop
			_delay_ms(1000);
			i++;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	89 83       	std	Y+1, r24	; 0x01
		}
	} while (i < 3);	/* wait until user enter correct pass or three time wrong password*/
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <openDoor+0x196>
     9ae:	40 cf       	rjmp	.-384    	; 0x830 <openDoor+0x16>
	if(i == 3){	/* that means user enter three time wrong password*/
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	11 f4       	brne	.+4      	; 0x9ba <openDoor+0x1a0>
		runBuzzer();	 /* start of buzzer mode */
     9b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <runBuzzer>
	}

}
     9ba:	00 00       	nop
     9bc:	a3 96       	adiw	r28, 0x23	; 35
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <KeyPad_getPressedKey>:


/*
 * Function responsible for getting the pressed keypad key
 */
uint8 KeyPad_getPressedKey(void) {
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <KeyPad_getPressedKey+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
     9d8:	19 82       	std	Y+1, r1	; 0x01
     9da:	47 c0       	rjmp	.+142    	; 0xa6a <KeyPad_getPressedKey+0x9c>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_DIR = (0b00010000<<col);
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	28 2f       	mov	r18, r24
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	80 e1       	ldi	r24, 0x10	; 16
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	ac 01       	movw	r20, r24
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <KeyPad_getPressedKey+0x20>
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	2a 95       	dec	r18
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <KeyPad_getPressedKey+0x1c>
     9f2:	9a 01       	movw	r18, r20
     9f4:	8a e3       	ldi	r24, 0x3A	; 58
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	80 e1       	ldi	r24, 0x10	; 16
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <KeyPad_getPressedKey+0x3e>
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	2a 95       	dec	r18
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <KeyPad_getPressedKey+0x3a>
     a10:	28 2f       	mov	r18, r24
     a12:	8b e3       	ldi	r24, 0x3B	; 59
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	20 95       	com	r18
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
				for(row=0;row<N_row;row++) /* loop for rows */
     a1c:	1a 82       	std	Y+2, r1	; 0x02
     a1e:	1f c0       	rjmp	.+62     	; 0xa5e <KeyPad_getPressedKey+0x90>
				{
					if(BIT_IS_CLEAR(KEYPAD_PIN,row)) /* if the switch is press in this row */
     a20:	89 e3       	ldi	r24, 0x39	; 57
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	2a 81       	ldd	r18, Y+2	; 0x02
     a2e:	22 2f       	mov	r18, r18
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <KeyPad_getPressedKey+0x6a>
     a34:	95 95       	asr	r25
     a36:	87 95       	ror	r24
     a38:	2a 95       	dec	r18
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <KeyPad_getPressedKey+0x66>
     a3c:	81 70       	andi	r24, 0x01	; 1
     a3e:	99 27       	eor	r25, r25
     a40:	89 2b       	or	r24, r25
     a42:	51 f4       	brne	.+20     	; 0xa58 <KeyPad_getPressedKey+0x8a>
					{
						#if (N_col == 3)
							return KeyPad_4x3_ReturnASCII((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_ReturnASCII((row*N_col)+col+1);
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	98 2f       	mov	r25, r24
     a48:	99 0f       	add	r25, r25
     a4a:	99 0f       	add	r25, r25
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	89 0f       	add	r24, r25
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	0e 94 3f 05 	call	0xa7e	; 0xa7e <KeyPad_4x4_ReturnASCII>
     a56:	0e c0       	rjmp	.+28     	; 0xa74 <KeyPad_getPressedKey+0xa6>
				for(row=0;row<N_row;row++) /* loop for rows */
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	8a 83       	std	Y+2, r24	; 0x02
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	84 30       	cpi	r24, 0x04	; 4
     a62:	f0 f2       	brcs	.-68     	; 0xa20 <KeyPad_getPressedKey+0x52>
			for(col=0;col<N_col;col++) /* loop for columns */
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <KeyPad_getPressedKey+0xa4>
     a70:	b5 cf       	rjmp	.-150    	; 0x9dc <KeyPad_getPressedKey+0xe>
     a72:	b2 cf       	rjmp	.-156    	; 0x9d8 <KeyPad_getPressedKey+0xa>
						#endif
					}
				}
			}
		}
	}
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <KeyPad_4x4_ReturnASCII>:
		break;
	}
	return 0;
}
#elif(N_col ==4)
static uint8 KeyPad_4x4_ReturnASCII(uint8 num) {
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	0f 92       	push	r0
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	88 2f       	mov	r24, r24
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	09 2e       	mov	r0, r25
     a92:	00 0c       	add	r0, r0
     a94:	aa 0b       	sbc	r26, r26
     a96:	bb 0b       	sbc	r27, r27
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	a1 09       	sbc	r26, r1
     a9c:	b1 09       	sbc	r27, r1
     a9e:	80 31       	cpi	r24, 0x10	; 16
     aa0:	91 05       	cpc	r25, r1
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	28 f5       	brcc	.+74     	; 0xaf2 <KeyPad_4x4_ReturnASCII+0x74>
     aa8:	84 5d       	subi	r24, 0xD4	; 212
     aaa:	9c 4e       	sbci	r25, 0xEC	; 236
     aac:	fc 01       	movw	r30, r24
     aae:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__tablejump2__>
	case 1:		return '7';
     ab2:	87 e3       	ldi	r24, 0x37	; 55
     ab4:	1f c0       	rjmp	.+62     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 2:		return '8';
     ab6:	88 e3       	ldi	r24, 0x38	; 56
     ab8:	1d c0       	rjmp	.+58     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 3:		return '9';
     aba:	89 e3       	ldi	r24, 0x39	; 57
     abc:	1b c0       	rjmp	.+54     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 4:		return '/';
     abe:	8f e2       	ldi	r24, 0x2F	; 47
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 5:		return '4';
     ac2:	84 e3       	ldi	r24, 0x34	; 52
     ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 6:		return '5';
     ac6:	85 e3       	ldi	r24, 0x35	; 53
     ac8:	15 c0       	rjmp	.+42     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 7:		return '6';
     aca:	86 e3       	ldi	r24, 0x36	; 54
     acc:	13 c0       	rjmp	.+38     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 8:		return '*';
     ace:	8a e2       	ldi	r24, 0x2A	; 42
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 9:		return '1';
     ad2:	81 e3       	ldi	r24, 0x31	; 49
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 10:	return '2';
     ad6:	82 e3       	ldi	r24, 0x32	; 50
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 11:	return '3';
     ada:	83 e3       	ldi	r24, 0x33	; 51
     adc:	0b c0       	rjmp	.+22     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 12:	return '-';
     ade:	8d e2       	ldi	r24, 0x2D	; 45
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 13:	return 8;
     ae2:	88 e0       	ldi	r24, 0x08	; 8
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 14:	return '0';
     ae6:	80 e3       	ldi	r24, 0x30	; 48
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 15:	return '=';
     aea:	8d e3       	ldi	r24, 0x3D	; 61
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 16:	return '+';
     aee:	8b e2       	ldi	r24, 0x2B	; 43
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <KeyPad_4x4_ReturnASCII+0x76>
			break;
	default:	return '\0';
     af2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return 0;
}
     af4:	0f 90       	pop	r0
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	c9 58       	subi	r28, 0x89	; 137
     b06:	d1 09       	sbc	r29, r1
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	89 af       	std	Y+57, r24	; 0x39
	RS = CLEAR; /* tell LCD that data which will send now is command */
     b14:	82 e3       	ldi	r24, 0x32	; 50
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	dc 01       	movw	r26, r24
     b1a:	2c 91       	ld	r18, X
     b1c:	2f 7e       	andi	r18, 0xEF	; 239
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
	RW = CLEAR; /* select write Mode on LCD */
     b22:	82 e3       	ldi	r24, 0x32	; 50
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	dc 01       	movw	r26, r24
     b28:	2c 91       	ld	r18, X
     b2a:	2f 7d       	andi	r18, 0xDF	; 223
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e8       	ldi	r26, 0x80	; 128
     b36:	bf e3       	ldi	r27, 0x3F	; 63
     b38:	8b a7       	std	Y+43, r24	; 0x2b
     b3a:	9c a7       	std	Y+44, r25	; 0x2c
     b3c:	ad a7       	std	Y+45, r26	; 0x2d
     b3e:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4a ef       	ldi	r20, 0xFA	; 250
     b46:	54 e4       	ldi	r21, 0x44	; 68
     b48:	6b a5       	ldd	r22, Y+43	; 0x2b
     b4a:	7c a5       	ldd	r23, Y+44	; 0x2c
     b4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     b4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     b50:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     b54:	2e 96       	adiw	r28, 0x0e	; 14
     b56:	6c af       	std	Y+60, r22	; 0x3c
     b58:	7d af       	std	Y+61, r23	; 0x3d
     b5a:	8e af       	std	Y+62, r24	; 0x3e
     b5c:	9f af       	std	Y+63, r25	; 0x3f
     b5e:	2e 97       	sbiw	r28, 0x0e	; 14
     b60:	2e 96       	adiw	r28, 0x0e	; 14
     b62:	8c ad       	ldd	r24, Y+60	; 0x3c
     b64:	9d ad       	ldd	r25, Y+61	; 0x3d
     b66:	ae ad       	ldd	r26, Y+62	; 0x3e
     b68:	bf ad       	ldd	r27, Y+63	; 0x3f
     b6a:	2e 97       	sbiw	r28, 0x0e	; 14
     b6c:	8f a7       	std	Y+47, r24	; 0x2f
     b6e:	98 ab       	std	Y+48, r25	; 0x30
     b70:	a9 ab       	std	Y+49, r26	; 0x31
     b72:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	6f a5       	ldd	r22, Y+47	; 0x2f
     b7e:	78 a9       	ldd	r23, Y+48	; 0x30
     b80:	89 a9       	ldd	r24, Y+49	; 0x31
     b82:	9a a9       	ldd	r25, Y+50	; 0x32
     b84:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     b88:	88 23       	and	r24, r24
     b8a:	2c f4       	brge	.+10     	; 0xb96 <LCD_sendCommand+0x9a>
		__ticks = 1;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9c ab       	std	Y+52, r25	; 0x34
     b92:	8b ab       	std	Y+51, r24	; 0x33
     b94:	65 c0       	rjmp	.+202    	; 0xc60 <LCD_sendCommand+0x164>
	else if (__tmp > 65535)
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	6f a5       	ldd	r22, Y+47	; 0x2f
     ba0:	78 a9       	ldd	r23, Y+48	; 0x30
     ba2:	89 a9       	ldd	r24, Y+49	; 0x31
     ba4:	9a a9       	ldd	r25, Y+50	; 0x32
     ba6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	0c f0       	brlt	.+2      	; 0xbb0 <LCD_sendCommand+0xb4>
     bae:	46 c0       	rjmp	.+140    	; 0xc3c <LCD_sendCommand+0x140>
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e2       	ldi	r20, 0x20	; 32
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	6b a5       	ldd	r22, Y+43	; 0x2b
     bba:	7c a5       	ldd	r23, Y+44	; 0x2c
     bbc:	8d a5       	ldd	r24, Y+45	; 0x2d
     bbe:	9e a5       	ldd	r25, Y+46	; 0x2e
     bc0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     bc4:	62 96       	adiw	r28, 0x12	; 18
     bc6:	6c af       	std	Y+60, r22	; 0x3c
     bc8:	7d af       	std	Y+61, r23	; 0x3d
     bca:	8e af       	std	Y+62, r24	; 0x3e
     bcc:	9f af       	std	Y+63, r25	; 0x3f
     bce:	62 97       	sbiw	r28, 0x12	; 18
     bd0:	62 96       	adiw	r28, 0x12	; 18
     bd2:	8c ad       	ldd	r24, Y+60	; 0x3c
     bd4:	9d ad       	ldd	r25, Y+61	; 0x3d
     bd6:	ae ad       	ldd	r26, Y+62	; 0x3e
     bd8:	bf ad       	ldd	r27, Y+63	; 0x3f
     bda:	62 97       	sbiw	r28, 0x12	; 18
     bdc:	2a 96       	adiw	r28, 0x0a	; 10
     bde:	8c af       	std	Y+60, r24	; 0x3c
     be0:	9d af       	std	Y+61, r25	; 0x3d
     be2:	ae af       	std	Y+62, r26	; 0x3e
     be4:	bf af       	std	Y+63, r27	; 0x3f
     be6:	2a 97       	sbiw	r28, 0x0a	; 10
     be8:	2a 96       	adiw	r28, 0x0a	; 10
     bea:	6c ad       	ldd	r22, Y+60	; 0x3c
     bec:	7d ad       	ldd	r23, Y+61	; 0x3d
     bee:	8e ad       	ldd	r24, Y+62	; 0x3e
     bf0:	9f ad       	ldd	r25, Y+63	; 0x3f
     bf2:	2a 97       	sbiw	r28, 0x0a	; 10
     bf4:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     bf8:	66 96       	adiw	r28, 0x16	; 22
     bfa:	6c af       	std	Y+60, r22	; 0x3c
     bfc:	7d af       	std	Y+61, r23	; 0x3d
     bfe:	8e af       	std	Y+62, r24	; 0x3e
     c00:	9f af       	std	Y+63, r25	; 0x3f
     c02:	66 97       	sbiw	r28, 0x16	; 22
     c04:	64 96       	adiw	r28, 0x14	; 20
     c06:	ae ad       	ldd	r26, Y+62	; 0x3e
     c08:	bf ad       	ldd	r27, Y+63	; 0x3f
     c0a:	64 97       	sbiw	r28, 0x14	; 20
     c0c:	bc ab       	std	Y+52, r27	; 0x34
     c0e:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     c10:	10 c0       	rjmp	.+32     	; 0xc32 <LCD_sendCommand+0x136>
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9e ab       	std	Y+54, r25	; 0x36
     c18:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
     c1a:	8d a9       	ldd	r24, Y+53	; 0x35
     c1c:	9e a9       	ldd	r25, Y+54	; 0x36
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <LCD_sendCommand+0x122>
     c22:	9e ab       	std	Y+54, r25	; 0x36
     c24:	8d ab       	std	Y+53, r24	; 0x35
}
     c26:	00 00       	nop
			__ticks --;
     c28:	8b a9       	ldd	r24, Y+51	; 0x33
     c2a:	9c a9       	ldd	r25, Y+52	; 0x34
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9c ab       	std	Y+52, r25	; 0x34
     c30:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     c32:	8b a9       	ldd	r24, Y+51	; 0x33
     c34:	9c a9       	ldd	r25, Y+52	; 0x34
     c36:	89 2b       	or	r24, r25
     c38:	61 f7       	brne	.-40     	; 0xc12 <LCD_sendCommand+0x116>
		return;
     c3a:	1d c0       	rjmp	.+58     	; 0xc76 <LCD_sendCommand+0x17a>
		__ticks = (uint16_t)__tmp;
     c3c:	6f a5       	ldd	r22, Y+47	; 0x2f
     c3e:	78 a9       	ldd	r23, Y+48	; 0x30
     c40:	89 a9       	ldd	r24, Y+49	; 0x31
     c42:	9a a9       	ldd	r25, Y+50	; 0x32
     c44:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     c48:	6a 96       	adiw	r28, 0x1a	; 26
     c4a:	6c af       	std	Y+60, r22	; 0x3c
     c4c:	7d af       	std	Y+61, r23	; 0x3d
     c4e:	8e af       	std	Y+62, r24	; 0x3e
     c50:	9f af       	std	Y+63, r25	; 0x3f
     c52:	6a 97       	sbiw	r28, 0x1a	; 26
     c54:	68 96       	adiw	r28, 0x18	; 24
     c56:	ee ad       	ldd	r30, Y+62	; 0x3e
     c58:	ff ad       	ldd	r31, Y+63	; 0x3f
     c5a:	68 97       	sbiw	r28, 0x18	; 24
     c5c:	fc ab       	std	Y+52, r31	; 0x34
     c5e:	eb ab       	std	Y+51, r30	; 0x33
     c60:	8b a9       	ldd	r24, Y+51	; 0x33
     c62:	9c a9       	ldd	r25, Y+52	; 0x34
     c64:	98 af       	std	Y+56, r25	; 0x38
     c66:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     c68:	8f a9       	ldd	r24, Y+55	; 0x37
     c6a:	98 ad       	ldd	r25, Y+56	; 0x38
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <LCD_sendCommand+0x170>
     c70:	98 af       	std	Y+56, r25	; 0x38
     c72:	8f ab       	std	Y+55, r24	; 0x37
}
     c74:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     c76:	82 e3       	ldi	r24, 0x32	; 50
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	dc 01       	movw	r26, r24
     c7c:	2c 91       	ld	r18, X
     c7e:	20 64       	ori	r18, 0x40	; 64
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	a0 e8       	ldi	r26, 0x80	; 128
     c8a:	bf e3       	ldi	r27, 0x3F	; 63
     c8c:	8d 8f       	std	Y+29, r24	; 0x1d
     c8e:	9e 8f       	std	Y+30, r25	; 0x1e
     c90:	af 8f       	std	Y+31, r26	; 0x1f
     c92:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	4a ef       	ldi	r20, 0xFA	; 250
     c9a:	54 e4       	ldi	r21, 0x44	; 68
     c9c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c9e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ca0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ca2:	98 a1       	ldd	r25, Y+32	; 0x20
     ca4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     ca8:	6e 96       	adiw	r28, 0x1e	; 30
     caa:	6c af       	std	Y+60, r22	; 0x3c
     cac:	7d af       	std	Y+61, r23	; 0x3d
     cae:	8e af       	std	Y+62, r24	; 0x3e
     cb0:	9f af       	std	Y+63, r25	; 0x3f
     cb2:	6e 97       	sbiw	r28, 0x1e	; 30
     cb4:	6e 96       	adiw	r28, 0x1e	; 30
     cb6:	8c ad       	ldd	r24, Y+60	; 0x3c
     cb8:	9d ad       	ldd	r25, Y+61	; 0x3d
     cba:	ae ad       	ldd	r26, Y+62	; 0x3e
     cbc:	bf ad       	ldd	r27, Y+63	; 0x3f
     cbe:	6e 97       	sbiw	r28, 0x1e	; 30
     cc0:	89 a3       	std	Y+33, r24	; 0x21
     cc2:	9a a3       	std	Y+34, r25	; 0x22
     cc4:	ab a3       	std	Y+35, r26	; 0x23
     cc6:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	69 a1       	ldd	r22, Y+33	; 0x21
     cd2:	7a a1       	ldd	r23, Y+34	; 0x22
     cd4:	8b a1       	ldd	r24, Y+35	; 0x23
     cd6:	9c a1       	ldd	r25, Y+36	; 0x24
     cd8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     cdc:	88 23       	and	r24, r24
     cde:	2c f4       	brge	.+10     	; 0xcea <LCD_sendCommand+0x1ee>
		__ticks = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	9e a3       	std	Y+38, r25	; 0x26
     ce6:	8d a3       	std	Y+37, r24	; 0x25
     ce8:	65 c0       	rjmp	.+202    	; 0xdb4 <LCD_sendCommand+0x2b8>
	else if (__tmp > 65535)
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	69 a1       	ldd	r22, Y+33	; 0x21
     cf4:	7a a1       	ldd	r23, Y+34	; 0x22
     cf6:	8b a1       	ldd	r24, Y+35	; 0x23
     cf8:	9c a1       	ldd	r25, Y+36	; 0x24
     cfa:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     cfe:	18 16       	cp	r1, r24
     d00:	0c f0       	brlt	.+2      	; 0xd04 <LCD_sendCommand+0x208>
     d02:	46 c0       	rjmp	.+140    	; 0xd90 <LCD_sendCommand+0x294>
		__ticks = (uint16_t) (__ms * 10.0);
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d12:	98 a1       	ldd	r25, Y+32	; 0x20
     d14:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     d18:	a2 96       	adiw	r28, 0x22	; 34
     d1a:	6c af       	std	Y+60, r22	; 0x3c
     d1c:	7d af       	std	Y+61, r23	; 0x3d
     d1e:	8e af       	std	Y+62, r24	; 0x3e
     d20:	9f af       	std	Y+63, r25	; 0x3f
     d22:	a2 97       	sbiw	r28, 0x22	; 34
     d24:	a2 96       	adiw	r28, 0x22	; 34
     d26:	8c ad       	ldd	r24, Y+60	; 0x3c
     d28:	9d ad       	ldd	r25, Y+61	; 0x3d
     d2a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d2c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d2e:	a2 97       	sbiw	r28, 0x22	; 34
     d30:	26 96       	adiw	r28, 0x06	; 6
     d32:	8c af       	std	Y+60, r24	; 0x3c
     d34:	9d af       	std	Y+61, r25	; 0x3d
     d36:	ae af       	std	Y+62, r26	; 0x3e
     d38:	bf af       	std	Y+63, r27	; 0x3f
     d3a:	26 97       	sbiw	r28, 0x06	; 6
     d3c:	26 96       	adiw	r28, 0x06	; 6
     d3e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d40:	7d ad       	ldd	r23, Y+61	; 0x3d
     d42:	8e ad       	ldd	r24, Y+62	; 0x3e
     d44:	9f ad       	ldd	r25, Y+63	; 0x3f
     d46:	26 97       	sbiw	r28, 0x06	; 6
     d48:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     d4c:	a6 96       	adiw	r28, 0x26	; 38
     d4e:	6c af       	std	Y+60, r22	; 0x3c
     d50:	7d af       	std	Y+61, r23	; 0x3d
     d52:	8e af       	std	Y+62, r24	; 0x3e
     d54:	9f af       	std	Y+63, r25	; 0x3f
     d56:	a6 97       	sbiw	r28, 0x26	; 38
     d58:	a4 96       	adiw	r28, 0x24	; 36
     d5a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d5c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d5e:	a4 97       	sbiw	r28, 0x24	; 36
     d60:	be a3       	std	Y+38, r27	; 0x26
     d62:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     d64:	10 c0       	rjmp	.+32     	; 0xd86 <LCD_sendCommand+0x28a>
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	98 a7       	std	Y+40, r25	; 0x28
     d6c:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     d6e:	8f a1       	ldd	r24, Y+39	; 0x27
     d70:	98 a5       	ldd	r25, Y+40	; 0x28
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <LCD_sendCommand+0x276>
     d76:	98 a7       	std	Y+40, r25	; 0x28
     d78:	8f a3       	std	Y+39, r24	; 0x27
}
     d7a:	00 00       	nop
			__ticks --;
     d7c:	8d a1       	ldd	r24, Y+37	; 0x25
     d7e:	9e a1       	ldd	r25, Y+38	; 0x26
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9e a3       	std	Y+38, r25	; 0x26
     d84:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     d86:	8d a1       	ldd	r24, Y+37	; 0x25
     d88:	9e a1       	ldd	r25, Y+38	; 0x26
     d8a:	89 2b       	or	r24, r25
     d8c:	61 f7       	brne	.-40     	; 0xd66 <LCD_sendCommand+0x26a>
		return;
     d8e:	1d c0       	rjmp	.+58     	; 0xdca <LCD_sendCommand+0x2ce>
		__ticks = (uint16_t)__tmp;
     d90:	69 a1       	ldd	r22, Y+33	; 0x21
     d92:	7a a1       	ldd	r23, Y+34	; 0x22
     d94:	8b a1       	ldd	r24, Y+35	; 0x23
     d96:	9c a1       	ldd	r25, Y+36	; 0x24
     d98:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     d9c:	aa 96       	adiw	r28, 0x2a	; 42
     d9e:	6c af       	std	Y+60, r22	; 0x3c
     da0:	7d af       	std	Y+61, r23	; 0x3d
     da2:	8e af       	std	Y+62, r24	; 0x3e
     da4:	9f af       	std	Y+63, r25	; 0x3f
     da6:	aa 97       	sbiw	r28, 0x2a	; 42
     da8:	a8 96       	adiw	r28, 0x28	; 40
     daa:	ee ad       	ldd	r30, Y+62	; 0x3e
     dac:	ff ad       	ldd	r31, Y+63	; 0x3f
     dae:	a8 97       	sbiw	r28, 0x28	; 40
     db0:	fe a3       	std	Y+38, r31	; 0x26
     db2:	ed a3       	std	Y+37, r30	; 0x25
     db4:	8d a1       	ldd	r24, Y+37	; 0x25
     db6:	9e a1       	ldd	r25, Y+38	; 0x26
     db8:	9a a7       	std	Y+42, r25	; 0x2a
     dba:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     dbc:	89 a5       	ldd	r24, Y+41	; 0x29
     dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_sendCommand+0x2c4>
     dc4:	9a a7       	std	Y+42, r25	; 0x2a
     dc6:	89 a7       	std	Y+41, r24	; 0x29
}
     dc8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = command; /* send command to LCD to make order */
     dca:	85 e3       	ldi	r24, 0x35	; 53
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	29 ad       	ldd	r18, Y+57	; 0x39
     dd0:	dc 01       	movw	r26, r24
     dd2:	2c 93       	st	X, r18
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a0 e8       	ldi	r26, 0x80	; 128
     dda:	bf e3       	ldi	r27, 0x3F	; 63
     ddc:	8f 87       	std	Y+15, r24	; 0x0f
     dde:	98 8b       	std	Y+16, r25	; 0x10
     de0:	a9 8b       	std	Y+17, r26	; 0x11
     de2:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a ef       	ldi	r20, 0xFA	; 250
     dea:	54 e4       	ldi	r21, 0x44	; 68
     dec:	6f 85       	ldd	r22, Y+15	; 0x0f
     dee:	78 89       	ldd	r23, Y+16	; 0x10
     df0:	89 89       	ldd	r24, Y+17	; 0x11
     df2:	9a 89       	ldd	r25, Y+18	; 0x12
     df4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     df8:	ae 96       	adiw	r28, 0x2e	; 46
     dfa:	6c af       	std	Y+60, r22	; 0x3c
     dfc:	7d af       	std	Y+61, r23	; 0x3d
     dfe:	8e af       	std	Y+62, r24	; 0x3e
     e00:	9f af       	std	Y+63, r25	; 0x3f
     e02:	ae 97       	sbiw	r28, 0x2e	; 46
     e04:	ae 96       	adiw	r28, 0x2e	; 46
     e06:	8c ad       	ldd	r24, Y+60	; 0x3c
     e08:	9d ad       	ldd	r25, Y+61	; 0x3d
     e0a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e0c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e0e:	ae 97       	sbiw	r28, 0x2e	; 46
     e10:	8b 8b       	std	Y+19, r24	; 0x13
     e12:	9c 8b       	std	Y+20, r25	; 0x14
     e14:	ad 8b       	std	Y+21, r26	; 0x15
     e16:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	6b 89       	ldd	r22, Y+19	; 0x13
     e22:	7c 89       	ldd	r23, Y+20	; 0x14
     e24:	8d 89       	ldd	r24, Y+21	; 0x15
     e26:	9e 89       	ldd	r25, Y+22	; 0x16
     e28:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	2c f4       	brge	.+10     	; 0xe3a <LCD_sendCommand+0x33e>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	98 8f       	std	Y+24, r25	; 0x18
     e36:	8f 8b       	std	Y+23, r24	; 0x17
     e38:	65 c0       	rjmp	.+202    	; 0xf04 <LCD_sendCommand+0x408>
	else if (__tmp > 65535)
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	4f e7       	ldi	r20, 0x7F	; 127
     e40:	57 e4       	ldi	r21, 0x47	; 71
     e42:	6b 89       	ldd	r22, Y+19	; 0x13
     e44:	7c 89       	ldd	r23, Y+20	; 0x14
     e46:	8d 89       	ldd	r24, Y+21	; 0x15
     e48:	9e 89       	ldd	r25, Y+22	; 0x16
     e4a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     e4e:	18 16       	cp	r1, r24
     e50:	0c f0       	brlt	.+2      	; 0xe54 <LCD_sendCommand+0x358>
     e52:	46 c0       	rjmp	.+140    	; 0xee0 <LCD_sendCommand+0x3e4>
		__ticks = (uint16_t) (__ms * 10.0);
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	6f 85       	ldd	r22, Y+15	; 0x0f
     e5e:	78 89       	ldd	r23, Y+16	; 0x10
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	9a 89       	ldd	r25, Y+18	; 0x12
     e64:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     e68:	e2 96       	adiw	r28, 0x32	; 50
     e6a:	6c af       	std	Y+60, r22	; 0x3c
     e6c:	7d af       	std	Y+61, r23	; 0x3d
     e6e:	8e af       	std	Y+62, r24	; 0x3e
     e70:	9f af       	std	Y+63, r25	; 0x3f
     e72:	e2 97       	sbiw	r28, 0x32	; 50
     e74:	e2 96       	adiw	r28, 0x32	; 50
     e76:	8c ad       	ldd	r24, Y+60	; 0x3c
     e78:	9d ad       	ldd	r25, Y+61	; 0x3d
     e7a:	ae ad       	ldd	r26, Y+62	; 0x3e
     e7c:	bf ad       	ldd	r27, Y+63	; 0x3f
     e7e:	e2 97       	sbiw	r28, 0x32	; 50
     e80:	22 96       	adiw	r28, 0x02	; 2
     e82:	8c af       	std	Y+60, r24	; 0x3c
     e84:	9d af       	std	Y+61, r25	; 0x3d
     e86:	ae af       	std	Y+62, r26	; 0x3e
     e88:	bf af       	std	Y+63, r27	; 0x3f
     e8a:	22 97       	sbiw	r28, 0x02	; 2
     e8c:	22 96       	adiw	r28, 0x02	; 2
     e8e:	6c ad       	ldd	r22, Y+60	; 0x3c
     e90:	7d ad       	ldd	r23, Y+61	; 0x3d
     e92:	8e ad       	ldd	r24, Y+62	; 0x3e
     e94:	9f ad       	ldd	r25, Y+63	; 0x3f
     e96:	22 97       	sbiw	r28, 0x02	; 2
     e98:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     e9c:	e6 96       	adiw	r28, 0x36	; 54
     e9e:	6c af       	std	Y+60, r22	; 0x3c
     ea0:	7d af       	std	Y+61, r23	; 0x3d
     ea2:	8e af       	std	Y+62, r24	; 0x3e
     ea4:	9f af       	std	Y+63, r25	; 0x3f
     ea6:	e6 97       	sbiw	r28, 0x36	; 54
     ea8:	e4 96       	adiw	r28, 0x34	; 52
     eaa:	ae ad       	ldd	r26, Y+62	; 0x3e
     eac:	bf ad       	ldd	r27, Y+63	; 0x3f
     eae:	e4 97       	sbiw	r28, 0x34	; 52
     eb0:	b8 8f       	std	Y+24, r27	; 0x18
     eb2:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <LCD_sendCommand+0x3da>
     eb6:	88 ec       	ldi	r24, 0xC8	; 200
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	9a 8f       	std	Y+26, r25	; 0x1a
     ebc:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     ebe:	89 8d       	ldd	r24, Y+25	; 0x19
     ec0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <LCD_sendCommand+0x3c6>
     ec6:	9a 8f       	std	Y+26, r25	; 0x1a
     ec8:	89 8f       	std	Y+25, r24	; 0x19
}
     eca:	00 00       	nop
			__ticks --;
     ecc:	8f 89       	ldd	r24, Y+23	; 0x17
     ece:	98 8d       	ldd	r25, Y+24	; 0x18
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	98 8f       	std	Y+24, r25	; 0x18
     ed4:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	89 2b       	or	r24, r25
     edc:	61 f7       	brne	.-40     	; 0xeb6 <LCD_sendCommand+0x3ba>
		return;
     ede:	1d c0       	rjmp	.+58     	; 0xf1a <LCD_sendCommand+0x41e>
		__ticks = (uint16_t)__tmp;
     ee0:	6b 89       	ldd	r22, Y+19	; 0x13
     ee2:	7c 89       	ldd	r23, Y+20	; 0x14
     ee4:	8d 89       	ldd	r24, Y+21	; 0x15
     ee6:	9e 89       	ldd	r25, Y+22	; 0x16
     ee8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     eec:	ea 96       	adiw	r28, 0x3a	; 58
     eee:	6c af       	std	Y+60, r22	; 0x3c
     ef0:	7d af       	std	Y+61, r23	; 0x3d
     ef2:	8e af       	std	Y+62, r24	; 0x3e
     ef4:	9f af       	std	Y+63, r25	; 0x3f
     ef6:	ea 97       	sbiw	r28, 0x3a	; 58
     ef8:	e8 96       	adiw	r28, 0x38	; 56
     efa:	ee ad       	ldd	r30, Y+62	; 0x3e
     efc:	ff ad       	ldd	r31, Y+63	; 0x3f
     efe:	e8 97       	sbiw	r28, 0x38	; 56
     f00:	f8 8f       	std	Y+24, r31	; 0x18
     f02:	ef 8b       	std	Y+23, r30	; 0x17
     f04:	8f 89       	ldd	r24, Y+23	; 0x17
     f06:	98 8d       	ldd	r25, Y+24	; 0x18
     f08:	9c 8f       	std	Y+28, r25	; 0x1c
     f0a:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <LCD_sendCommand+0x414>
     f14:	9c 8f       	std	Y+28, r25	; 0x1c
     f16:	8b 8f       	std	Y+27, r24	; 0x1b
}
     f18:	00 00       	nop
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((command) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
     f1a:	82 e3       	ldi	r24, 0x32	; 50
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	dc 01       	movw	r26, r24
     f20:	2c 91       	ld	r18, X
     f22:	2f 7b       	andi	r18, 0xBF	; 191
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e8       	ldi	r26, 0x80	; 128
     f2e:	bf e3       	ldi	r27, 0x3F	; 63
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	ab 83       	std	Y+3, r26	; 0x03
     f36:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a ef       	ldi	r20, 0xFA	; 250
     f3e:	54 e4       	ldi	r21, 0x44	; 68
     f40:	69 81       	ldd	r22, Y+1	; 0x01
     f42:	7a 81       	ldd	r23, Y+2	; 0x02
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     f4c:	ee 96       	adiw	r28, 0x3e	; 62
     f4e:	6c af       	std	Y+60, r22	; 0x3c
     f50:	7d af       	std	Y+61, r23	; 0x3d
     f52:	8e af       	std	Y+62, r24	; 0x3e
     f54:	9f af       	std	Y+63, r25	; 0x3f
     f56:	ee 97       	sbiw	r28, 0x3e	; 62
     f58:	ee 96       	adiw	r28, 0x3e	; 62
     f5a:	8c ad       	ldd	r24, Y+60	; 0x3c
     f5c:	9d ad       	ldd	r25, Y+61	; 0x3d
     f5e:	ae ad       	ldd	r26, Y+62	; 0x3e
     f60:	bf ad       	ldd	r27, Y+63	; 0x3f
     f62:	ee 97       	sbiw	r28, 0x3e	; 62
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	af 83       	std	Y+7, r26	; 0x07
     f6a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	6d 81       	ldd	r22, Y+5	; 0x05
     f76:	7e 81       	ldd	r23, Y+6	; 0x06
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <LCD_sendCommand+0x492>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9a 87       	std	Y+10, r25	; 0x0a
     f8a:	89 87       	std	Y+9, r24	; 0x09
     f8c:	6d c0       	rjmp	.+218    	; 0x1068 <LCD_sendCommand+0x56c>
	else if (__tmp > 65535)
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	3f ef       	ldi	r19, 0xFF	; 255
     f92:	4f e7       	ldi	r20, 0x7F	; 127
     f94:	57 e4       	ldi	r21, 0x47	; 71
     f96:	6d 81       	ldd	r22, Y+5	; 0x05
     f98:	7e 81       	ldd	r23, Y+6	; 0x06
     f9a:	8f 81       	ldd	r24, Y+7	; 0x07
     f9c:	98 85       	ldd	r25, Y+8	; 0x08
     f9e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <LCD_sendCommand+0x4ac>
     fa6:	4a c0       	rjmp	.+148    	; 0x103c <LCD_sendCommand+0x540>
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	69 81       	ldd	r22, Y+1	; 0x01
     fb2:	7a 81       	ldd	r23, Y+2	; 0x02
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
     fbc:	c2 58       	subi	r28, 0x82	; 130
     fbe:	df 4f       	sbci	r29, 0xFF	; 255
     fc0:	68 83       	st	Y, r22
     fc2:	79 83       	std	Y+1, r23	; 0x01
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	9b 83       	std	Y+3, r25	; 0x03
     fc8:	ce 57       	subi	r28, 0x7E	; 126
     fca:	d0 40       	sbci	r29, 0x00	; 0
     fcc:	c2 58       	subi	r28, 0x82	; 130
     fce:	df 4f       	sbci	r29, 0xFF	; 255
     fd0:	88 81       	ld	r24, Y
     fd2:	99 81       	ldd	r25, Y+1	; 0x01
     fd4:	aa 81       	ldd	r26, Y+2	; 0x02
     fd6:	bb 81       	ldd	r27, Y+3	; 0x03
     fd8:	ce 57       	subi	r28, 0x7E	; 126
     fda:	d0 40       	sbci	r29, 0x00	; 0
     fdc:	8a af       	std	Y+58, r24	; 0x3a
     fde:	9b af       	std	Y+59, r25	; 0x3b
     fe0:	ac af       	std	Y+60, r26	; 0x3c
     fe2:	bd af       	std	Y+61, r27	; 0x3d
     fe4:	6a ad       	ldd	r22, Y+58	; 0x3a
     fe6:	7b ad       	ldd	r23, Y+59	; 0x3b
     fe8:	8c ad       	ldd	r24, Y+60	; 0x3c
     fea:	9d ad       	ldd	r25, Y+61	; 0x3d
     fec:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
     ff0:	ce 57       	subi	r28, 0x7E	; 126
     ff2:	df 4f       	sbci	r29, 0xFF	; 255
     ff4:	68 83       	st	Y, r22
     ff6:	79 83       	std	Y+1, r23	; 0x01
     ff8:	8a 83       	std	Y+2, r24	; 0x02
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	c2 58       	subi	r28, 0x82	; 130
     ffe:	d0 40       	sbci	r29, 0x00	; 0
    1000:	ce 57       	subi	r28, 0x7E	; 126
    1002:	df 4f       	sbci	r29, 0xFF	; 255
    1004:	a8 81       	ld	r26, Y
    1006:	b9 81       	ldd	r27, Y+1	; 0x01
    1008:	c2 58       	subi	r28, 0x82	; 130
    100a:	d0 40       	sbci	r29, 0x00	; 0
    100c:	ba 87       	std	Y+10, r27	; 0x0a
    100e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <LCD_sendCommand+0x536>
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 87       	std	Y+12, r25	; 0x0c
    1018:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    101a:	8b 85       	ldd	r24, Y+11	; 0x0b
    101c:	9c 85       	ldd	r25, Y+12	; 0x0c
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <LCD_sendCommand+0x522>
    1022:	9c 87       	std	Y+12, r25	; 0x0c
    1024:	8b 87       	std	Y+11, r24	; 0x0b
}
    1026:	00 00       	nop
			__ticks --;
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9a 87       	std	Y+10, r25	; 0x0a
    1030:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	89 2b       	or	r24, r25
    1038:	61 f7       	brne	.-40     	; 0x1012 <LCD_sendCommand+0x516>
		return;
    103a:	21 c0       	rjmp	.+66     	; 0x107e <LCD_sendCommand+0x582>
		__ticks = (uint16_t)__tmp;
    103c:	6d 81       	ldd	r22, Y+5	; 0x05
    103e:	7e 81       	ldd	r23, Y+6	; 0x06
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1048:	ca 57       	subi	r28, 0x7A	; 122
    104a:	df 4f       	sbci	r29, 0xFF	; 255
    104c:	68 83       	st	Y, r22
    104e:	79 83       	std	Y+1, r23	; 0x01
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	c6 58       	subi	r28, 0x86	; 134
    1056:	d0 40       	sbci	r29, 0x00	; 0
    1058:	ca 57       	subi	r28, 0x7A	; 122
    105a:	df 4f       	sbci	r29, 0xFF	; 255
    105c:	e8 81       	ld	r30, Y
    105e:	f9 81       	ldd	r31, Y+1	; 0x01
    1060:	c6 58       	subi	r28, 0x86	; 134
    1062:	d0 40       	sbci	r29, 0x00	; 0
    1064:	fa 87       	std	Y+10, r31	; 0x0a
    1066:	e9 87       	std	Y+9, r30	; 0x09
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	9a 85       	ldd	r25, Y+10	; 0x0a
    106c:	9e 87       	std	Y+14, r25	; 0x0e
    106e:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <LCD_sendCommand+0x578>
    1078:	9e 87       	std	Y+14, r25	; 0x0e
    107a:	8d 87       	std	Y+13, r24	; 0x0d
}
    107c:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    107e:	00 00       	nop
}
    1080:	c7 57       	subi	r28, 0x77	; 119
    1082:	df 4f       	sbci	r29, 0xFF	; 255
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	c9 58       	subi	r28, 0x89	; 137
    109e:	d1 09       	sbc	r29, r1
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	89 af       	std	Y+57, r24	; 0x39
	RS = SET; /* tell LCD that data which will send now is DATA */
    10ac:	82 e3       	ldi	r24, 0x32	; 50
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	dc 01       	movw	r26, r24
    10b2:	2c 91       	ld	r18, X
    10b4:	20 61       	ori	r18, 0x10	; 16
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
	RW = CLEAR; /* select write Mode on LCD */
    10ba:	82 e3       	ldi	r24, 0x32	; 50
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	dc 01       	movw	r26, r24
    10c0:	2c 91       	ld	r18, X
    10c2:	2f 7d       	andi	r18, 0xDF	; 223
    10c4:	fc 01       	movw	r30, r24
    10c6:	20 83       	st	Z, r18
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e8       	ldi	r26, 0x80	; 128
    10ce:	bf e3       	ldi	r27, 0x3F	; 63
    10d0:	8b a7       	std	Y+43, r24	; 0x2b
    10d2:	9c a7       	std	Y+44, r25	; 0x2c
    10d4:	ad a7       	std	Y+45, r26	; 0x2d
    10d6:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4a ef       	ldi	r20, 0xFA	; 250
    10de:	54 e4       	ldi	r21, 0x44	; 68
    10e0:	6b a5       	ldd	r22, Y+43	; 0x2b
    10e2:	7c a5       	ldd	r23, Y+44	; 0x2c
    10e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    10e8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    10ec:	2e 96       	adiw	r28, 0x0e	; 14
    10ee:	6c af       	std	Y+60, r22	; 0x3c
    10f0:	7d af       	std	Y+61, r23	; 0x3d
    10f2:	8e af       	std	Y+62, r24	; 0x3e
    10f4:	9f af       	std	Y+63, r25	; 0x3f
    10f6:	2e 97       	sbiw	r28, 0x0e	; 14
    10f8:	2e 96       	adiw	r28, 0x0e	; 14
    10fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    10fc:	9d ad       	ldd	r25, Y+61	; 0x3d
    10fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1100:	bf ad       	ldd	r27, Y+63	; 0x3f
    1102:	2e 97       	sbiw	r28, 0x0e	; 14
    1104:	8f a7       	std	Y+47, r24	; 0x2f
    1106:	98 ab       	std	Y+48, r25	; 0x30
    1108:	a9 ab       	std	Y+49, r26	; 0x31
    110a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	6f a5       	ldd	r22, Y+47	; 0x2f
    1116:	78 a9       	ldd	r23, Y+48	; 0x30
    1118:	89 a9       	ldd	r24, Y+49	; 0x31
    111a:	9a a9       	ldd	r25, Y+50	; 0x32
    111c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <LCD_displayCharacter+0x9a>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c ab       	std	Y+52, r25	; 0x34
    112a:	8b ab       	std	Y+51, r24	; 0x33
    112c:	65 c0       	rjmp	.+202    	; 0x11f8 <LCD_displayCharacter+0x164>
	else if (__tmp > 65535)
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	6f a5       	ldd	r22, Y+47	; 0x2f
    1138:	78 a9       	ldd	r23, Y+48	; 0x30
    113a:	89 a9       	ldd	r24, Y+49	; 0x31
    113c:	9a a9       	ldd	r25, Y+50	; 0x32
    113e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1142:	18 16       	cp	r1, r24
    1144:	0c f0       	brlt	.+2      	; 0x1148 <LCD_displayCharacter+0xb4>
    1146:	46 c0       	rjmp	.+140    	; 0x11d4 <LCD_displayCharacter+0x140>
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	6b a5       	ldd	r22, Y+43	; 0x2b
    1152:	7c a5       	ldd	r23, Y+44	; 0x2c
    1154:	8d a5       	ldd	r24, Y+45	; 0x2d
    1156:	9e a5       	ldd	r25, Y+46	; 0x2e
    1158:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    115c:	62 96       	adiw	r28, 0x12	; 18
    115e:	6c af       	std	Y+60, r22	; 0x3c
    1160:	7d af       	std	Y+61, r23	; 0x3d
    1162:	8e af       	std	Y+62, r24	; 0x3e
    1164:	9f af       	std	Y+63, r25	; 0x3f
    1166:	62 97       	sbiw	r28, 0x12	; 18
    1168:	62 96       	adiw	r28, 0x12	; 18
    116a:	8c ad       	ldd	r24, Y+60	; 0x3c
    116c:	9d ad       	ldd	r25, Y+61	; 0x3d
    116e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1170:	bf ad       	ldd	r27, Y+63	; 0x3f
    1172:	62 97       	sbiw	r28, 0x12	; 18
    1174:	2a 96       	adiw	r28, 0x0a	; 10
    1176:	8c af       	std	Y+60, r24	; 0x3c
    1178:	9d af       	std	Y+61, r25	; 0x3d
    117a:	ae af       	std	Y+62, r26	; 0x3e
    117c:	bf af       	std	Y+63, r27	; 0x3f
    117e:	2a 97       	sbiw	r28, 0x0a	; 10
    1180:	2a 96       	adiw	r28, 0x0a	; 10
    1182:	6c ad       	ldd	r22, Y+60	; 0x3c
    1184:	7d ad       	ldd	r23, Y+61	; 0x3d
    1186:	8e ad       	ldd	r24, Y+62	; 0x3e
    1188:	9f ad       	ldd	r25, Y+63	; 0x3f
    118a:	2a 97       	sbiw	r28, 0x0a	; 10
    118c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1190:	66 96       	adiw	r28, 0x16	; 22
    1192:	6c af       	std	Y+60, r22	; 0x3c
    1194:	7d af       	std	Y+61, r23	; 0x3d
    1196:	8e af       	std	Y+62, r24	; 0x3e
    1198:	9f af       	std	Y+63, r25	; 0x3f
    119a:	66 97       	sbiw	r28, 0x16	; 22
    119c:	64 96       	adiw	r28, 0x14	; 20
    119e:	ae ad       	ldd	r26, Y+62	; 0x3e
    11a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    11a2:	64 97       	sbiw	r28, 0x14	; 20
    11a4:	bc ab       	std	Y+52, r27	; 0x34
    11a6:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    11a8:	10 c0       	rjmp	.+32     	; 0x11ca <LCD_displayCharacter+0x136>
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9e ab       	std	Y+54, r25	; 0x36
    11b0:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    11b2:	8d a9       	ldd	r24, Y+53	; 0x35
    11b4:	9e a9       	ldd	r25, Y+54	; 0x36
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <LCD_displayCharacter+0x122>
    11ba:	9e ab       	std	Y+54, r25	; 0x36
    11bc:	8d ab       	std	Y+53, r24	; 0x35
}
    11be:	00 00       	nop
			__ticks --;
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9c ab       	std	Y+52, r25	; 0x34
    11c8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    11ca:	8b a9       	ldd	r24, Y+51	; 0x33
    11cc:	9c a9       	ldd	r25, Y+52	; 0x34
    11ce:	89 2b       	or	r24, r25
    11d0:	61 f7       	brne	.-40     	; 0x11aa <LCD_displayCharacter+0x116>
		return;
    11d2:	1d c0       	rjmp	.+58     	; 0x120e <LCD_displayCharacter+0x17a>
		__ticks = (uint16_t)__tmp;
    11d4:	6f a5       	ldd	r22, Y+47	; 0x2f
    11d6:	78 a9       	ldd	r23, Y+48	; 0x30
    11d8:	89 a9       	ldd	r24, Y+49	; 0x31
    11da:	9a a9       	ldd	r25, Y+50	; 0x32
    11dc:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    11e0:	6a 96       	adiw	r28, 0x1a	; 26
    11e2:	6c af       	std	Y+60, r22	; 0x3c
    11e4:	7d af       	std	Y+61, r23	; 0x3d
    11e6:	8e af       	std	Y+62, r24	; 0x3e
    11e8:	9f af       	std	Y+63, r25	; 0x3f
    11ea:	6a 97       	sbiw	r28, 0x1a	; 26
    11ec:	68 96       	adiw	r28, 0x18	; 24
    11ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    11f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    11f2:	68 97       	sbiw	r28, 0x18	; 24
    11f4:	fc ab       	std	Y+52, r31	; 0x34
    11f6:	eb ab       	std	Y+51, r30	; 0x33
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	98 af       	std	Y+56, r25	; 0x38
    11fe:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    1200:	8f a9       	ldd	r24, Y+55	; 0x37
    1202:	98 ad       	ldd	r25, Y+56	; 0x38
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_displayCharacter+0x170>
    1208:	98 af       	std	Y+56, r25	; 0x38
    120a:	8f ab       	std	Y+55, r24	; 0x37
}
    120c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    120e:	82 e3       	ldi	r24, 0x32	; 50
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	dc 01       	movw	r26, r24
    1214:	2c 91       	ld	r18, X
    1216:	20 64       	ori	r18, 0x40	; 64
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e8       	ldi	r26, 0x80	; 128
    1222:	bf e3       	ldi	r27, 0x3F	; 63
    1224:	8d 8f       	std	Y+29, r24	; 0x1d
    1226:	9e 8f       	std	Y+30, r25	; 0x1e
    1228:	af 8f       	std	Y+31, r26	; 0x1f
    122a:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	4a ef       	ldi	r20, 0xFA	; 250
    1232:	54 e4       	ldi	r21, 0x44	; 68
    1234:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1236:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1238:	8f 8d       	ldd	r24, Y+31	; 0x1f
    123a:	98 a1       	ldd	r25, Y+32	; 0x20
    123c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1240:	6e 96       	adiw	r28, 0x1e	; 30
    1242:	6c af       	std	Y+60, r22	; 0x3c
    1244:	7d af       	std	Y+61, r23	; 0x3d
    1246:	8e af       	std	Y+62, r24	; 0x3e
    1248:	9f af       	std	Y+63, r25	; 0x3f
    124a:	6e 97       	sbiw	r28, 0x1e	; 30
    124c:	6e 96       	adiw	r28, 0x1e	; 30
    124e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1250:	9d ad       	ldd	r25, Y+61	; 0x3d
    1252:	ae ad       	ldd	r26, Y+62	; 0x3e
    1254:	bf ad       	ldd	r27, Y+63	; 0x3f
    1256:	6e 97       	sbiw	r28, 0x1e	; 30
    1258:	89 a3       	std	Y+33, r24	; 0x21
    125a:	9a a3       	std	Y+34, r25	; 0x22
    125c:	ab a3       	std	Y+35, r26	; 0x23
    125e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	69 a1       	ldd	r22, Y+33	; 0x21
    126a:	7a a1       	ldd	r23, Y+34	; 0x22
    126c:	8b a1       	ldd	r24, Y+35	; 0x23
    126e:	9c a1       	ldd	r25, Y+36	; 0x24
    1270:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1274:	88 23       	and	r24, r24
    1276:	2c f4       	brge	.+10     	; 0x1282 <LCD_displayCharacter+0x1ee>
		__ticks = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9e a3       	std	Y+38, r25	; 0x26
    127e:	8d a3       	std	Y+37, r24	; 0x25
    1280:	65 c0       	rjmp	.+202    	; 0x134c <LCD_displayCharacter+0x2b8>
	else if (__tmp > 65535)
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	3f ef       	ldi	r19, 0xFF	; 255
    1286:	4f e7       	ldi	r20, 0x7F	; 127
    1288:	57 e4       	ldi	r21, 0x47	; 71
    128a:	69 a1       	ldd	r22, Y+33	; 0x21
    128c:	7a a1       	ldd	r23, Y+34	; 0x22
    128e:	8b a1       	ldd	r24, Y+35	; 0x23
    1290:	9c a1       	ldd	r25, Y+36	; 0x24
    1292:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1296:	18 16       	cp	r1, r24
    1298:	0c f0       	brlt	.+2      	; 0x129c <LCD_displayCharacter+0x208>
    129a:	46 c0       	rjmp	.+140    	; 0x1328 <LCD_displayCharacter+0x294>
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12a6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12aa:	98 a1       	ldd	r25, Y+32	; 0x20
    12ac:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    12b0:	a2 96       	adiw	r28, 0x22	; 34
    12b2:	6c af       	std	Y+60, r22	; 0x3c
    12b4:	7d af       	std	Y+61, r23	; 0x3d
    12b6:	8e af       	std	Y+62, r24	; 0x3e
    12b8:	9f af       	std	Y+63, r25	; 0x3f
    12ba:	a2 97       	sbiw	r28, 0x22	; 34
    12bc:	a2 96       	adiw	r28, 0x22	; 34
    12be:	8c ad       	ldd	r24, Y+60	; 0x3c
    12c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    12c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    12c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    12c6:	a2 97       	sbiw	r28, 0x22	; 34
    12c8:	26 96       	adiw	r28, 0x06	; 6
    12ca:	8c af       	std	Y+60, r24	; 0x3c
    12cc:	9d af       	std	Y+61, r25	; 0x3d
    12ce:	ae af       	std	Y+62, r26	; 0x3e
    12d0:	bf af       	std	Y+63, r27	; 0x3f
    12d2:	26 97       	sbiw	r28, 0x06	; 6
    12d4:	26 96       	adiw	r28, 0x06	; 6
    12d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    12d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    12da:	8e ad       	ldd	r24, Y+62	; 0x3e
    12dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    12de:	26 97       	sbiw	r28, 0x06	; 6
    12e0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    12e4:	a6 96       	adiw	r28, 0x26	; 38
    12e6:	6c af       	std	Y+60, r22	; 0x3c
    12e8:	7d af       	std	Y+61, r23	; 0x3d
    12ea:	8e af       	std	Y+62, r24	; 0x3e
    12ec:	9f af       	std	Y+63, r25	; 0x3f
    12ee:	a6 97       	sbiw	r28, 0x26	; 38
    12f0:	a4 96       	adiw	r28, 0x24	; 36
    12f2:	ae ad       	ldd	r26, Y+62	; 0x3e
    12f4:	bf ad       	ldd	r27, Y+63	; 0x3f
    12f6:	a4 97       	sbiw	r28, 0x24	; 36
    12f8:	be a3       	std	Y+38, r27	; 0x26
    12fa:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <LCD_displayCharacter+0x28a>
    12fe:	88 ec       	ldi	r24, 0xC8	; 200
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	98 a7       	std	Y+40, r25	; 0x28
    1304:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    1306:	8f a1       	ldd	r24, Y+39	; 0x27
    1308:	98 a5       	ldd	r25, Y+40	; 0x28
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_displayCharacter+0x276>
    130e:	98 a7       	std	Y+40, r25	; 0x28
    1310:	8f a3       	std	Y+39, r24	; 0x27
}
    1312:	00 00       	nop
			__ticks --;
    1314:	8d a1       	ldd	r24, Y+37	; 0x25
    1316:	9e a1       	ldd	r25, Y+38	; 0x26
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e a3       	std	Y+38, r25	; 0x26
    131c:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    131e:	8d a1       	ldd	r24, Y+37	; 0x25
    1320:	9e a1       	ldd	r25, Y+38	; 0x26
    1322:	89 2b       	or	r24, r25
    1324:	61 f7       	brne	.-40     	; 0x12fe <LCD_displayCharacter+0x26a>
		return;
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <LCD_displayCharacter+0x2ce>
		__ticks = (uint16_t)__tmp;
    1328:	69 a1       	ldd	r22, Y+33	; 0x21
    132a:	7a a1       	ldd	r23, Y+34	; 0x22
    132c:	8b a1       	ldd	r24, Y+35	; 0x23
    132e:	9c a1       	ldd	r25, Y+36	; 0x24
    1330:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1334:	aa 96       	adiw	r28, 0x2a	; 42
    1336:	6c af       	std	Y+60, r22	; 0x3c
    1338:	7d af       	std	Y+61, r23	; 0x3d
    133a:	8e af       	std	Y+62, r24	; 0x3e
    133c:	9f af       	std	Y+63, r25	; 0x3f
    133e:	aa 97       	sbiw	r28, 0x2a	; 42
    1340:	a8 96       	adiw	r28, 0x28	; 40
    1342:	ee ad       	ldd	r30, Y+62	; 0x3e
    1344:	ff ad       	ldd	r31, Y+63	; 0x3f
    1346:	a8 97       	sbiw	r28, 0x28	; 40
    1348:	fe a3       	std	Y+38, r31	; 0x26
    134a:	ed a3       	std	Y+37, r30	; 0x25
    134c:	8d a1       	ldd	r24, Y+37	; 0x25
    134e:	9e a1       	ldd	r25, Y+38	; 0x26
    1350:	9a a7       	std	Y+42, r25	; 0x2a
    1352:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    1354:	89 a5       	ldd	r24, Y+41	; 0x29
    1356:	9a a5       	ldd	r25, Y+42	; 0x2a
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <LCD_displayCharacter+0x2c4>
    135c:	9a a7       	std	Y+42, r25	; 0x2a
    135e:	89 a7       	std	Y+41, r24	; 0x29
}
    1360:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if(DATA_MODE ==8)
	DATA_OUT = data; /* send DATA to LCD to make order */
    1362:	85 e3       	ldi	r24, 0x35	; 53
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	29 ad       	ldd	r18, Y+57	; 0x39
    1368:	dc 01       	movw	r26, r24
    136a:	2c 93       	st	X, r18
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e8       	ldi	r26, 0x80	; 128
    1372:	bf e3       	ldi	r27, 0x3F	; 63
    1374:	8f 87       	std	Y+15, r24	; 0x0f
    1376:	98 8b       	std	Y+16, r25	; 0x10
    1378:	a9 8b       	std	Y+17, r26	; 0x11
    137a:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	4a ef       	ldi	r20, 0xFA	; 250
    1382:	54 e4       	ldi	r21, 0x44	; 68
    1384:	6f 85       	ldd	r22, Y+15	; 0x0f
    1386:	78 89       	ldd	r23, Y+16	; 0x10
    1388:	89 89       	ldd	r24, Y+17	; 0x11
    138a:	9a 89       	ldd	r25, Y+18	; 0x12
    138c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1390:	ae 96       	adiw	r28, 0x2e	; 46
    1392:	6c af       	std	Y+60, r22	; 0x3c
    1394:	7d af       	std	Y+61, r23	; 0x3d
    1396:	8e af       	std	Y+62, r24	; 0x3e
    1398:	9f af       	std	Y+63, r25	; 0x3f
    139a:	ae 97       	sbiw	r28, 0x2e	; 46
    139c:	ae 96       	adiw	r28, 0x2e	; 46
    139e:	8c ad       	ldd	r24, Y+60	; 0x3c
    13a0:	9d ad       	ldd	r25, Y+61	; 0x3d
    13a2:	ae ad       	ldd	r26, Y+62	; 0x3e
    13a4:	bf ad       	ldd	r27, Y+63	; 0x3f
    13a6:	ae 97       	sbiw	r28, 0x2e	; 46
    13a8:	8b 8b       	std	Y+19, r24	; 0x13
    13aa:	9c 8b       	std	Y+20, r25	; 0x14
    13ac:	ad 8b       	std	Y+21, r26	; 0x15
    13ae:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e8       	ldi	r20, 0x80	; 128
    13b6:	5f e3       	ldi	r21, 0x3F	; 63
    13b8:	6b 89       	ldd	r22, Y+19	; 0x13
    13ba:	7c 89       	ldd	r23, Y+20	; 0x14
    13bc:	8d 89       	ldd	r24, Y+21	; 0x15
    13be:	9e 89       	ldd	r25, Y+22	; 0x16
    13c0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x33e>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	98 8f       	std	Y+24, r25	; 0x18
    13ce:	8f 8b       	std	Y+23, r24	; 0x17
    13d0:	65 c0       	rjmp	.+202    	; 0x149c <LCD_displayCharacter+0x408>
	else if (__tmp > 65535)
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	3f ef       	ldi	r19, 0xFF	; 255
    13d6:	4f e7       	ldi	r20, 0x7F	; 127
    13d8:	57 e4       	ldi	r21, 0x47	; 71
    13da:	6b 89       	ldd	r22, Y+19	; 0x13
    13dc:	7c 89       	ldd	r23, Y+20	; 0x14
    13de:	8d 89       	ldd	r24, Y+21	; 0x15
    13e0:	9e 89       	ldd	r25, Y+22	; 0x16
    13e2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	0c f0       	brlt	.+2      	; 0x13ec <LCD_displayCharacter+0x358>
    13ea:	46 c0       	rjmp	.+140    	; 0x1478 <LCD_displayCharacter+0x3e4>
		__ticks = (uint16_t) (__ms * 10.0);
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    13f6:	78 89       	ldd	r23, Y+16	; 0x10
    13f8:	89 89       	ldd	r24, Y+17	; 0x11
    13fa:	9a 89       	ldd	r25, Y+18	; 0x12
    13fc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1400:	e2 96       	adiw	r28, 0x32	; 50
    1402:	6c af       	std	Y+60, r22	; 0x3c
    1404:	7d af       	std	Y+61, r23	; 0x3d
    1406:	8e af       	std	Y+62, r24	; 0x3e
    1408:	9f af       	std	Y+63, r25	; 0x3f
    140a:	e2 97       	sbiw	r28, 0x32	; 50
    140c:	e2 96       	adiw	r28, 0x32	; 50
    140e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1410:	9d ad       	ldd	r25, Y+61	; 0x3d
    1412:	ae ad       	ldd	r26, Y+62	; 0x3e
    1414:	bf ad       	ldd	r27, Y+63	; 0x3f
    1416:	e2 97       	sbiw	r28, 0x32	; 50
    1418:	22 96       	adiw	r28, 0x02	; 2
    141a:	8c af       	std	Y+60, r24	; 0x3c
    141c:	9d af       	std	Y+61, r25	; 0x3d
    141e:	ae af       	std	Y+62, r26	; 0x3e
    1420:	bf af       	std	Y+63, r27	; 0x3f
    1422:	22 97       	sbiw	r28, 0x02	; 2
    1424:	22 96       	adiw	r28, 0x02	; 2
    1426:	6c ad       	ldd	r22, Y+60	; 0x3c
    1428:	7d ad       	ldd	r23, Y+61	; 0x3d
    142a:	8e ad       	ldd	r24, Y+62	; 0x3e
    142c:	9f ad       	ldd	r25, Y+63	; 0x3f
    142e:	22 97       	sbiw	r28, 0x02	; 2
    1430:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1434:	e6 96       	adiw	r28, 0x36	; 54
    1436:	6c af       	std	Y+60, r22	; 0x3c
    1438:	7d af       	std	Y+61, r23	; 0x3d
    143a:	8e af       	std	Y+62, r24	; 0x3e
    143c:	9f af       	std	Y+63, r25	; 0x3f
    143e:	e6 97       	sbiw	r28, 0x36	; 54
    1440:	e4 96       	adiw	r28, 0x34	; 52
    1442:	ae ad       	ldd	r26, Y+62	; 0x3e
    1444:	bf ad       	ldd	r27, Y+63	; 0x3f
    1446:	e4 97       	sbiw	r28, 0x34	; 52
    1448:	b8 8f       	std	Y+24, r27	; 0x18
    144a:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    144c:	10 c0       	rjmp	.+32     	; 0x146e <LCD_displayCharacter+0x3da>
    144e:	88 ec       	ldi	r24, 0xC8	; 200
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9a 8f       	std	Y+26, r25	; 0x1a
    1454:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    1456:	89 8d       	ldd	r24, Y+25	; 0x19
    1458:	9a 8d       	ldd	r25, Y+26	; 0x1a
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_displayCharacter+0x3c6>
    145e:	9a 8f       	std	Y+26, r25	; 0x1a
    1460:	89 8f       	std	Y+25, r24	; 0x19
}
    1462:	00 00       	nop
			__ticks --;
    1464:	8f 89       	ldd	r24, Y+23	; 0x17
    1466:	98 8d       	ldd	r25, Y+24	; 0x18
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	98 8f       	std	Y+24, r25	; 0x18
    146c:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    146e:	8f 89       	ldd	r24, Y+23	; 0x17
    1470:	98 8d       	ldd	r25, Y+24	; 0x18
    1472:	89 2b       	or	r24, r25
    1474:	61 f7       	brne	.-40     	; 0x144e <LCD_displayCharacter+0x3ba>
		return;
    1476:	1d c0       	rjmp	.+58     	; 0x14b2 <LCD_displayCharacter+0x41e>
		__ticks = (uint16_t)__tmp;
    1478:	6b 89       	ldd	r22, Y+19	; 0x13
    147a:	7c 89       	ldd	r23, Y+20	; 0x14
    147c:	8d 89       	ldd	r24, Y+21	; 0x15
    147e:	9e 89       	ldd	r25, Y+22	; 0x16
    1480:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1484:	ea 96       	adiw	r28, 0x3a	; 58
    1486:	6c af       	std	Y+60, r22	; 0x3c
    1488:	7d af       	std	Y+61, r23	; 0x3d
    148a:	8e af       	std	Y+62, r24	; 0x3e
    148c:	9f af       	std	Y+63, r25	; 0x3f
    148e:	ea 97       	sbiw	r28, 0x3a	; 58
    1490:	e8 96       	adiw	r28, 0x38	; 56
    1492:	ee ad       	ldd	r30, Y+62	; 0x3e
    1494:	ff ad       	ldd	r31, Y+63	; 0x3f
    1496:	e8 97       	sbiw	r28, 0x38	; 56
    1498:	f8 8f       	std	Y+24, r31	; 0x18
    149a:	ef 8b       	std	Y+23, r30	; 0x17
    149c:	8f 89       	ldd	r24, Y+23	; 0x17
    149e:	98 8d       	ldd	r25, Y+24	; 0x18
    14a0:	9c 8f       	std	Y+28, r25	; 0x1c
    14a2:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_displayCharacter+0x414>
    14ac:	9c 8f       	std	Y+28, r25	; 0x1c
    14ae:	8b 8f       	std	Y+27, r24	; 0x1b
}
    14b0:	00 00       	nop
#ifdef LOWER_MODE_BITS
	DATA_OUT = ((data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    14b2:	82 e3       	ldi	r24, 0x32	; 50
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	dc 01       	movw	r26, r24
    14b8:	2c 91       	ld	r18, X
    14ba:	2f 7b       	andi	r18, 0xBF	; 191
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e8       	ldi	r26, 0x80	; 128
    14c6:	bf e3       	ldi	r27, 0x3F	; 63
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	ab 83       	std	Y+3, r26	; 0x03
    14ce:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	69 81       	ldd	r22, Y+1	; 0x01
    14da:	7a 81       	ldd	r23, Y+2	; 0x02
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    14e4:	ee 96       	adiw	r28, 0x3e	; 62
    14e6:	6c af       	std	Y+60, r22	; 0x3c
    14e8:	7d af       	std	Y+61, r23	; 0x3d
    14ea:	8e af       	std	Y+62, r24	; 0x3e
    14ec:	9f af       	std	Y+63, r25	; 0x3f
    14ee:	ee 97       	sbiw	r28, 0x3e	; 62
    14f0:	ee 96       	adiw	r28, 0x3e	; 62
    14f2:	8c ad       	ldd	r24, Y+60	; 0x3c
    14f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    14f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    14f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    14fa:	ee 97       	sbiw	r28, 0x3e	; 62
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	af 83       	std	Y+7, r26	; 0x07
    1502:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	6d 81       	ldd	r22, Y+5	; 0x05
    150e:	7e 81       	ldd	r23, Y+6	; 0x06
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <LCD_displayCharacter+0x492>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9a 87       	std	Y+10, r25	; 0x0a
    1522:	89 87       	std	Y+9, r24	; 0x09
    1524:	6d c0       	rjmp	.+218    	; 0x1600 <LCD_displayCharacter+0x56c>
	else if (__tmp > 65535)
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	57 e4       	ldi	r21, 0x47	; 71
    152e:	6d 81       	ldd	r22, Y+5	; 0x05
    1530:	7e 81       	ldd	r23, Y+6	; 0x06
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	98 85       	ldd	r25, Y+8	; 0x08
    1536:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	0c f0       	brlt	.+2      	; 0x1540 <LCD_displayCharacter+0x4ac>
    153e:	4a c0       	rjmp	.+148    	; 0x15d4 <LCD_displayCharacter+0x540>
		__ticks = (uint16_t) (__ms * 10.0);
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	69 81       	ldd	r22, Y+1	; 0x01
    154a:	7a 81       	ldd	r23, Y+2	; 0x02
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1554:	c2 58       	subi	r28, 0x82	; 130
    1556:	df 4f       	sbci	r29, 0xFF	; 255
    1558:	68 83       	st	Y, r22
    155a:	79 83       	std	Y+1, r23	; 0x01
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	9b 83       	std	Y+3, r25	; 0x03
    1560:	ce 57       	subi	r28, 0x7E	; 126
    1562:	d0 40       	sbci	r29, 0x00	; 0
    1564:	c2 58       	subi	r28, 0x82	; 130
    1566:	df 4f       	sbci	r29, 0xFF	; 255
    1568:	88 81       	ld	r24, Y
    156a:	99 81       	ldd	r25, Y+1	; 0x01
    156c:	aa 81       	ldd	r26, Y+2	; 0x02
    156e:	bb 81       	ldd	r27, Y+3	; 0x03
    1570:	ce 57       	subi	r28, 0x7E	; 126
    1572:	d0 40       	sbci	r29, 0x00	; 0
    1574:	8a af       	std	Y+58, r24	; 0x3a
    1576:	9b af       	std	Y+59, r25	; 0x3b
    1578:	ac af       	std	Y+60, r26	; 0x3c
    157a:	bd af       	std	Y+61, r27	; 0x3d
    157c:	6a ad       	ldd	r22, Y+58	; 0x3a
    157e:	7b ad       	ldd	r23, Y+59	; 0x3b
    1580:	8c ad       	ldd	r24, Y+60	; 0x3c
    1582:	9d ad       	ldd	r25, Y+61	; 0x3d
    1584:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1588:	ce 57       	subi	r28, 0x7E	; 126
    158a:	df 4f       	sbci	r29, 0xFF	; 255
    158c:	68 83       	st	Y, r22
    158e:	79 83       	std	Y+1, r23	; 0x01
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	9b 83       	std	Y+3, r25	; 0x03
    1594:	c2 58       	subi	r28, 0x82	; 130
    1596:	d0 40       	sbci	r29, 0x00	; 0
    1598:	ce 57       	subi	r28, 0x7E	; 126
    159a:	df 4f       	sbci	r29, 0xFF	; 255
    159c:	a8 81       	ld	r26, Y
    159e:	b9 81       	ldd	r27, Y+1	; 0x01
    15a0:	c2 58       	subi	r28, 0x82	; 130
    15a2:	d0 40       	sbci	r29, 0x00	; 0
    15a4:	ba 87       	std	Y+10, r27	; 0x0a
    15a6:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    15a8:	10 c0       	rjmp	.+32     	; 0x15ca <LCD_displayCharacter+0x536>
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9c 87       	std	Y+12, r25	; 0x0c
    15b0:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    15b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_displayCharacter+0x522>
    15ba:	9c 87       	std	Y+12, r25	; 0x0c
    15bc:	8b 87       	std	Y+11, r24	; 0x0b
}
    15be:	00 00       	nop
			__ticks --;
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9a 87       	std	Y+10, r25	; 0x0a
    15c8:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	89 2b       	or	r24, r25
    15d0:	61 f7       	brne	.-40     	; 0x15aa <LCD_displayCharacter+0x516>
		return;
    15d2:	21 c0       	rjmp	.+66     	; 0x1616 <LCD_displayCharacter+0x582>
		__ticks = (uint16_t)__tmp;
    15d4:	6d 81       	ldd	r22, Y+5	; 0x05
    15d6:	7e 81       	ldd	r23, Y+6	; 0x06
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    15e0:	ca 57       	subi	r28, 0x7A	; 122
    15e2:	df 4f       	sbci	r29, 0xFF	; 255
    15e4:	68 83       	st	Y, r22
    15e6:	79 83       	std	Y+1, r23	; 0x01
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	9b 83       	std	Y+3, r25	; 0x03
    15ec:	c6 58       	subi	r28, 0x86	; 134
    15ee:	d0 40       	sbci	r29, 0x00	; 0
    15f0:	ca 57       	subi	r28, 0x7A	; 122
    15f2:	df 4f       	sbci	r29, 0xFF	; 255
    15f4:	e8 81       	ld	r30, Y
    15f6:	f9 81       	ldd	r31, Y+1	; 0x01
    15f8:	c6 58       	subi	r28, 0x86	; 134
    15fa:	d0 40       	sbci	r29, 0x00	; 0
    15fc:	fa 87       	std	Y+10, r31	; 0x0a
    15fe:	e9 87       	std	Y+9, r30	; 0x09
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	9e 87       	std	Y+14, r25	; 0x0e
    1606:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_displayCharacter+0x578>
    1610:	9e 87       	std	Y+14, r25	; 0x0e
    1612:	8d 87       	std	Y+13, r24	; 0x0d
}
    1614:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    1616:	00 00       	nop
}
    1618:	c7 57       	subi	r28, 0x77	; 119
    161a:	df 4f       	sbci	r29, 0xFF	; 255
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const char *Str) {
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 d0       	rcall	.+0      	; 0x1632 <LCD_displayString+0x6>
    1632:	0f 92       	push	r0
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9b 83       	std	Y+3, r25	; 0x03
    163a:	8a 83       	std	Y+2, r24	; 0x02
		LCD_displayCharacter(*Str);
		Str++;
	}
	************************************************************/

	 uint8 i = 0;
    163c:	19 82       	std	Y+1, r1	; 0x01
	 while(Str[i] != '\0')
    163e:	0e c0       	rjmp	.+28     	; 0x165c <LCD_displayString+0x30>
	 {
	 LCD_displayCharacter(Str[i]);
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	2a 81       	ldd	r18, Y+2	; 0x02
    1648:	3b 81       	ldd	r19, Y+3	; 0x03
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	0e 94 4a 08 	call	0x1094	; 0x1094 <LCD_displayCharacter>
	 i++;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	89 83       	std	Y+1, r24	; 0x01
	 while(Str[i] != '\0')
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	2a 81       	ldd	r18, Y+2	; 0x02
    1664:	3b 81       	ldd	r19, Y+3	; 0x03
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	fc 01       	movw	r30, r24
    166c:	80 81       	ld	r24, Z
    166e:	88 23       	and	r24, r24
    1670:	39 f7       	brne	.-50     	; 0x1640 <LCD_displayString+0x14>
	 }
	return;
    1672:	00 00       	nop

}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	a2 97       	sbiw	r28, 0x22	; 34
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = SET; /* select RS pin output pin */
    1694:	81 e3       	ldi	r24, 0x31	; 49
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	dc 01       	movw	r26, r24
    169a:	2c 91       	ld	r18, X
    169c:	20 61       	ori	r18, 0x10	; 16
    169e:	fc 01       	movw	r30, r24
    16a0:	20 83       	st	Z, r18
	RW_DIR = SET; /* select RW pin output pin */
    16a2:	81 e3       	ldi	r24, 0x31	; 49
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	dc 01       	movw	r26, r24
    16a8:	2c 91       	ld	r18, X
    16aa:	20 62       	ori	r18, 0x20	; 32
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
	E_DIR = SET; /* select Enable pin output pin */
    16b0:	81 e3       	ldi	r24, 0x31	; 49
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	dc 01       	movw	r26, r24
    16b6:	2c 91       	ld	r18, X
    16b8:	20 64       	ori	r18, 0x40	; 64
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 83       	st	Z, r18
#if (DATA_MODE == 8)
	DATA_DIR = 0xFF; /* select LCD DATA PORT Output pin */
    16be:	84 e3       	ldi	r24, 0x34	; 52
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	dc 01       	movw	r26, r24
    16c6:	2c 93       	st	X, r18
	/* LCD Configuration Mode of number of DATA line = 8 lines */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    16c8:	88 e3       	ldi	r24, 0x38	; 56
    16ca:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F; /* select first 4 bits as a output pins */
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    16ce:	8c e0       	ldi	r24, 0x0C	; 12
    16d0:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e4       	ldi	r27, 0x40	; 64
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	ab 83       	std	Y+3, r26	; 0x03
    16ee:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a ef       	ldi	r20, 0xFA	; 250
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	69 81       	ldd	r22, Y+1	; 0x01
    16fa:	7a 81       	ldd	r23, Y+2	; 0x02
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1704:	6b 8b       	std	Y+19, r22	; 0x13
    1706:	7c 8b       	std	Y+20, r23	; 0x14
    1708:	8d 8b       	std	Y+21, r24	; 0x15
    170a:	9e 8b       	std	Y+22, r25	; 0x16
    170c:	8b 89       	ldd	r24, Y+19	; 0x13
    170e:	9c 89       	ldd	r25, Y+20	; 0x14
    1710:	ad 89       	ldd	r26, Y+21	; 0x15
    1712:	be 89       	ldd	r27, Y+22	; 0x16
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	af 83       	std	Y+7, r26	; 0x07
    171a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	6d 81       	ldd	r22, Y+5	; 0x05
    1726:	7e 81       	ldd	r23, Y+6	; 0x06
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	98 85       	ldd	r25, Y+8	; 0x08
    172c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1730:	88 23       	and	r24, r24
    1732:	2c f4       	brge	.+10     	; 0x173e <LCD_init+0xbe>
		__ticks = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9a 87       	std	Y+10, r25	; 0x0a
    173a:	89 87       	std	Y+9, r24	; 0x09
    173c:	54 c0       	rjmp	.+168    	; 0x17e6 <LCD_init+0x166>
	else if (__tmp > 65535)
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	6d 81       	ldd	r22, Y+5	; 0x05
    1748:	7e 81       	ldd	r23, Y+6	; 0x06
    174a:	8f 81       	ldd	r24, Y+7	; 0x07
    174c:	98 85       	ldd	r25, Y+8	; 0x08
    174e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1752:	18 16       	cp	r1, r24
    1754:	d4 f5       	brge	.+116    	; 0x17ca <LCD_init+0x14a>
		__ticks = (uint16_t) (__ms * 10.0);
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	69 81       	ldd	r22, Y+1	; 0x01
    1760:	7a 81       	ldd	r23, Y+2	; 0x02
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    176a:	6f 8b       	std	Y+23, r22	; 0x17
    176c:	78 8f       	std	Y+24, r23	; 0x18
    176e:	89 8f       	std	Y+25, r24	; 0x19
    1770:	9a 8f       	std	Y+26, r25	; 0x1a
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	98 8d       	ldd	r25, Y+24	; 0x18
    1776:	a9 8d       	ldd	r26, Y+25	; 0x19
    1778:	ba 8d       	ldd	r27, Y+26	; 0x1a
    177a:	8f 87       	std	Y+15, r24	; 0x0f
    177c:	98 8b       	std	Y+16, r25	; 0x10
    177e:	a9 8b       	std	Y+17, r26	; 0x11
    1780:	ba 8b       	std	Y+18, r27	; 0x12
    1782:	6f 85       	ldd	r22, Y+15	; 0x0f
    1784:	78 89       	ldd	r23, Y+16	; 0x10
    1786:	89 89       	ldd	r24, Y+17	; 0x11
    1788:	9a 89       	ldd	r25, Y+18	; 0x12
    178a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    178e:	6b 8f       	std	Y+27, r22	; 0x1b
    1790:	7c 8f       	std	Y+28, r23	; 0x1c
    1792:	8d 8f       	std	Y+29, r24	; 0x1d
    1794:	9e 8f       	std	Y+30, r25	; 0x1e
    1796:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1798:	bc 8d       	ldd	r27, Y+28	; 0x1c
    179a:	ba 87       	std	Y+10, r27	; 0x0a
    179c:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    179e:	10 c0       	rjmp	.+32     	; 0x17c0 <LCD_init+0x140>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 87       	std	Y+12, r25	; 0x0c
    17a6:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    17a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_init+0x12c>
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	8b 87       	std	Y+11, r24	; 0x0b
}
    17b4:	00 00       	nop
			__ticks --;
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9a 87       	std	Y+10, r25	; 0x0a
    17be:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	89 2b       	or	r24, r25
    17c6:	61 f7       	brne	.-40     	; 0x17a0 <LCD_init+0x120>
		return;
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <LCD_init+0x17c>
		__ticks = (uint16_t)__tmp;
    17ca:	6d 81       	ldd	r22, Y+5	; 0x05
    17cc:	7e 81       	ldd	r23, Y+6	; 0x06
    17ce:	8f 81       	ldd	r24, Y+7	; 0x07
    17d0:	98 85       	ldd	r25, Y+8	; 0x08
    17d2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    17d6:	6f 8f       	std	Y+31, r22	; 0x1f
    17d8:	78 a3       	std	Y+32, r23	; 0x20
    17da:	89 a3       	std	Y+33, r24	; 0x21
    17dc:	9a a3       	std	Y+34, r25	; 0x22
    17de:	ef 8d       	ldd	r30, Y+31	; 0x1f
    17e0:	f8 a1       	ldd	r31, Y+32	; 0x20
    17e2:	fa 87       	std	Y+10, r31	; 0x0a
    17e4:	e9 87       	std	Y+9, r30	; 0x09
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	9e 87       	std	Y+14, r25	; 0x0e
    17ec:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <LCD_init+0x172>
    17f6:	9e 87       	std	Y+14, r25	; 0x0e
    17f8:	8d 87       	std	Y+13, r24	; 0x0d
}
    17fa:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    17fc:	80 e8       	ldi	r24, 0x80	; 128
    17fe:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
	return;
    1802:	00 00       	nop
}
    1804:	a2 96       	adiw	r28, 0x22	; 34
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
	return;
    182a:	00 00       	nop
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	00 d0       	rcall	.+0      	; 0x1838 <LCD_displayStringRowColumn+0x6>
    1838:	00 d0       	rcall	.+0      	; 0x183a <LCD_displayStringRowColumn+0x8>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	6a 83       	std	Y+2, r22	; 0x02
    1842:	5c 83       	std	Y+4, r21	; 0x04
    1844:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    1846:	6a 81       	ldd	r22, Y+2	; 0x02
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
	return;
    1856:	00 00       	nop
}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	00 d0       	rcall	.+0      	; 0x186c <LCD_goToRowColumn+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	d1 f0       	breq	.+52     	; 0x18b6 <LCD_goToRowColumn+0x50>
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	91 05       	cpc	r25, r1
    1886:	dc f4       	brge	.+54     	; 0x18be <LCD_goToRowColumn+0x58>
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <LCD_goToRowColumn+0x48>
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	ac f4       	brge	.+42     	; 0x18be <LCD_goToRowColumn+0x58>
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	19 f0       	breq	.+6      	; 0x189e <LCD_goToRowColumn+0x38>
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	29 f0       	breq	.+10     	; 0x18a6 <LCD_goToRowColumn+0x40>
    189c:	10 c0       	rjmp	.+32     	; 0x18be <LCD_goToRowColumn+0x58>
	case 0:
		address = 0x80 | col; /* first address in first line in LCD = 0x00 */
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	80 68       	ori	r24, 0x80	; 128
    18a2:	89 83       	std	Y+1, r24	; 0x01
		break;
    18a4:	0c c0       	rjmp	.+24     	; 0x18be <LCD_goToRowColumn+0x58>
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	80 6c       	ori	r24, 0xC0	; 192
    18aa:	89 83       	std	Y+1, r24	; 0x01
		break;
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <LCD_goToRowColumn+0x58>
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	89 83       	std	Y+1, r24	; 0x01
		break;
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <LCD_goToRowColumn+0x58>
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	80 65       	ori	r24, 0x50	; 80
    18ba:	89 83       	std	Y+1, r24	; 0x01
		break;
    18bc:	00 00       	nop
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	80 68       	ori	r24, 0x80	; 128
    18c2:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
}
    18c6:	00 00       	nop
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	62 97       	sbiw	r28, 0x12	; 18
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	9a 8b       	std	Y+18, r25	; 0x12
    18ea:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    18ec:	89 89       	ldd	r24, Y+17	; 0x11
    18ee:	9a 89       	ldd	r25, Y+18	; 0x12
    18f0:	4a e0       	ldi	r20, 0x0A	; 10
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	9e 01       	movw	r18, r28
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	b9 01       	movw	r22, r18
    18fc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <itoa>
	LCD_displayString(buff);
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_displayString>
}
    1908:	00 00       	nop
    190a:	62 96       	adiw	r28, 0x12	; 18
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <LCD_creatCustomChar>:

/*
 * Function that Create Custom Character in CGRAM
 */
void LCD_creatCustomChar(uint8 loc, uint8 *msg) {
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	00 d0       	rcall	.+0      	; 0x1922 <LCD_creatCustomChar+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <LCD_creatCustomChar+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8a 83       	std	Y+2, r24	; 0x02
    192a:	7c 83       	std	Y+4, r23	; 0x04
    192c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if (loc < 8) {
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	d0 f4       	brcc	.+52     	; 0x1968 <LCD_creatCustomChar+0x4c>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 0f       	add	r24, r24
    1938:	88 0f       	add	r24, r24
    193a:	88 0f       	add	r24, r24
    193c:	80 64       	ori	r24, 0x40	; 64
    193e:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    1942:	19 82       	std	Y+1, r1	; 0x01
    1944:	0e c0       	rjmp	.+28     	; 0x1962 <LCD_creatCustomChar+0x46>
			LCD_displayCustomChar(msg[i]);
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_displayCustomChar>
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 30       	cpi	r24, 0x08	; 8
    1966:	78 f3       	brcs	.-34     	; 0x1946 <LCD_creatCustomChar+0x2a>
		}
	}
}
    1968:	00 00       	nop
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <LCD_displayCustomChar>:

/*
 * Function that Display Custom Character in CGRAM
 */
void LCD_displayCustomChar(uint8 char_data) /* LCD data write function */
{
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	cf 56       	subi	r28, 0x6F	; 111
    1982:	d1 09       	sbc	r29, r1
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	8f a7       	std	Y+47, r24	; 0x2f

#if(DATA_MODE ==8)
	DATA_OUT = char_data; /* send DATA to LCD to make order */
    1990:	85 e3       	ldi	r24, 0x35	; 53
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	2f a5       	ldd	r18, Y+47	; 0x2f
    1996:	dc 01       	movw	r26, r24
    1998:	2c 93       	st	X, r18

#ifdef LOWER_MODE_BITS
	DATA_OUT = ((char_data) & 0x0F) | ( DATA_OUT & 0xF0);
#endif
#endif
	RS = SET;/* RS=1 Data reg. */
    199a:	82 e3       	ldi	r24, 0x32	; 50
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	fc 01       	movw	r30, r24
    19a0:	20 81       	ld	r18, Z
    19a2:	20 61       	ori	r18, 0x10	; 16
    19a4:	dc 01       	movw	r26, r24
    19a6:	2c 93       	st	X, r18
	RW = CLEAR; /* RW=0 write operation */
    19a8:	82 e3       	ldi	r24, 0x32	; 50
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 81       	ld	r18, Z
    19b0:	2f 7d       	andi	r18, 0xDF	; 223
    19b2:	dc 01       	movw	r26, r24
    19b4:	2c 93       	st	X, r18
	E = SET; /* Enable Pulse */
    19b6:	82 e3       	ldi	r24, 0x32	; 50
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 81       	ld	r18, Z
    19be:	20 64       	ori	r18, 0x40	; 64
    19c0:	dc 01       	movw	r26, r24
    19c2:	2c 93       	st	X, r18
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e8       	ldi	r26, 0x80	; 128
    19ca:	bf e3       	ldi	r27, 0x3F	; 63
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	a9 8b       	std	Y+17, r26	; 0x11
    19d2:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    19d4:	2b ea       	ldi	r18, 0xAB	; 171
    19d6:	3a ea       	ldi	r19, 0xAA	; 170
    19d8:	4a e2       	ldi	r20, 0x2A	; 42
    19da:	50 e4       	ldi	r21, 0x40	; 64
    19dc:	6f 85       	ldd	r22, Y+15	; 0x0f
    19de:	78 89       	ldd	r23, Y+16	; 0x10
    19e0:	89 89       	ldd	r24, Y+17	; 0x11
    19e2:	9a 89       	ldd	r25, Y+18	; 0x12
    19e4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    19e8:	68 af       	std	Y+56, r22	; 0x38
    19ea:	79 af       	std	Y+57, r23	; 0x39
    19ec:	8a af       	std	Y+58, r24	; 0x3a
    19ee:	9b af       	std	Y+59, r25	; 0x3b
    19f0:	88 ad       	ldd	r24, Y+56	; 0x38
    19f2:	99 ad       	ldd	r25, Y+57	; 0x39
    19f4:	aa ad       	ldd	r26, Y+58	; 0x3a
    19f6:	bb ad       	ldd	r27, Y+59	; 0x3b
    19f8:	8b 8b       	std	Y+19, r24	; 0x13
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	ad 8b       	std	Y+21, r26	; 0x15
    19fe:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	98 89       	ldd	r25, Y+16	; 0x10
    1a04:	a9 89       	ldd	r26, Y+17	; 0x11
    1a06:	ba 89       	ldd	r27, Y+18	; 0x12
    1a08:	8c af       	std	Y+60, r24	; 0x3c
    1a0a:	9d af       	std	Y+61, r25	; 0x3d
    1a0c:	ae af       	std	Y+62, r26	; 0x3e
    1a0e:	bf af       	std	Y+63, r27	; 0x3f
    1a10:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a12:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a14:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a16:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a18:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a20:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__addsf3>
    1a24:	24 96       	adiw	r28, 0x04	; 4
    1a26:	6c af       	std	Y+60, r22	; 0x3c
    1a28:	7d af       	std	Y+61, r23	; 0x3d
    1a2a:	8e af       	std	Y+62, r24	; 0x3e
    1a2c:	9f af       	std	Y+63, r25	; 0x3f
    1a2e:	24 97       	sbiw	r28, 0x04	; 4
    1a30:	24 96       	adiw	r28, 0x04	; 4
    1a32:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a34:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a36:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a38:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a3a:	24 97       	sbiw	r28, 0x04	; 4
    1a3c:	8f 8b       	std	Y+23, r24	; 0x17
    1a3e:	98 8f       	std	Y+24, r25	; 0x18
    1a40:	a9 8f       	std	Y+25, r26	; 0x19
    1a42:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	6b 89       	ldd	r22, Y+19	; 0x13
    1a4e:	7c 89       	ldd	r23, Y+20	; 0x14
    1a50:	8d 89       	ldd	r24, Y+21	; 0x15
    1a52:	9e 89       	ldd	r25, Y+22	; 0x16
    1a54:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	1c f4       	brge	.+6      	; 0x1a62 <LCD_displayCustomChar+0xea>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a60:	f8 c0       	rjmp	.+496    	; 0x1c52 <LCD_displayCustomChar+0x2da>
	else if (__tmp2 > 65535)
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	6f 89       	ldd	r22, Y+23	; 0x17
    1a6c:	78 8d       	ldd	r23, Y+24	; 0x18
    1a6e:	89 8d       	ldd	r24, Y+25	; 0x19
    1a70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a72:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	0c f0       	brlt	.+2      	; 0x1a7c <LCD_displayCustomChar+0x104>
    1a7a:	b1 c0       	rjmp	.+354    	; 0x1bde <LCD_displayCustomChar+0x266>
	{
		_delay_ms(__us / 1000.0);
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a86:	78 89       	ldd	r23, Y+16	; 0x10
    1a88:	89 89       	ldd	r24, Y+17	; 0x11
    1a8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a8c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__divsf3>
    1a90:	28 96       	adiw	r28, 0x08	; 8
    1a92:	6c af       	std	Y+60, r22	; 0x3c
    1a94:	7d af       	std	Y+61, r23	; 0x3d
    1a96:	8e af       	std	Y+62, r24	; 0x3e
    1a98:	9f af       	std	Y+63, r25	; 0x3f
    1a9a:	28 97       	sbiw	r28, 0x08	; 8
    1a9c:	28 96       	adiw	r28, 0x08	; 8
    1a9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aa0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1aa2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1aa4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1aa6:	28 97       	sbiw	r28, 0x08	; 8
    1aa8:	8c 8f       	std	Y+28, r24	; 0x1c
    1aaa:	9d 8f       	std	Y+29, r25	; 0x1d
    1aac:	ae 8f       	std	Y+30, r26	; 0x1e
    1aae:	bf 8f       	std	Y+31, r27	; 0x1f
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1aba:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1abe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ac0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1ac4:	2c 96       	adiw	r28, 0x0c	; 12
    1ac6:	6c af       	std	Y+60, r22	; 0x3c
    1ac8:	7d af       	std	Y+61, r23	; 0x3d
    1aca:	8e af       	std	Y+62, r24	; 0x3e
    1acc:	9f af       	std	Y+63, r25	; 0x3f
    1ace:	2c 97       	sbiw	r28, 0x0c	; 12
    1ad0:	2c 96       	adiw	r28, 0x0c	; 12
    1ad2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ad4:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ad6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ad8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ada:	2c 97       	sbiw	r28, 0x0c	; 12
    1adc:	88 a3       	std	Y+32, r24	; 0x20
    1ade:	99 a3       	std	Y+33, r25	; 0x21
    1ae0:	aa a3       	std	Y+34, r26	; 0x22
    1ae2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	68 a1       	ldd	r22, Y+32	; 0x20
    1aee:	79 a1       	ldd	r23, Y+33	; 0x21
    1af0:	8a a1       	ldd	r24, Y+34	; 0x22
    1af2:	9b a1       	ldd	r25, Y+35	; 0x23
    1af4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <LCD_displayCustomChar+0x18e>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9d a3       	std	Y+37, r25	; 0x25
    1b02:	8c a3       	std	Y+36, r24	; 0x24
    1b04:	61 c0       	rjmp	.+194    	; 0x1bc8 <LCD_displayCustomChar+0x250>
	else if (__tmp > 65535)
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b10:	79 a1       	ldd	r23, Y+33	; 0x21
    1b12:	8a a1       	ldd	r24, Y+34	; 0x22
    1b14:	9b a1       	ldd	r25, Y+35	; 0x23
    1b16:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <LCD_displayCustomChar+0x1a8>
    1b1e:	42 c0       	rjmp	.+132    	; 0x1ba4 <LCD_displayCustomChar+0x22c>
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b2a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1b2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b30:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1b34:	60 96       	adiw	r28, 0x10	; 16
    1b36:	6c af       	std	Y+60, r22	; 0x3c
    1b38:	7d af       	std	Y+61, r23	; 0x3d
    1b3a:	8e af       	std	Y+62, r24	; 0x3e
    1b3c:	9f af       	std	Y+63, r25	; 0x3f
    1b3e:	60 97       	sbiw	r28, 0x10	; 16
    1b40:	60 96       	adiw	r28, 0x10	; 16
    1b42:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b44:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b46:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b48:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b4a:	60 97       	sbiw	r28, 0x10	; 16
    1b4c:	8c ab       	std	Y+52, r24	; 0x34
    1b4e:	9d ab       	std	Y+53, r25	; 0x35
    1b50:	ae ab       	std	Y+54, r26	; 0x36
    1b52:	bf ab       	std	Y+55, r27	; 0x37
    1b54:	6c a9       	ldd	r22, Y+52	; 0x34
    1b56:	7d a9       	ldd	r23, Y+53	; 0x35
    1b58:	8e a9       	ldd	r24, Y+54	; 0x36
    1b5a:	9f a9       	ldd	r25, Y+55	; 0x37
    1b5c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1b60:	64 96       	adiw	r28, 0x14	; 20
    1b62:	6c af       	std	Y+60, r22	; 0x3c
    1b64:	7d af       	std	Y+61, r23	; 0x3d
    1b66:	8e af       	std	Y+62, r24	; 0x3e
    1b68:	9f af       	std	Y+63, r25	; 0x3f
    1b6a:	64 97       	sbiw	r28, 0x14	; 20
    1b6c:	62 96       	adiw	r28, 0x12	; 18
    1b6e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b70:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b72:	62 97       	sbiw	r28, 0x12	; 18
    1b74:	bd a3       	std	Y+37, r27	; 0x25
    1b76:	ac a3       	std	Y+36, r26	; 0x24
		while(__ticks)
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <LCD_displayCustomChar+0x222>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9f a3       	std	Y+39, r25	; 0x27
    1b80:	8e a3       	std	Y+38, r24	; 0x26
	__asm__ volatile (
    1b82:	8e a1       	ldd	r24, Y+38	; 0x26
    1b84:	9f a1       	ldd	r25, Y+39	; 0x27
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_displayCustomChar+0x20e>
    1b8a:	9f a3       	std	Y+39, r25	; 0x27
    1b8c:	8e a3       	std	Y+38, r24	; 0x26
}
    1b8e:	00 00       	nop
			__ticks --;
    1b90:	8c a1       	ldd	r24, Y+36	; 0x24
    1b92:	9d a1       	ldd	r25, Y+37	; 0x25
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9d a3       	std	Y+37, r25	; 0x25
    1b98:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
    1b9a:	8c a1       	ldd	r24, Y+36	; 0x24
    1b9c:	9d a1       	ldd	r25, Y+37	; 0x25
    1b9e:	89 2b       	or	r24, r25
    1ba0:	61 f7       	brne	.-40     	; 0x1b7a <LCD_displayCustomChar+0x202>
		return;
    1ba2:	57 c0       	rjmp	.+174    	; 0x1c52 <LCD_displayCustomChar+0x2da>
		__ticks = (uint16_t)__tmp;
    1ba4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ba6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ba8:	8a a1       	ldd	r24, Y+34	; 0x22
    1baa:	9b a1       	ldd	r25, Y+35	; 0x23
    1bac:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1bb0:	68 96       	adiw	r28, 0x18	; 24
    1bb2:	6c af       	std	Y+60, r22	; 0x3c
    1bb4:	7d af       	std	Y+61, r23	; 0x3d
    1bb6:	8e af       	std	Y+62, r24	; 0x3e
    1bb8:	9f af       	std	Y+63, r25	; 0x3f
    1bba:	68 97       	sbiw	r28, 0x18	; 24
    1bbc:	66 96       	adiw	r28, 0x16	; 22
    1bbe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bc0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bc2:	66 97       	sbiw	r28, 0x16	; 22
    1bc4:	fd a3       	std	Y+37, r31	; 0x25
    1bc6:	ec a3       	std	Y+36, r30	; 0x24
    1bc8:	8c a1       	ldd	r24, Y+36	; 0x24
    1bca:	9d a1       	ldd	r25, Y+37	; 0x25
    1bcc:	99 a7       	std	Y+41, r25	; 0x29
    1bce:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
    1bd0:	88 a5       	ldd	r24, Y+40	; 0x28
    1bd2:	99 a5       	ldd	r25, Y+41	; 0x29
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_displayCustomChar+0x25c>
    1bd8:	99 a7       	std	Y+41, r25	; 0x29
    1bda:	88 a7       	std	Y+40, r24	; 0x28
}
    1bdc:	3a c0       	rjmp	.+116    	; 0x1c52 <LCD_displayCustomChar+0x2da>
	}
	else if (__tmp > 255)
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	53 e4       	ldi	r21, 0x43	; 67
    1be6:	6b 89       	ldd	r22, Y+19	; 0x13
    1be8:	7c 89       	ldd	r23, Y+20	; 0x14
    1bea:	8d 89       	ldd	r24, Y+21	; 0x15
    1bec:	9e 89       	ldd	r25, Y+22	; 0x16
    1bee:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	f4 f4       	brge	.+60     	; 0x1c32 <LCD_displayCustomChar+0x2ba>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bf6:	6f 89       	ldd	r22, Y+23	; 0x17
    1bf8:	78 8d       	ldd	r23, Y+24	; 0x18
    1bfa:	89 8d       	ldd	r24, Y+25	; 0x19
    1bfc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bfe:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1c02:	6c 96       	adiw	r28, 0x1c	; 28
    1c04:	6c af       	std	Y+60, r22	; 0x3c
    1c06:	7d af       	std	Y+61, r23	; 0x3d
    1c08:	8e af       	std	Y+62, r24	; 0x3e
    1c0a:	9f af       	std	Y+63, r25	; 0x3f
    1c0c:	6c 97       	sbiw	r28, 0x1c	; 28
    1c0e:	6a 96       	adiw	r28, 0x1a	; 26
    1c10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c12:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c14:	6a 97       	sbiw	r28, 0x1a	; 26
    1c16:	9b a7       	std	Y+43, r25	; 0x2b
    1c18:	8a a7       	std	Y+42, r24	; 0x2a
    1c1a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c1c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c1e:	9d a7       	std	Y+45, r25	; 0x2d
    1c20:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
    1c22:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c24:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_displayCustomChar+0x2ae>
    1c2a:	9d a7       	std	Y+45, r25	; 0x2d
    1c2c:	8c a7       	std	Y+44, r24	; 0x2c
}
    1c2e:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
    1c30:	17 c0       	rjmp	.+46     	; 0x1c60 <LCD_displayCustomChar+0x2e8>
	}
	else
		__ticks = (uint8_t)__tmp;
    1c32:	6b 89       	ldd	r22, Y+19	; 0x13
    1c34:	7c 89       	ldd	r23, Y+20	; 0x14
    1c36:	8d 89       	ldd	r24, Y+21	; 0x15
    1c38:	9e 89       	ldd	r25, Y+22	; 0x16
    1c3a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1c3e:	a0 96       	adiw	r28, 0x20	; 32
    1c40:	6c af       	std	Y+60, r22	; 0x3c
    1c42:	7d af       	std	Y+61, r23	; 0x3d
    1c44:	8e af       	std	Y+62, r24	; 0x3e
    1c46:	9f af       	std	Y+63, r25	; 0x3f
    1c48:	a0 97       	sbiw	r28, 0x20	; 32
    1c4a:	6d 96       	adiw	r28, 0x1d	; 29
    1c4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c50:	9b 8f       	std	Y+27, r25	; 0x1b
    1c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c54:	8e a7       	std	Y+46, r24	; 0x2e
	__asm__ volatile (
    1c56:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c58:	8a 95       	dec	r24
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_displayCustomChar+0x2e0>
    1c5c:	8e a7       	std	Y+46, r24	; 0x2e
}
    1c5e:	00 00       	nop
	_delay_us(1);
	E = CLEAR;
    1c60:	82 e3       	ldi	r24, 0x32	; 50
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	dc 01       	movw	r26, r24
    1c66:	2c 91       	ld	r18, X
    1c68:	2f 7b       	andi	r18, 0xBF	; 191
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 83       	st	Z, r18
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e4       	ldi	r27, 0x40	; 64
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	ab 83       	std	Y+3, r26	; 0x03
    1c7c:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	69 81       	ldd	r22, Y+1	; 0x01
    1c88:	7a 81       	ldd	r23, Y+2	; 0x02
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1c92:	a4 96       	adiw	r28, 0x24	; 36
    1c94:	6c af       	std	Y+60, r22	; 0x3c
    1c96:	7d af       	std	Y+61, r23	; 0x3d
    1c98:	8e af       	std	Y+62, r24	; 0x3e
    1c9a:	9f af       	std	Y+63, r25	; 0x3f
    1c9c:	a4 97       	sbiw	r28, 0x24	; 36
    1c9e:	a4 96       	adiw	r28, 0x24	; 36
    1ca0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ca2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ca4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ca6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ca8:	a4 97       	sbiw	r28, 0x24	; 36
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	af 83       	std	Y+7, r26	; 0x07
    1cb0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	6d 81       	ldd	r22, Y+5	; 0x05
    1cbc:	7e 81       	ldd	r23, Y+6	; 0x06
    1cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc0:	98 85       	ldd	r25, Y+8	; 0x08
    1cc2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__cmpsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_displayCustomChar+0x35c>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9a 87       	std	Y+10, r25	; 0x0a
    1cd0:	89 87       	std	Y+9, r24	; 0x09
    1cd2:	61 c0       	rjmp	.+194    	; 0x1d96 <LCD_displayCustomChar+0x41e>
	else if (__tmp > 65535)
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cde:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	98 85       	ldd	r25, Y+8	; 0x08
    1ce4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__gesf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	0c f0       	brlt	.+2      	; 0x1cee <LCD_displayCustomChar+0x376>
    1cec:	42 c0       	rjmp	.+132    	; 0x1d72 <LCD_displayCustomChar+0x3fa>
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	69 81       	ldd	r22, Y+1	; 0x01
    1cf8:	7a 81       	ldd	r23, Y+2	; 0x02
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__mulsf3>
    1d02:	a8 96       	adiw	r28, 0x28	; 40
    1d04:	6c af       	std	Y+60, r22	; 0x3c
    1d06:	7d af       	std	Y+61, r23	; 0x3d
    1d08:	8e af       	std	Y+62, r24	; 0x3e
    1d0a:	9f af       	std	Y+63, r25	; 0x3f
    1d0c:	a8 97       	sbiw	r28, 0x28	; 40
    1d0e:	a8 96       	adiw	r28, 0x28	; 40
    1d10:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d12:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d14:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d16:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d18:	a8 97       	sbiw	r28, 0x28	; 40
    1d1a:	88 ab       	std	Y+48, r24	; 0x30
    1d1c:	99 ab       	std	Y+49, r25	; 0x31
    1d1e:	aa ab       	std	Y+50, r26	; 0x32
    1d20:	bb ab       	std	Y+51, r27	; 0x33
    1d22:	68 a9       	ldd	r22, Y+48	; 0x30
    1d24:	79 a9       	ldd	r23, Y+49	; 0x31
    1d26:	8a a9       	ldd	r24, Y+50	; 0x32
    1d28:	9b a9       	ldd	r25, Y+51	; 0x33
    1d2a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1d2e:	ac 96       	adiw	r28, 0x2c	; 44
    1d30:	6c af       	std	Y+60, r22	; 0x3c
    1d32:	7d af       	std	Y+61, r23	; 0x3d
    1d34:	8e af       	std	Y+62, r24	; 0x3e
    1d36:	9f af       	std	Y+63, r25	; 0x3f
    1d38:	ac 97       	sbiw	r28, 0x2c	; 44
    1d3a:	aa 96       	adiw	r28, 0x2a	; 42
    1d3c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d3e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d40:	aa 97       	sbiw	r28, 0x2a	; 42
    1d42:	ba 87       	std	Y+10, r27	; 0x0a
    1d44:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1d46:	10 c0       	rjmp	.+32     	; 0x1d68 <LCD_displayCustomChar+0x3f0>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 87       	std	Y+12, r25	; 0x0c
    1d4e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_displayCustomChar+0x3dc>
    1d58:	9c 87       	std	Y+12, r25	; 0x0c
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
}
    1d5c:	00 00       	nop
			__ticks --;
    1d5e:	89 85       	ldd	r24, Y+9	; 0x09
    1d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9a 87       	std	Y+10, r25	; 0x0a
    1d66:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	89 2b       	or	r24, r25
    1d6e:	61 f7       	brne	.-40     	; 0x1d48 <LCD_displayCustomChar+0x3d0>
		return;
    1d70:	1d c0       	rjmp	.+58     	; 0x1dac <LCD_displayCustomChar+0x434>
		__ticks = (uint16_t)__tmp;
    1d72:	6d 81       	ldd	r22, Y+5	; 0x05
    1d74:	7e 81       	ldd	r23, Y+6	; 0x06
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	98 85       	ldd	r25, Y+8	; 0x08
    1d7a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fixunssfsi>
    1d7e:	e0 96       	adiw	r28, 0x30	; 48
    1d80:	6c af       	std	Y+60, r22	; 0x3c
    1d82:	7d af       	std	Y+61, r23	; 0x3d
    1d84:	8e af       	std	Y+62, r24	; 0x3e
    1d86:	9f af       	std	Y+63, r25	; 0x3f
    1d88:	e0 97       	sbiw	r28, 0x30	; 48
    1d8a:	ae 96       	adiw	r28, 0x2e	; 46
    1d8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d90:	ae 97       	sbiw	r28, 0x2e	; 46
    1d92:	fa 87       	std	Y+10, r31	; 0x0a
    1d94:	e9 87       	std	Y+9, r30	; 0x09
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	9e 87       	std	Y+14, r25	; 0x0e
    1d9c:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayCustomChar+0x42a>
    1da6:	9e 87       	std	Y+14, r25	; 0x0e
    1da8:	8d 87       	std	Y+13, r24	; 0x0d
}
    1daa:	00 00       	nop
	_delay_ms(2); /* Data write delay */
	return;
    1dac:	00 00       	nop

}
    1dae:	c1 59       	subi	r28, 0x91	; 145
    1db0:	df 4f       	sbci	r29, 0xFF	; 255
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <TIMER_init>:
 * 	1. Set the required clock.
 * 	2. Set the required Mode.
 * 	3. Enable the Interrupt for select Mode Timer1.
 * 	4. Initialize Timer1 Registers
 */
void TIMER_init(TIMER_Config *Str){
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <TIMER_init+0x6>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=0;
    1dd0:	8f e4       	ldi	r24, 0x4F	; 79
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	10 82       	st	Z, r1

	TCCR1B =(TCCR1B & 0xE7) | (Str->mode<<3);
    1dd8:	8e e4       	ldi	r24, 0x4E	; 78
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 81       	ld	r24, Z
    1de0:	28 2f       	mov	r18, r24
    1de2:	27 7e       	andi	r18, 0xE7	; 231
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	28 2b       	or	r18, r24
    1dfe:	8e e4       	ldi	r24, 0x4E	; 78
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18

	TCCR1B =(TCCR1B & 0xF8) | (Str->scale);
    1e06:	8e e4       	ldi	r24, 0x4E	; 78
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	80 81       	ld	r24, Z
    1e0e:	28 2f       	mov	r18, r24
    1e10:	28 7f       	andi	r18, 0xF8	; 248
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	fc 01       	movw	r30, r24
    1e18:	81 81       	ldd	r24, Z+1	; 0x01
    1e1a:	28 2b       	or	r18, r24
    1e1c:	8e e4       	ldi	r24, 0x4E	; 78
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18

	TCNT1=0;
    1e24:	8c e4       	ldi	r24, 0x4C	; 76
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	fc 01       	movw	r30, r24
    1e2a:	11 82       	std	Z+1, r1	; 0x01
    1e2c:	10 82       	st	Z, r1

	if(Str->mode == CTC){
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	fc 01       	movw	r30, r24
    1e34:	80 81       	ld	r24, Z
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	a1 f4       	brne	.+40     	; 0x1e62 <TIMER_init+0xa0>
		OCR1A=(Str->ctc);
    1e3a:	8a e4       	ldi	r24, 0x4A	; 74
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	29 81       	ldd	r18, Y+1	; 0x01
    1e40:	3a 81       	ldd	r19, Y+2	; 0x02
    1e42:	f9 01       	movw	r30, r18
    1e44:	22 81       	ldd	r18, Z+2	; 0x02
    1e46:	33 81       	ldd	r19, Z+3	; 0x03
    1e48:	fc 01       	movw	r30, r24
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
		TIMSK |=(1<<OCIE1A);
    1e4e:	89 e5       	ldi	r24, 0x59	; 89
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	fc 01       	movw	r30, r24
    1e54:	20 81       	ld	r18, Z
    1e56:	89 e5       	ldi	r24, 0x59	; 89
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	20 61       	ori	r18, 0x10	; 16
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	20 83       	st	Z, r18
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <TIMER_init+0xbe>
	}else if(Str->mode == OVF){
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 23       	and	r24, r24
    1e6c:	49 f4       	brne	.+18     	; 0x1e80 <TIMER_init+0xbe>
		TIMSK |=(1<<TOIE1);
    1e6e:	89 e5       	ldi	r24, 0x59	; 89
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	fc 01       	movw	r30, r24
    1e74:	20 81       	ld	r18, Z
    1e76:	89 e5       	ldi	r24, 0x59	; 89
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	24 60       	ori	r18, 0x04	; 4
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	20 83       	st	Z, r18
	}
	SREG |=(1<<7);
    1e80:	8f e5       	ldi	r24, 0x5F	; 95
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 81       	ld	r18, Z
    1e88:	8f e5       	ldi	r24, 0x5F	; 95
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	20 68       	ori	r18, 0x80	; 128
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18

}
    1e92:	00 00       	nop
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <TIMER_Deinit>:

/*
 * Description: Function to Clear Timer1 Register & active Sleep mode For Timer1.
 */
void TIMER_Deinit(void){
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1ea6:	8f e4       	ldi	r24, 0x4F	; 79
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	fc 01       	movw	r30, r24
    1eac:	10 82       	st	Z, r1
	TCCR1B=0;
    1eae:	8e e4       	ldi	r24, 0x4E	; 78
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	10 82       	st	Z, r1
	TCNT1=0;
    1eb6:	8c e4       	ldi	r24, 0x4C	; 76
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	11 82       	std	Z+1, r1	; 0x01
    1ebe:	10 82       	st	Z, r1
	TIMSK=0;
    1ec0:	89 e5       	ldi	r24, 0x59	; 89
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	10 82       	st	Z, r1
	OCR1A=0;
    1ec8:	8a e4       	ldi	r24, 0x4A	; 74
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	fc 01       	movw	r30, r24
    1ece:	11 82       	std	Z+1, r1	; 0x01
    1ed0:	10 82       	st	Z, r1
}
    1ed2:	00 00       	nop
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	08 95       	ret

00001eda <TIMER_SETCTC>:

/*
 * Description: Function to set Compare Value to Timer1 .
 */
void TIMER_SETCTC(uint16 *Ptr_CTC){
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <TIMER_SETCTC+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    1ee8:	8c e4       	ldi	r24, 0x4C	; 76
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	fc 01       	movw	r30, r24
    1eee:	11 82       	std	Z+1, r1	; 0x01
    1ef0:	10 82       	st	Z, r1
	OCR1A=*Ptr_CTC;
    1ef2:	8a e4       	ldi	r24, 0x4A	; 74
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	29 81       	ldd	r18, Y+1	; 0x01
    1ef8:	3a 81       	ldd	r19, Y+2	; 0x02
    1efa:	f9 01       	movw	r30, r18
    1efc:	20 81       	ld	r18, Z
    1efe:	31 81       	ldd	r19, Z+1	; 0x01
    1f00:	fc 01       	movw	r30, r24
    1f02:	31 83       	std	Z+1, r19	; 0x01
    1f04:	20 83       	st	Z, r18
}
    1f06:	00 00       	nop
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	08 95       	ret

00001f12 <TIMER_setCallBack>:

/*
 * Description: Function to set Which Function Called by Timer1  in ISR Vector.
 */
void TIMER_setCallBack(void (*Fun)(void)){
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <TIMER_setCallBack+0x6>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=Fun;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <g_CallBackPtr+0x1>
    1f28:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <g_CallBackPtr>
}
    1f2c:	00 00       	nop
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1f38:	1f 92       	push	r1
    1f3a:	0f 92       	push	r0
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	0f 92       	push	r0
    1f40:	11 24       	eor	r1, r1
    1f42:	2f 93       	push	r18
    1f44:	3f 93       	push	r19
    1f46:	4f 93       	push	r20
    1f48:	5f 93       	push	r21
    1f4a:	6f 93       	push	r22
    1f4c:	7f 93       	push	r23
    1f4e:	8f 93       	push	r24
    1f50:	9f 93       	push	r25
    1f52:	af 93       	push	r26
    1f54:	bf 93       	push	r27
    1f56:	ef 93       	push	r30
    1f58:	ff 93       	push	r31
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    1f62:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <g_CallBackPtr>
    1f66:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <g_CallBackPtr+0x1>
    1f6a:	89 2b       	or	r24, r25
    1f6c:	31 f0       	breq	.+12     	; 0x1f7a <__vector_6+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    1f6e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <g_CallBackPtr>
    1f72:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <g_CallBackPtr+0x1>
    1f76:	fc 01       	movw	r30, r24
    1f78:	09 95       	icall
	}

}
    1f7a:	00 00       	nop
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	ff 91       	pop	r31
    1f82:	ef 91       	pop	r30
    1f84:	bf 91       	pop	r27
    1f86:	af 91       	pop	r26
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	7f 91       	pop	r23
    1f8e:	6f 91       	pop	r22
    1f90:	5f 91       	pop	r21
    1f92:	4f 91       	pop	r20
    1f94:	3f 91       	pop	r19
    1f96:	2f 91       	pop	r18
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <__vector_8>:

ISR(TIMER1_OVF_vect){
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	2f 93       	push	r18
    1fae:	3f 93       	push	r19
    1fb0:	4f 93       	push	r20
    1fb2:	5f 93       	push	r21
    1fb4:	6f 93       	push	r22
    1fb6:	7f 93       	push	r23
    1fb8:	8f 93       	push	r24
    1fba:	9f 93       	push	r25
    1fbc:	af 93       	push	r26
    1fbe:	bf 93       	push	r27
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    1fcc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <g_CallBackPtr>
    1fd0:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <g_CallBackPtr+0x1>
    1fd4:	89 2b       	or	r24, r25
    1fd6:	31 f0       	breq	.+12     	; 0x1fe4 <__vector_8+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    1fd8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <g_CallBackPtr>
    1fdc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <g_CallBackPtr+0x1>
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	09 95       	icall
	}
}
    1fe4:	00 00       	nop
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	ff 91       	pop	r31
    1fec:	ef 91       	pop	r30
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	7f 91       	pop	r23
    1ff8:	6f 91       	pop	r22
    1ffa:	5f 91       	pop	r21
    1ffc:	4f 91       	pop	r20
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    2014:	8b e2       	ldi	r24, 0x2B	; 43
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	fc 01       	movw	r30, r24
    201a:	20 81       	ld	r18, Z
    201c:	8b e2       	ldi	r24, 0x2B	; 43
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	22 60       	ori	r18, 0x02	; 2
    2022:	fc 01       	movw	r30, r24
    2024:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    2026:	8a e2       	ldi	r24, 0x2A	; 42
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	fc 01       	movw	r30, r24
    202c:	20 81       	ld	r18, Z
    202e:	8a e2       	ldi	r24, 0x2A	; 42
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	28 60       	ori	r18, 0x08	; 8
    2034:	fc 01       	movw	r30, r24
    2036:	20 83       	st	Z, r18
	SET_BIT(UCSRB, RXEN);
    2038:	8a e2       	ldi	r24, 0x2A	; 42
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	fc 01       	movw	r30, r24
    203e:	20 81       	ld	r18, Z
    2040:	8a e2       	ldi	r24, 0x2A	; 42
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	20 61       	ori	r18, 0x10	; 16
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    204a:	80 e4       	ldi	r24, 0x40	; 64
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	fc 01       	movw	r30, r24
    2050:	20 81       	ld	r18, Z
    2052:	80 e4       	ldi	r24, 0x40	; 64
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	20 68       	ori	r18, 0x80	; 128
    2058:	fc 01       	movw	r30, r24
    205a:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ1);
    205c:	80 e4       	ldi	r24, 0x40	; 64
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	fc 01       	movw	r30, r24
    2062:	20 81       	ld	r18, Z
    2064:	80 e4       	ldi	r24, 0x40	; 64
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	24 60       	ori	r18, 0x04	; 4
    206a:	fc 01       	movw	r30, r24
    206c:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ0);
    206e:	80 e4       	ldi	r24, 0x40	; 64
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	fc 01       	movw	r30, r24
    2074:	20 81       	ld	r18, Z
    2076:	80 e4       	ldi	r24, 0x40	; 64
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	22 60       	ori	r18, 0x02	; 2
    207c:	fc 01       	movw	r30, r24
    207e:	20 83       	st	Z, r18

	/*	select type of parity */
	SET_BIT(UCSRC, UPM1);
    2080:	80 e4       	ldi	r24, 0x40	; 64
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	fc 01       	movw	r30, r24
    2086:	20 81       	ld	r18, Z
    2088:	80 e4       	ldi	r24, 0x40	; 64
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	20 62       	ori	r18, 0x20	; 32
    208e:	fc 01       	movw	r30, r24
    2090:	20 83       	st	Z, r18

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    2092:	80 e4       	ldi	r24, 0x40	; 64
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	fc 01       	movw	r30, r24
    2098:	10 82       	st	Z, r1
	UBRRL = 12;
    209a:	89 e2       	ldi	r24, 0x29	; 41
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	2c e0       	ldi	r18, 0x0C	; 12
    20a0:	fc 01       	movw	r30, r24
    20a2:	20 83       	st	Z, r18

}
    20a4:	00 00       	nop
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	08 95       	ret

000020ac <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	0f 92       	push	r0
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    20b8:	00 00       	nop
    20ba:	8b e2       	ldi	r24, 0x2B	; 43
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	fc 01       	movw	r30, r24
    20c0:	80 81       	ld	r24, Z
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	80 72       	andi	r24, 0x20	; 32
    20c8:	99 27       	eor	r25, r25
    20ca:	89 2b       	or	r24, r25
    20cc:	b1 f3       	breq	.-20     	; 0x20ba <UART_sendByte+0xe>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    20ce:	8c e2       	ldi	r24, 0x2C	; 44
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	29 81       	ldd	r18, Y+1	; 0x01
    20d4:	fc 01       	movw	r30, r24
    20d6:	20 83       	st	Z, r18
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    20d8:	00 00       	nop
    20da:	0f 90       	pop	r0
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    20ea:	00 00       	nop
    20ec:	8b e2       	ldi	r24, 0x2B	; 43
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	fc 01       	movw	r30, r24
    20f2:	80 81       	ld	r24, Z
    20f4:	88 23       	and	r24, r24
    20f6:	d4 f7       	brge	.-12     	; 0x20ec <UART_recieveByte+0xa>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    20f8:	8c e2       	ldi	r24, 0x2C	; 44
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	00 d0       	rcall	.+0      	; 0x210c <UART_sendString+0x6>
    210c:	0f 92       	push	r0
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	9b 83       	std	Y+3, r25	; 0x03
    2114:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2116:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
    2118:	0e c0       	rjmp	.+28     	; 0x2136 <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	2a 81       	ldd	r18, Y+2	; 0x02
    2122:	3b 81       	ldd	r19, Y+3	; 0x03
    2124:	82 0f       	add	r24, r18
    2126:	93 1f       	adc	r25, r19
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
    212c:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
		i++;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	89 83       	std	Y+1, r24	; 0x01
	while(Str[i] != '\0')
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	fc 01       	movw	r30, r24
    2146:	80 81       	ld	r24, Z
    2148:	88 23       	and	r24, r24
    214a:	39 f7       	brne	.-50     	; 0x211a <UART_sendString+0x14>
	}
	UART_sendByte('#');
    214c:	83 e2       	ldi	r24, 0x23	; 35
    214e:	0e 94 56 10 	call	0x20ac	; 0x20ac <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    2152:	00 00       	nop
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	00 d0       	rcall	.+0      	; 0x216a <UART_receiveString+0xa>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2174:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	2a 81       	ldd	r18, Y+2	; 0x02
    217e:	3b 81       	ldd	r19, Y+3	; 0x03
    2180:	89 01       	movw	r16, r18
    2182:	08 0f       	add	r16, r24
    2184:	19 1f       	adc	r17, r25
    2186:	0e 94 71 10 	call	0x20e2	; 0x20e2 <UART_recieveByte>
    218a:	f8 01       	movw	r30, r16
    218c:	80 83       	st	Z, r24

	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	98 0f       	add	r25, r24
    2194:	99 83       	std	Y+1, r25	; 0x01
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	2a 81       	ldd	r18, Y+2	; 0x02
    219c:	3b 81       	ldd	r19, Y+3	; 0x03
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	fc 01       	movw	r30, r24
    21a4:	80 81       	ld	r24, Z
    21a6:	83 32       	cpi	r24, 0x23	; 35
    21a8:	31 f7       	brne	.-52     	; 0x2176 <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	81 50       	subi	r24, 0x01	; 1
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	2a 81       	ldd	r18, Y+2	; 0x02
    21b8:	3b 81       	ldd	r19, Y+3	; 0x03
    21ba:	82 0f       	add	r24, r18
    21bc:	93 1f       	adc	r25, r19
    21be:	fc 01       	movw	r30, r24
    21c0:	10 82       	st	Z, r1

}
    21c2:	00 00       	nop
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	08 95       	ret

000021d4 <__tablejump2__>:
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	05 90       	lpm	r0, Z+
    21da:	f4 91       	lpm	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <__subsf3>:
    21e0:	50 58       	subi	r21, 0x80	; 128

000021e2 <__addsf3>:
    21e2:	bb 27       	eor	r27, r27
    21e4:	aa 27       	eor	r26, r26
    21e6:	0e 94 08 11 	call	0x2210	; 0x2210 <__addsf3x>
    21ea:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_round>
    21ee:	0e 94 30 12 	call	0x2460	; 0x2460 <__fp_pscA>
    21f2:	38 f0       	brcs	.+14     	; 0x2202 <__addsf3+0x20>
    21f4:	0e 94 37 12 	call	0x246e	; 0x246e <__fp_pscB>
    21f8:	20 f0       	brcs	.+8      	; 0x2202 <__addsf3+0x20>
    21fa:	39 f4       	brne	.+14     	; 0x220a <__addsf3+0x28>
    21fc:	9f 3f       	cpi	r25, 0xFF	; 255
    21fe:	19 f4       	brne	.+6      	; 0x2206 <__addsf3+0x24>
    2200:	26 f4       	brtc	.+8      	; 0x220a <__addsf3+0x28>
    2202:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__fp_nan>
    2206:	0e f4       	brtc	.+2      	; 0x220a <__addsf3+0x28>
    2208:	e0 95       	com	r30
    220a:	e7 fb       	bst	r30, 7
    220c:	0c 94 27 12 	jmp	0x244e	; 0x244e <__fp_inf>

00002210 <__addsf3x>:
    2210:	e9 2f       	mov	r30, r25
    2212:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_split3>
    2216:	58 f3       	brcs	.-42     	; 0x21ee <__addsf3+0xc>
    2218:	ba 17       	cp	r27, r26
    221a:	62 07       	cpc	r22, r18
    221c:	73 07       	cpc	r23, r19
    221e:	84 07       	cpc	r24, r20
    2220:	95 07       	cpc	r25, r21
    2222:	20 f0       	brcs	.+8      	; 0x222c <__addsf3x+0x1c>
    2224:	79 f4       	brne	.+30     	; 0x2244 <__addsf3x+0x34>
    2226:	a6 f5       	brtc	.+104    	; 0x2290 <__addsf3x+0x80>
    2228:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__fp_zero>
    222c:	0e f4       	brtc	.+2      	; 0x2230 <__addsf3x+0x20>
    222e:	e0 95       	com	r30
    2230:	0b 2e       	mov	r0, r27
    2232:	ba 2f       	mov	r27, r26
    2234:	a0 2d       	mov	r26, r0
    2236:	0b 01       	movw	r0, r22
    2238:	b9 01       	movw	r22, r18
    223a:	90 01       	movw	r18, r0
    223c:	0c 01       	movw	r0, r24
    223e:	ca 01       	movw	r24, r20
    2240:	a0 01       	movw	r20, r0
    2242:	11 24       	eor	r1, r1
    2244:	ff 27       	eor	r31, r31
    2246:	59 1b       	sub	r21, r25
    2248:	99 f0       	breq	.+38     	; 0x2270 <__addsf3x+0x60>
    224a:	59 3f       	cpi	r21, 0xF9	; 249
    224c:	50 f4       	brcc	.+20     	; 0x2262 <__addsf3x+0x52>
    224e:	50 3e       	cpi	r21, 0xE0	; 224
    2250:	68 f1       	brcs	.+90     	; 0x22ac <__addsf3x+0x9c>
    2252:	1a 16       	cp	r1, r26
    2254:	f0 40       	sbci	r31, 0x00	; 0
    2256:	a2 2f       	mov	r26, r18
    2258:	23 2f       	mov	r18, r19
    225a:	34 2f       	mov	r19, r20
    225c:	44 27       	eor	r20, r20
    225e:	58 5f       	subi	r21, 0xF8	; 248
    2260:	f3 cf       	rjmp	.-26     	; 0x2248 <__addsf3x+0x38>
    2262:	46 95       	lsr	r20
    2264:	37 95       	ror	r19
    2266:	27 95       	ror	r18
    2268:	a7 95       	ror	r26
    226a:	f0 40       	sbci	r31, 0x00	; 0
    226c:	53 95       	inc	r21
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__addsf3x+0x52>
    2270:	7e f4       	brtc	.+30     	; 0x2290 <__addsf3x+0x80>
    2272:	1f 16       	cp	r1, r31
    2274:	ba 0b       	sbc	r27, r26
    2276:	62 0b       	sbc	r22, r18
    2278:	73 0b       	sbc	r23, r19
    227a:	84 0b       	sbc	r24, r20
    227c:	ba f0       	brmi	.+46     	; 0x22ac <__addsf3x+0x9c>
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	a1 f0       	breq	.+40     	; 0x22aa <__addsf3x+0x9a>
    2282:	ff 0f       	add	r31, r31
    2284:	bb 1f       	adc	r27, r27
    2286:	66 1f       	adc	r22, r22
    2288:	77 1f       	adc	r23, r23
    228a:	88 1f       	adc	r24, r24
    228c:	c2 f7       	brpl	.-16     	; 0x227e <__addsf3x+0x6e>
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <__addsf3x+0x9c>
    2290:	ba 0f       	add	r27, r26
    2292:	62 1f       	adc	r22, r18
    2294:	73 1f       	adc	r23, r19
    2296:	84 1f       	adc	r24, r20
    2298:	48 f4       	brcc	.+18     	; 0x22ac <__addsf3x+0x9c>
    229a:	87 95       	ror	r24
    229c:	77 95       	ror	r23
    229e:	67 95       	ror	r22
    22a0:	b7 95       	ror	r27
    22a2:	f7 95       	ror	r31
    22a4:	9e 3f       	cpi	r25, 0xFE	; 254
    22a6:	08 f0       	brcs	.+2      	; 0x22aa <__addsf3x+0x9a>
    22a8:	b0 cf       	rjmp	.-160    	; 0x220a <__addsf3+0x28>
    22aa:	93 95       	inc	r25
    22ac:	88 0f       	add	r24, r24
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__addsf3x+0xa2>
    22b0:	99 27       	eor	r25, r25
    22b2:	ee 0f       	add	r30, r30
    22b4:	97 95       	ror	r25
    22b6:	87 95       	ror	r24
    22b8:	08 95       	ret

000022ba <__cmpsf2>:
    22ba:	0e 94 03 12 	call	0x2406	; 0x2406 <__fp_cmp>
    22be:	08 f4       	brcc	.+2      	; 0x22c2 <__cmpsf2+0x8>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	08 95       	ret

000022c4 <__divsf3>:
    22c4:	0e 94 76 11 	call	0x22ec	; 0x22ec <__divsf3x>
    22c8:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_round>
    22cc:	0e 94 37 12 	call	0x246e	; 0x246e <__fp_pscB>
    22d0:	58 f0       	brcs	.+22     	; 0x22e8 <__divsf3+0x24>
    22d2:	0e 94 30 12 	call	0x2460	; 0x2460 <__fp_pscA>
    22d6:	40 f0       	brcs	.+16     	; 0x22e8 <__divsf3+0x24>
    22d8:	29 f4       	brne	.+10     	; 0x22e4 <__divsf3+0x20>
    22da:	5f 3f       	cpi	r21, 0xFF	; 255
    22dc:	29 f0       	breq	.+10     	; 0x22e8 <__divsf3+0x24>
    22de:	0c 94 27 12 	jmp	0x244e	; 0x244e <__fp_inf>
    22e2:	51 11       	cpse	r21, r1
    22e4:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>
    22e8:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__fp_nan>

000022ec <__divsf3x>:
    22ec:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_split3>
    22f0:	68 f3       	brcs	.-38     	; 0x22cc <__divsf3+0x8>

000022f2 <__divsf3_pse>:
    22f2:	99 23       	and	r25, r25
    22f4:	b1 f3       	breq	.-20     	; 0x22e2 <__divsf3+0x1e>
    22f6:	55 23       	and	r21, r21
    22f8:	91 f3       	breq	.-28     	; 0x22de <__divsf3+0x1a>
    22fa:	95 1b       	sub	r25, r21
    22fc:	55 0b       	sbc	r21, r21
    22fe:	bb 27       	eor	r27, r27
    2300:	aa 27       	eor	r26, r26
    2302:	62 17       	cp	r22, r18
    2304:	73 07       	cpc	r23, r19
    2306:	84 07       	cpc	r24, r20
    2308:	38 f0       	brcs	.+14     	; 0x2318 <__divsf3_pse+0x26>
    230a:	9f 5f       	subi	r25, 0xFF	; 255
    230c:	5f 4f       	sbci	r21, 0xFF	; 255
    230e:	22 0f       	add	r18, r18
    2310:	33 1f       	adc	r19, r19
    2312:	44 1f       	adc	r20, r20
    2314:	aa 1f       	adc	r26, r26
    2316:	a9 f3       	breq	.-22     	; 0x2302 <__divsf3_pse+0x10>
    2318:	35 d0       	rcall	.+106    	; 0x2384 <__divsf3_pse+0x92>
    231a:	0e 2e       	mov	r0, r30
    231c:	3a f0       	brmi	.+14     	; 0x232c <__divsf3_pse+0x3a>
    231e:	e0 e8       	ldi	r30, 0x80	; 128
    2320:	32 d0       	rcall	.+100    	; 0x2386 <__divsf3_pse+0x94>
    2322:	91 50       	subi	r25, 0x01	; 1
    2324:	50 40       	sbci	r21, 0x00	; 0
    2326:	e6 95       	lsr	r30
    2328:	00 1c       	adc	r0, r0
    232a:	ca f7       	brpl	.-14     	; 0x231e <__divsf3_pse+0x2c>
    232c:	2b d0       	rcall	.+86     	; 0x2384 <__divsf3_pse+0x92>
    232e:	fe 2f       	mov	r31, r30
    2330:	29 d0       	rcall	.+82     	; 0x2384 <__divsf3_pse+0x92>
    2332:	66 0f       	add	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	88 1f       	adc	r24, r24
    2338:	bb 1f       	adc	r27, r27
    233a:	26 17       	cp	r18, r22
    233c:	37 07       	cpc	r19, r23
    233e:	48 07       	cpc	r20, r24
    2340:	ab 07       	cpc	r26, r27
    2342:	b0 e8       	ldi	r27, 0x80	; 128
    2344:	09 f0       	breq	.+2      	; 0x2348 <__divsf3_pse+0x56>
    2346:	bb 0b       	sbc	r27, r27
    2348:	80 2d       	mov	r24, r0
    234a:	bf 01       	movw	r22, r30
    234c:	ff 27       	eor	r31, r31
    234e:	93 58       	subi	r25, 0x83	; 131
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	3a f0       	brmi	.+14     	; 0x2362 <__divsf3_pse+0x70>
    2354:	9e 3f       	cpi	r25, 0xFE	; 254
    2356:	51 05       	cpc	r21, r1
    2358:	78 f0       	brcs	.+30     	; 0x2378 <__divsf3_pse+0x86>
    235a:	0c 94 27 12 	jmp	0x244e	; 0x244e <__fp_inf>
    235e:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>
    2362:	5f 3f       	cpi	r21, 0xFF	; 255
    2364:	e4 f3       	brlt	.-8      	; 0x235e <__divsf3_pse+0x6c>
    2366:	98 3e       	cpi	r25, 0xE8	; 232
    2368:	d4 f3       	brlt	.-12     	; 0x235e <__divsf3_pse+0x6c>
    236a:	86 95       	lsr	r24
    236c:	77 95       	ror	r23
    236e:	67 95       	ror	r22
    2370:	b7 95       	ror	r27
    2372:	f7 95       	ror	r31
    2374:	9f 5f       	subi	r25, 0xFF	; 255
    2376:	c9 f7       	brne	.-14     	; 0x236a <__divsf3_pse+0x78>
    2378:	88 0f       	add	r24, r24
    237a:	91 1d       	adc	r25, r1
    237c:	96 95       	lsr	r25
    237e:	87 95       	ror	r24
    2380:	97 f9       	bld	r25, 7
    2382:	08 95       	ret
    2384:	e1 e0       	ldi	r30, 0x01	; 1
    2386:	66 0f       	add	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	bb 1f       	adc	r27, r27
    238e:	62 17       	cp	r22, r18
    2390:	73 07       	cpc	r23, r19
    2392:	84 07       	cpc	r24, r20
    2394:	ba 07       	cpc	r27, r26
    2396:	20 f0       	brcs	.+8      	; 0x23a0 <__divsf3_pse+0xae>
    2398:	62 1b       	sub	r22, r18
    239a:	73 0b       	sbc	r23, r19
    239c:	84 0b       	sbc	r24, r20
    239e:	ba 0b       	sbc	r27, r26
    23a0:	ee 1f       	adc	r30, r30
    23a2:	88 f7       	brcc	.-30     	; 0x2386 <__divsf3_pse+0x94>
    23a4:	e0 95       	com	r30
    23a6:	08 95       	ret

000023a8 <__fixunssfsi>:
    23a8:	0e 94 57 12 	call	0x24ae	; 0x24ae <__fp_splitA>
    23ac:	88 f0       	brcs	.+34     	; 0x23d0 <__fixunssfsi+0x28>
    23ae:	9f 57       	subi	r25, 0x7F	; 127
    23b0:	98 f0       	brcs	.+38     	; 0x23d8 <__fixunssfsi+0x30>
    23b2:	b9 2f       	mov	r27, r25
    23b4:	99 27       	eor	r25, r25
    23b6:	b7 51       	subi	r27, 0x17	; 23
    23b8:	b0 f0       	brcs	.+44     	; 0x23e6 <__fixunssfsi+0x3e>
    23ba:	e1 f0       	breq	.+56     	; 0x23f4 <__fixunssfsi+0x4c>
    23bc:	66 0f       	add	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	88 1f       	adc	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	1a f0       	brmi	.+6      	; 0x23cc <__fixunssfsi+0x24>
    23c6:	ba 95       	dec	r27
    23c8:	c9 f7       	brne	.-14     	; 0x23bc <__fixunssfsi+0x14>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <__fixunssfsi+0x4c>
    23cc:	b1 30       	cpi	r27, 0x01	; 1
    23ce:	91 f0       	breq	.+36     	; 0x23f4 <__fixunssfsi+0x4c>
    23d0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <__fp_zero>
    23d4:	b1 e0       	ldi	r27, 0x01	; 1
    23d6:	08 95       	ret
    23d8:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__fp_zero>
    23dc:	67 2f       	mov	r22, r23
    23de:	78 2f       	mov	r23, r24
    23e0:	88 27       	eor	r24, r24
    23e2:	b8 5f       	subi	r27, 0xF8	; 248
    23e4:	39 f0       	breq	.+14     	; 0x23f4 <__fixunssfsi+0x4c>
    23e6:	b9 3f       	cpi	r27, 0xF9	; 249
    23e8:	cc f3       	brlt	.-14     	; 0x23dc <__fixunssfsi+0x34>
    23ea:	86 95       	lsr	r24
    23ec:	77 95       	ror	r23
    23ee:	67 95       	ror	r22
    23f0:	b3 95       	inc	r27
    23f2:	d9 f7       	brne	.-10     	; 0x23ea <__fixunssfsi+0x42>
    23f4:	3e f4       	brtc	.+14     	; 0x2404 <__fixunssfsi+0x5c>
    23f6:	90 95       	com	r25
    23f8:	80 95       	com	r24
    23fa:	70 95       	com	r23
    23fc:	61 95       	neg	r22
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	8f 4f       	sbci	r24, 0xFF	; 255
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	08 95       	ret

00002406 <__fp_cmp>:
    2406:	99 0f       	add	r25, r25
    2408:	00 08       	sbc	r0, r0
    240a:	55 0f       	add	r21, r21
    240c:	aa 0b       	sbc	r26, r26
    240e:	e0 e8       	ldi	r30, 0x80	; 128
    2410:	fe ef       	ldi	r31, 0xFE	; 254
    2412:	16 16       	cp	r1, r22
    2414:	17 06       	cpc	r1, r23
    2416:	e8 07       	cpc	r30, r24
    2418:	f9 07       	cpc	r31, r25
    241a:	c0 f0       	brcs	.+48     	; 0x244c <__fp_cmp+0x46>
    241c:	12 16       	cp	r1, r18
    241e:	13 06       	cpc	r1, r19
    2420:	e4 07       	cpc	r30, r20
    2422:	f5 07       	cpc	r31, r21
    2424:	98 f0       	brcs	.+38     	; 0x244c <__fp_cmp+0x46>
    2426:	62 1b       	sub	r22, r18
    2428:	73 0b       	sbc	r23, r19
    242a:	84 0b       	sbc	r24, r20
    242c:	95 0b       	sbc	r25, r21
    242e:	39 f4       	brne	.+14     	; 0x243e <__fp_cmp+0x38>
    2430:	0a 26       	eor	r0, r26
    2432:	61 f0       	breq	.+24     	; 0x244c <__fp_cmp+0x46>
    2434:	23 2b       	or	r18, r19
    2436:	24 2b       	or	r18, r20
    2438:	25 2b       	or	r18, r21
    243a:	21 f4       	brne	.+8      	; 0x2444 <__fp_cmp+0x3e>
    243c:	08 95       	ret
    243e:	0a 26       	eor	r0, r26
    2440:	09 f4       	brne	.+2      	; 0x2444 <__fp_cmp+0x3e>
    2442:	a1 40       	sbci	r26, 0x01	; 1
    2444:	a6 95       	lsr	r26
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	81 1d       	adc	r24, r1
    244a:	81 1d       	adc	r24, r1
    244c:	08 95       	ret

0000244e <__fp_inf>:
    244e:	97 f9       	bld	r25, 7
    2450:	9f 67       	ori	r25, 0x7F	; 127
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	08 95       	ret

0000245a <__fp_nan>:
    245a:	9f ef       	ldi	r25, 0xFF	; 255
    245c:	80 ec       	ldi	r24, 0xC0	; 192
    245e:	08 95       	ret

00002460 <__fp_pscA>:
    2460:	00 24       	eor	r0, r0
    2462:	0a 94       	dec	r0
    2464:	16 16       	cp	r1, r22
    2466:	17 06       	cpc	r1, r23
    2468:	18 06       	cpc	r1, r24
    246a:	09 06       	cpc	r0, r25
    246c:	08 95       	ret

0000246e <__fp_pscB>:
    246e:	00 24       	eor	r0, r0
    2470:	0a 94       	dec	r0
    2472:	12 16       	cp	r1, r18
    2474:	13 06       	cpc	r1, r19
    2476:	14 06       	cpc	r1, r20
    2478:	05 06       	cpc	r0, r21
    247a:	08 95       	ret

0000247c <__fp_round>:
    247c:	09 2e       	mov	r0, r25
    247e:	03 94       	inc	r0
    2480:	00 0c       	add	r0, r0
    2482:	11 f4       	brne	.+4      	; 0x2488 <__fp_round+0xc>
    2484:	88 23       	and	r24, r24
    2486:	52 f0       	brmi	.+20     	; 0x249c <__fp_round+0x20>
    2488:	bb 0f       	add	r27, r27
    248a:	40 f4       	brcc	.+16     	; 0x249c <__fp_round+0x20>
    248c:	bf 2b       	or	r27, r31
    248e:	11 f4       	brne	.+4      	; 0x2494 <__fp_round+0x18>
    2490:	60 ff       	sbrs	r22, 0
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__fp_round+0x20>
    2494:	6f 5f       	subi	r22, 0xFF	; 255
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	08 95       	ret

0000249e <__fp_split3>:
    249e:	57 fd       	sbrc	r21, 7
    24a0:	90 58       	subi	r25, 0x80	; 128
    24a2:	44 0f       	add	r20, r20
    24a4:	55 1f       	adc	r21, r21
    24a6:	59 f0       	breq	.+22     	; 0x24be <__fp_splitA+0x10>
    24a8:	5f 3f       	cpi	r21, 0xFF	; 255
    24aa:	71 f0       	breq	.+28     	; 0x24c8 <__fp_splitA+0x1a>
    24ac:	47 95       	ror	r20

000024ae <__fp_splitA>:
    24ae:	88 0f       	add	r24, r24
    24b0:	97 fb       	bst	r25, 7
    24b2:	99 1f       	adc	r25, r25
    24b4:	61 f0       	breq	.+24     	; 0x24ce <__fp_splitA+0x20>
    24b6:	9f 3f       	cpi	r25, 0xFF	; 255
    24b8:	79 f0       	breq	.+30     	; 0x24d8 <__fp_splitA+0x2a>
    24ba:	87 95       	ror	r24
    24bc:	08 95       	ret
    24be:	12 16       	cp	r1, r18
    24c0:	13 06       	cpc	r1, r19
    24c2:	14 06       	cpc	r1, r20
    24c4:	55 1f       	adc	r21, r21
    24c6:	f2 cf       	rjmp	.-28     	; 0x24ac <__fp_split3+0xe>
    24c8:	46 95       	lsr	r20
    24ca:	f1 df       	rcall	.-30     	; 0x24ae <__fp_splitA>
    24cc:	08 c0       	rjmp	.+16     	; 0x24de <__fp_splitA+0x30>
    24ce:	16 16       	cp	r1, r22
    24d0:	17 06       	cpc	r1, r23
    24d2:	18 06       	cpc	r1, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	f1 cf       	rjmp	.-30     	; 0x24ba <__fp_splitA+0xc>
    24d8:	86 95       	lsr	r24
    24da:	71 05       	cpc	r23, r1
    24dc:	61 05       	cpc	r22, r1
    24de:	08 94       	sec
    24e0:	08 95       	ret

000024e2 <__fp_zero>:
    24e2:	e8 94       	clt

000024e4 <__fp_szero>:
    24e4:	bb 27       	eor	r27, r27
    24e6:	66 27       	eor	r22, r22
    24e8:	77 27       	eor	r23, r23
    24ea:	cb 01       	movw	r24, r22
    24ec:	97 f9       	bld	r25, 7
    24ee:	08 95       	ret

000024f0 <__gesf2>:
    24f0:	0e 94 03 12 	call	0x2406	; 0x2406 <__fp_cmp>
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <__gesf2+0x8>
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
    24f8:	08 95       	ret

000024fa <__mulsf3>:
    24fa:	0e 94 90 12 	call	0x2520	; 0x2520 <__mulsf3x>
    24fe:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_round>
    2502:	0e 94 30 12 	call	0x2460	; 0x2460 <__fp_pscA>
    2506:	38 f0       	brcs	.+14     	; 0x2516 <__mulsf3+0x1c>
    2508:	0e 94 37 12 	call	0x246e	; 0x246e <__fp_pscB>
    250c:	20 f0       	brcs	.+8      	; 0x2516 <__mulsf3+0x1c>
    250e:	95 23       	and	r25, r21
    2510:	11 f0       	breq	.+4      	; 0x2516 <__mulsf3+0x1c>
    2512:	0c 94 27 12 	jmp	0x244e	; 0x244e <__fp_inf>
    2516:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__fp_nan>
    251a:	11 24       	eor	r1, r1
    251c:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>

00002520 <__mulsf3x>:
    2520:	0e 94 4f 12 	call	0x249e	; 0x249e <__fp_split3>
    2524:	70 f3       	brcs	.-36     	; 0x2502 <__mulsf3+0x8>

00002526 <__mulsf3_pse>:
    2526:	95 9f       	mul	r25, r21
    2528:	c1 f3       	breq	.-16     	; 0x251a <__mulsf3+0x20>
    252a:	95 0f       	add	r25, r21
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	55 1f       	adc	r21, r21
    2530:	62 9f       	mul	r22, r18
    2532:	f0 01       	movw	r30, r0
    2534:	72 9f       	mul	r23, r18
    2536:	bb 27       	eor	r27, r27
    2538:	f0 0d       	add	r31, r0
    253a:	b1 1d       	adc	r27, r1
    253c:	63 9f       	mul	r22, r19
    253e:	aa 27       	eor	r26, r26
    2540:	f0 0d       	add	r31, r0
    2542:	b1 1d       	adc	r27, r1
    2544:	aa 1f       	adc	r26, r26
    2546:	64 9f       	mul	r22, r20
    2548:	66 27       	eor	r22, r22
    254a:	b0 0d       	add	r27, r0
    254c:	a1 1d       	adc	r26, r1
    254e:	66 1f       	adc	r22, r22
    2550:	82 9f       	mul	r24, r18
    2552:	22 27       	eor	r18, r18
    2554:	b0 0d       	add	r27, r0
    2556:	a1 1d       	adc	r26, r1
    2558:	62 1f       	adc	r22, r18
    255a:	73 9f       	mul	r23, r19
    255c:	b0 0d       	add	r27, r0
    255e:	a1 1d       	adc	r26, r1
    2560:	62 1f       	adc	r22, r18
    2562:	83 9f       	mul	r24, r19
    2564:	a0 0d       	add	r26, r0
    2566:	61 1d       	adc	r22, r1
    2568:	22 1f       	adc	r18, r18
    256a:	74 9f       	mul	r23, r20
    256c:	33 27       	eor	r19, r19
    256e:	a0 0d       	add	r26, r0
    2570:	61 1d       	adc	r22, r1
    2572:	23 1f       	adc	r18, r19
    2574:	84 9f       	mul	r24, r20
    2576:	60 0d       	add	r22, r0
    2578:	21 1d       	adc	r18, r1
    257a:	82 2f       	mov	r24, r18
    257c:	76 2f       	mov	r23, r22
    257e:	6a 2f       	mov	r22, r26
    2580:	11 24       	eor	r1, r1
    2582:	9f 57       	subi	r25, 0x7F	; 127
    2584:	50 40       	sbci	r21, 0x00	; 0
    2586:	9a f0       	brmi	.+38     	; 0x25ae <__mulsf3_pse+0x88>
    2588:	f1 f0       	breq	.+60     	; 0x25c6 <__mulsf3_pse+0xa0>
    258a:	88 23       	and	r24, r24
    258c:	4a f0       	brmi	.+18     	; 0x25a0 <__mulsf3_pse+0x7a>
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	bb 1f       	adc	r27, r27
    2594:	66 1f       	adc	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	88 1f       	adc	r24, r24
    259a:	91 50       	subi	r25, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	a9 f7       	brne	.-22     	; 0x258a <__mulsf3_pse+0x64>
    25a0:	9e 3f       	cpi	r25, 0xFE	; 254
    25a2:	51 05       	cpc	r21, r1
    25a4:	80 f0       	brcs	.+32     	; 0x25c6 <__mulsf3_pse+0xa0>
    25a6:	0c 94 27 12 	jmp	0x244e	; 0x244e <__fp_inf>
    25aa:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_szero>
    25ae:	5f 3f       	cpi	r21, 0xFF	; 255
    25b0:	e4 f3       	brlt	.-8      	; 0x25aa <__mulsf3_pse+0x84>
    25b2:	98 3e       	cpi	r25, 0xE8	; 232
    25b4:	d4 f3       	brlt	.-12     	; 0x25aa <__mulsf3_pse+0x84>
    25b6:	86 95       	lsr	r24
    25b8:	77 95       	ror	r23
    25ba:	67 95       	ror	r22
    25bc:	b7 95       	ror	r27
    25be:	f7 95       	ror	r31
    25c0:	e7 95       	ror	r30
    25c2:	9f 5f       	subi	r25, 0xFF	; 255
    25c4:	c1 f7       	brne	.-16     	; 0x25b6 <__mulsf3_pse+0x90>
    25c6:	fe 2b       	or	r31, r30
    25c8:	88 0f       	add	r24, r24
    25ca:	91 1d       	adc	r25, r1
    25cc:	96 95       	lsr	r25
    25ce:	87 95       	ror	r24
    25d0:	97 f9       	bld	r25, 7
    25d2:	08 95       	ret

000025d4 <itoa>:
    25d4:	45 32       	cpi	r20, 0x25	; 37
    25d6:	51 05       	cpc	r21, r1
    25d8:	20 f4       	brcc	.+8      	; 0x25e2 <itoa+0xe>
    25da:	42 30       	cpi	r20, 0x02	; 2
    25dc:	10 f0       	brcs	.+4      	; 0x25e2 <itoa+0xe>
    25de:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__itoa_ncheck>
    25e2:	fb 01       	movw	r30, r22
    25e4:	10 82       	st	Z, r1
    25e6:	cb 01       	movw	r24, r22
    25e8:	08 95       	ret

000025ea <__itoa_ncheck>:
    25ea:	bb 27       	eor	r27, r27
    25ec:	4a 30       	cpi	r20, 0x0A	; 10
    25ee:	31 f4       	brne	.+12     	; 0x25fc <__itoa_ncheck+0x12>
    25f0:	99 23       	and	r25, r25
    25f2:	22 f4       	brpl	.+8      	; 0x25fc <__itoa_ncheck+0x12>
    25f4:	bd e2       	ldi	r27, 0x2D	; 45
    25f6:	90 95       	com	r25
    25f8:	81 95       	neg	r24
    25fa:	9f 4f       	sbci	r25, 0xFF	; 255
    25fc:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__utoa_common>

00002600 <__utoa_ncheck>:
    2600:	bb 27       	eor	r27, r27

00002602 <__utoa_common>:
    2602:	fb 01       	movw	r30, r22
    2604:	55 27       	eor	r21, r21
    2606:	aa 27       	eor	r26, r26
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	aa 1f       	adc	r26, r26
    260e:	a4 17       	cp	r26, r20
    2610:	10 f0       	brcs	.+4      	; 0x2616 <__utoa_common+0x14>
    2612:	a4 1b       	sub	r26, r20
    2614:	83 95       	inc	r24
    2616:	50 51       	subi	r21, 0x10	; 16
    2618:	b9 f7       	brne	.-18     	; 0x2608 <__utoa_common+0x6>
    261a:	a0 5d       	subi	r26, 0xD0	; 208
    261c:	aa 33       	cpi	r26, 0x3A	; 58
    261e:	08 f0       	brcs	.+2      	; 0x2622 <__utoa_common+0x20>
    2620:	a9 5d       	subi	r26, 0xD9	; 217
    2622:	a1 93       	st	Z+, r26
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	79 f7       	brne	.-34     	; 0x2606 <__utoa_common+0x4>
    2628:	b1 11       	cpse	r27, r1
    262a:	b1 93       	st	Z+, r27
    262c:	11 92       	st	Z+, r1
    262e:	cb 01       	movw	r24, r22
    2630:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <strrev>

00002634 <strrev>:
    2634:	dc 01       	movw	r26, r24
    2636:	fc 01       	movw	r30, r24
    2638:	67 2f       	mov	r22, r23
    263a:	71 91       	ld	r23, Z+
    263c:	77 23       	and	r23, r23
    263e:	e1 f7       	brne	.-8      	; 0x2638 <strrev+0x4>
    2640:	32 97       	sbiw	r30, 0x02	; 2
    2642:	04 c0       	rjmp	.+8      	; 0x264c <strrev+0x18>
    2644:	7c 91       	ld	r23, X
    2646:	6d 93       	st	X+, r22
    2648:	70 83       	st	Z, r23
    264a:	62 91       	ld	r22, -Z
    264c:	ae 17       	cp	r26, r30
    264e:	bf 07       	cpc	r27, r31
    2650:	c8 f3       	brcs	.-14     	; 0x2644 <strrev+0x10>
    2652:	08 95       	ret

00002654 <_exit>:
    2654:	f8 94       	cli

00002656 <__stop_program>:
    2656:	ff cf       	rjmp	.-2      	; 0x2656 <__stop_program>
    2658:	59 05       	cpc	r21, r9
    265a:	5b 05       	cpc	r21, r11
    265c:	5d 05       	cpc	r21, r13
    265e:	5f 05       	cpc	r21, r15
    2660:	61 05       	cpc	r22, r1
    2662:	63 05       	cpc	r22, r3
    2664:	65 05       	cpc	r22, r5
    2666:	67 05       	cpc	r22, r7
    2668:	69 05       	cpc	r22, r9
    266a:	6b 05       	cpc	r22, r11
    266c:	6d 05       	cpc	r22, r13
    266e:	6f 05       	cpc	r22, r15
    2670:	71 05       	cpc	r23, r1
    2672:	73 05       	cpc	r23, r3
    2674:	75 05       	cpc	r23, r5
    2676:	77 05       	cpc	r23, r7
