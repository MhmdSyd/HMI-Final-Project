
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f1e  00001fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  00001fba  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00001fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013e2  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000063b6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000063c8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000100  00000000  00000000  00006408  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000065e  00000000  00000000  00006508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000587  00000000  00000000  00006b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000004cf  00000000  00000000  000070ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/*                                 	Control_ECU Header File                                                      */
#include "Control_ECU.h"

/*				main Control_ECU Function		*/
int main(void) {
      92:	8f 92       	push	r8
      94:	9f 92       	push	r9
      96:	af 92       	push	r10
      98:	bf 92       	push	r11
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	c4 54       	subi	r28, 0x44	; 68
      ac:	d1 09       	sbc	r29, r1
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	cd bf       	out	0x3d, r28	; 61
	/* initialize EEPROM module  */
	EEPROM_init();
      b8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <EEPROM_init>
	UART_init(); /* initialize UART module  */
      bc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <UART_init>

	/*		Determined function that call Back by Timer 	*/
	TIMER_setCallBack(TimerControl);
      c0:	8a ed       	ldi	r24, 0xDA	; 218
      c2:	93 e0       	ldi	r25, 0x03	; 3
      c4:	0e 94 bd 0c 	call	0x197a	; 0x197a <TIMER_setCallBack>

	/*		initial last three pins in PORTD (  Motor & Buzzer Pins )	*/
	DDRD |= 0xE0;
      c8:	81 e3       	ldi	r24, 0x31	; 49
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	dc 01       	movw	r26, r24
      ce:	2c 91       	ld	r18, X
      d0:	81 e3       	ldi	r24, 0x31	; 49
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	20 6e       	ori	r18, 0xE0	; 224
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
	PORTD &= 0x1F;
      da:	82 e3       	ldi	r24, 0x32	; 50
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	dc 01       	movw	r26, r24
      e0:	2c 91       	ld	r18, X
      e2:	82 e3       	ldi	r24, 0x32	; 50
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	2f 71       	andi	r18, 0x1F	; 31
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
	/*  active this line when you want to reset the system */
	 //writePassInEEPROM(&addPass, &g_pass);


	/*  read password from EEPROM */
	readPassFromEEPROM(&addPass, &g_passCheck);
      ec:	61 e7       	ldi	r22, 0x71	; 113
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	85 e6       	ldi	r24, 0x65	; 101
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 a3 09 	call	0x1346	; 0x1346 <readPassFromEEPROM>
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	aa e7       	ldi	r26, 0x7A	; 122
      fe:	b4 e4       	ldi	r27, 0x44	; 68
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	ab 83       	std	Y+3, r26	; 0x03
     106:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	4a ef       	ldi	r20, 0xFA	; 250
     10e:	54 e4       	ldi	r21, 0x44	; 68
     110:	69 81       	ldd	r22, Y+1	; 0x01
     112:	7a 81       	ldd	r23, Y+2	; 0x02
     114:	8b 81       	ldd	r24, Y+3	; 0x03
     116:	9c 81       	ldd	r25, Y+4	; 0x04
     118:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     11c:	6d a3       	std	Y+37, r22	; 0x25
     11e:	7e a3       	std	Y+38, r23	; 0x26
     120:	8f a3       	std	Y+39, r24	; 0x27
     122:	98 a7       	std	Y+40, r25	; 0x28
     124:	8d a1       	ldd	r24, Y+37	; 0x25
     126:	9e a1       	ldd	r25, Y+38	; 0x26
     128:	af a1       	ldd	r26, Y+39	; 0x27
     12a:	b8 a5       	ldd	r27, Y+40	; 0x28
     12c:	8d 83       	std	Y+5, r24	; 0x05
     12e:	9e 83       	std	Y+6, r25	; 0x06
     130:	af 83       	std	Y+7, r26	; 0x07
     132:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e8       	ldi	r20, 0x80	; 128
     13a:	5f e3       	ldi	r21, 0x3F	; 63
     13c:	6d 81       	ldd	r22, Y+5	; 0x05
     13e:	7e 81       	ldd	r23, Y+6	; 0x06
     140:	8f 81       	ldd	r24, Y+7	; 0x07
     142:	98 85       	ldd	r25, Y+8	; 0x08
     144:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     148:	88 23       	and	r24, r24
     14a:	2c f4       	brge	.+10     	; 0x156 <main+0xc4>
		__ticks = 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	9a 87       	std	Y+10, r25	; 0x0a
     152:	89 87       	std	Y+9, r24	; 0x09
     154:	54 c0       	rjmp	.+168    	; 0x1fe <main+0x16c>
	else if (__tmp > 65535)
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	3f ef       	ldi	r19, 0xFF	; 255
     15a:	4f e7       	ldi	r20, 0x7F	; 127
     15c:	57 e4       	ldi	r21, 0x47	; 71
     15e:	6d 81       	ldd	r22, Y+5	; 0x05
     160:	7e 81       	ldd	r23, Y+6	; 0x06
     162:	8f 81       	ldd	r24, Y+7	; 0x07
     164:	98 85       	ldd	r25, Y+8	; 0x08
     166:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     16a:	18 16       	cp	r1, r24
     16c:	d4 f5       	brge	.+116    	; 0x1e2 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	40 e2       	ldi	r20, 0x20	; 32
     174:	51 e4       	ldi	r21, 0x41	; 65
     176:	69 81       	ldd	r22, Y+1	; 0x01
     178:	7a 81       	ldd	r23, Y+2	; 0x02
     17a:	8b 81       	ldd	r24, Y+3	; 0x03
     17c:	9c 81       	ldd	r25, Y+4	; 0x04
     17e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     182:	69 a7       	std	Y+41, r22	; 0x29
     184:	7a a7       	std	Y+42, r23	; 0x2a
     186:	8b a7       	std	Y+43, r24	; 0x2b
     188:	9c a7       	std	Y+44, r25	; 0x2c
     18a:	89 a5       	ldd	r24, Y+41	; 0x29
     18c:	9a a5       	ldd	r25, Y+42	; 0x2a
     18e:	ab a5       	ldd	r26, Y+43	; 0x2b
     190:	bc a5       	ldd	r27, Y+44	; 0x2c
     192:	8d 8f       	std	Y+29, r24	; 0x1d
     194:	9e 8f       	std	Y+30, r25	; 0x1e
     196:	af 8f       	std	Y+31, r26	; 0x1f
     198:	b8 a3       	std	Y+32, r27	; 0x20
     19a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     19c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     19e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     1a0:	98 a1       	ldd	r25, Y+32	; 0x20
     1a2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     1a6:	6d a7       	std	Y+45, r22	; 0x2d
     1a8:	7e a7       	std	Y+46, r23	; 0x2e
     1aa:	8f a7       	std	Y+47, r24	; 0x2f
     1ac:	98 ab       	std	Y+48, r25	; 0x30
     1ae:	ad a5       	ldd	r26, Y+45	; 0x2d
     1b0:	be a5       	ldd	r27, Y+46	; 0x2e
     1b2:	ba 87       	std	Y+10, r27	; 0x0a
     1b4:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <main+0x146>
     1b8:	88 ec       	ldi	r24, 0xC8	; 200
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	9c 87       	std	Y+12, r25	; 0x0c
     1be:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x132>
     1c8:	9c 87       	std	Y+12, r25	; 0x0c
     1ca:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1cc:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	9a 87       	std	Y+10, r25	; 0x0a
     1d6:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     1d8:	89 85       	ldd	r24, Y+9	; 0x09
     1da:	9a 85       	ldd	r25, Y+10	; 0x0a
     1dc:	89 2b       	or	r24, r25
     1de:	61 f7       	brne	.-40     	; 0x1b8 <main+0x126>
		}
		return;
     1e0:	19 c0       	rjmp	.+50     	; 0x214 <main+0x182>
	}
	else
		__ticks = (uint16_t)__tmp;
     1e2:	6d 81       	ldd	r22, Y+5	; 0x05
     1e4:	7e 81       	ldd	r23, Y+6	; 0x06
     1e6:	8f 81       	ldd	r24, Y+7	; 0x07
     1e8:	98 85       	ldd	r25, Y+8	; 0x08
     1ea:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     1ee:	69 ab       	std	Y+49, r22	; 0x31
     1f0:	7a ab       	std	Y+50, r23	; 0x32
     1f2:	8b ab       	std	Y+51, r24	; 0x33
     1f4:	9c ab       	std	Y+52, r25	; 0x34
     1f6:	e9 a9       	ldd	r30, Y+49	; 0x31
     1f8:	fa a9       	ldd	r31, Y+50	; 0x32
     1fa:	fa 87       	std	Y+10, r31	; 0x0a
     1fc:	e9 87       	std	Y+9, r30	; 0x09
     1fe:	89 85       	ldd	r24, Y+9	; 0x09
     200:	9a 85       	ldd	r25, Y+10	; 0x0a
     202:	9e 87       	std	Y+14, r25	; 0x0e
     204:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     206:	8d 85       	ldd	r24, Y+13	; 0x0d
     208:	9e 85       	ldd	r25, Y+14	; 0x0e
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x178>
     20e:	9e 87       	std	Y+14, r25	; 0x0e
     210:	8d 87       	std	Y+13, r24	; 0x0d
}
     212:	00 00       	nop
	_delay_ms(1000); /*	wait one second to synchronize with HMI-ECU */

	UART_sendByte('#'); /* tells MC1 that MC2 become ready & start communication with MC1 */
     214:	83 e2       	ldi	r24, 0x23	; 35
     216:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>

	/*  check that first time used or used before that time */
	if (g_passCheck == 0) {
     21a:	80 90 71 00 	lds	r8, 0x0071	; 0x800071 <g_passCheck>
     21e:	90 90 72 00 	lds	r9, 0x0072	; 0x800072 <g_passCheck+0x1>
     222:	a0 90 73 00 	lds	r10, 0x0073	; 0x800073 <g_passCheck+0x2>
     226:	b0 90 74 00 	lds	r11, 0x0074	; 0x800074 <g_passCheck+0x3>
     22a:	c0 90 75 00 	lds	r12, 0x0075	; 0x800075 <g_passCheck+0x4>
     22e:	d0 90 76 00 	lds	r13, 0x0076	; 0x800076 <g_passCheck+0x5>
     232:	e0 90 77 00 	lds	r14, 0x0077	; 0x800077 <g_passCheck+0x6>
     236:	f0 90 78 00 	lds	r15, 0x0078	; 0x800078 <g_passCheck+0x7>
     23a:	28 2d       	mov	r18, r8
     23c:	39 2d       	mov	r19, r9
     23e:	4a 2d       	mov	r20, r10
     240:	5b 2d       	mov	r21, r11
     242:	6c 2d       	mov	r22, r12
     244:	7d 2d       	mov	r23, r13
     246:	8e 2d       	mov	r24, r14
     248:	9f 2d       	mov	r25, r15
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__cmpdi2_s8>
     250:	31 f4       	brne	.+12     	; 0x25e <main+0x1cc>
		UART_sendByte(SUCCESS);/*  tells MC1 that time is first used for that module */
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
		createNewPass();/*  start to create password */
     258:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <createNewPass>
     25c:	03 c0       	rjmp	.+6      	; 0x264 <main+0x1d2>
	} else {
		UART_sendByte(ERROR);/*  tells MC1 that module used before that time*/
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
	}
	/* Start of infinity loop */
	while (1) {
		g_byte = UART_recieveByte(); /*  wait until receive number of pressed key */
     264:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
     268:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_byte>

		/* check that pressed key is '+' key to start open door mode*/
		if (g_byte == '+') {
     26c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
     270:	8b 32       	cpi	r24, 0x2B	; 43
     272:	19 f4       	brne	.+6      	; 0x27a <main+0x1e8>
			openDoor();/*  start open door mode */
     274:	0e 94 18 06 	call	0xc30	; 0xc30 <openDoor>
     278:	06 c0       	rjmp	.+12     	; 0x286 <main+0x1f4>
		} else if (g_byte == '-') { /* check that pressed key is '-' key to start change password mode*/
     27a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
     27e:	8d 32       	cpi	r24, 0x2D	; 45
     280:	11 f4       	brne	.+4      	; 0x286 <main+0x1f4>
			changePass(); /*  start change password mode */
     282:	0e 94 33 03 	call	0x666	; 0x666 <changePass>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	aa ef       	ldi	r26, 0xFA	; 250
     28c:	b3 e4       	ldi	r27, 0x43	; 67
     28e:	8f 87       	std	Y+15, r24	; 0x0f
     290:	98 8b       	std	Y+16, r25	; 0x10
     292:	a9 8b       	std	Y+17, r26	; 0x11
     294:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	4a ef       	ldi	r20, 0xFA	; 250
     29c:	54 e4       	ldi	r21, 0x44	; 68
     29e:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a0:	78 89       	ldd	r23, Y+16	; 0x10
     2a2:	89 89       	ldd	r24, Y+17	; 0x11
     2a4:	9a 89       	ldd	r25, Y+18	; 0x12
     2a6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     2aa:	6d ab       	std	Y+53, r22	; 0x35
     2ac:	7e ab       	std	Y+54, r23	; 0x36
     2ae:	8f ab       	std	Y+55, r24	; 0x37
     2b0:	98 af       	std	Y+56, r25	; 0x38
     2b2:	8d a9       	ldd	r24, Y+53	; 0x35
     2b4:	9e a9       	ldd	r25, Y+54	; 0x36
     2b6:	af a9       	ldd	r26, Y+55	; 0x37
     2b8:	b8 ad       	ldd	r27, Y+56	; 0x38
     2ba:	8b 8b       	std	Y+19, r24	; 0x13
     2bc:	9c 8b       	std	Y+20, r25	; 0x14
     2be:	ad 8b       	std	Y+21, r26	; 0x15
     2c0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e8       	ldi	r20, 0x80	; 128
     2c8:	5f e3       	ldi	r21, 0x3F	; 63
     2ca:	6b 89       	ldd	r22, Y+19	; 0x13
     2cc:	7c 89       	ldd	r23, Y+20	; 0x14
     2ce:	8d 89       	ldd	r24, Y+21	; 0x15
     2d0:	9e 89       	ldd	r25, Y+22	; 0x16
     2d2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	2c f4       	brge	.+10     	; 0x2e4 <main+0x252>
		__ticks = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	98 8f       	std	Y+24, r25	; 0x18
     2e0:	8f 8b       	std	Y+23, r24	; 0x17
     2e2:	5b c0       	rjmp	.+182    	; 0x39a <main+0x308>
	else if (__tmp > 65535)
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	3f ef       	ldi	r19, 0xFF	; 255
     2e8:	4f e7       	ldi	r20, 0x7F	; 127
     2ea:	57 e4       	ldi	r21, 0x47	; 71
     2ec:	6b 89       	ldd	r22, Y+19	; 0x13
     2ee:	7c 89       	ldd	r23, Y+20	; 0x14
     2f0:	8d 89       	ldd	r24, Y+21	; 0x15
     2f2:	9e 89       	ldd	r25, Y+22	; 0x16
     2f4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     2f8:	18 16       	cp	r1, r24
     2fa:	0c f0       	brlt	.+2      	; 0x2fe <main+0x26c>
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <main+0x2e4>
		__ticks = (uint16_t) (__ms * 10.0);
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e2       	ldi	r20, 0x20	; 32
     304:	51 e4       	ldi	r21, 0x41	; 65
     306:	6f 85       	ldd	r22, Y+15	; 0x0f
     308:	78 89       	ldd	r23, Y+16	; 0x10
     30a:	89 89       	ldd	r24, Y+17	; 0x11
     30c:	9a 89       	ldd	r25, Y+18	; 0x12
     30e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     312:	69 af       	std	Y+57, r22	; 0x39
     314:	7a af       	std	Y+58, r23	; 0x3a
     316:	8b af       	std	Y+59, r24	; 0x3b
     318:	9c af       	std	Y+60, r25	; 0x3c
     31a:	89 ad       	ldd	r24, Y+57	; 0x39
     31c:	9a ad       	ldd	r25, Y+58	; 0x3a
     31e:	ab ad       	ldd	r26, Y+59	; 0x3b
     320:	bc ad       	ldd	r27, Y+60	; 0x3c
     322:	89 a3       	std	Y+33, r24	; 0x21
     324:	9a a3       	std	Y+34, r25	; 0x22
     326:	ab a3       	std	Y+35, r26	; 0x23
     328:	bc a3       	std	Y+36, r27	; 0x24
     32a:	69 a1       	ldd	r22, Y+33	; 0x21
     32c:	7a a1       	ldd	r23, Y+34	; 0x22
     32e:	8b a1       	ldd	r24, Y+35	; 0x23
     330:	9c a1       	ldd	r25, Y+36	; 0x24
     332:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     336:	21 96       	adiw	r28, 0x01	; 1
     338:	6c af       	std	Y+60, r22	; 0x3c
     33a:	7d af       	std	Y+61, r23	; 0x3d
     33c:	8e af       	std	Y+62, r24	; 0x3e
     33e:	9f af       	std	Y+63, r25	; 0x3f
     340:	21 97       	sbiw	r28, 0x01	; 1
     342:	ad ad       	ldd	r26, Y+61	; 0x3d
     344:	be ad       	ldd	r27, Y+62	; 0x3e
     346:	b8 8f       	std	Y+24, r27	; 0x18
     348:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     34a:	10 c0       	rjmp	.+32     	; 0x36c <main+0x2da>
     34c:	88 ec       	ldi	r24, 0xC8	; 200
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	9a 8f       	std	Y+26, r25	; 0x1a
     352:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     354:	89 8d       	ldd	r24, Y+25	; 0x19
     356:	9a 8d       	ldd	r25, Y+26	; 0x1a
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x2c6>
     35c:	9a 8f       	std	Y+26, r25	; 0x1a
     35e:	89 8f       	std	Y+25, r24	; 0x19
}
     360:	00 00       	nop
			__ticks --;
     362:	8f 89       	ldd	r24, Y+23	; 0x17
     364:	98 8d       	ldd	r25, Y+24	; 0x18
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	98 8f       	std	Y+24, r25	; 0x18
     36a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     36c:	8f 89       	ldd	r24, Y+23	; 0x17
     36e:	98 8d       	ldd	r25, Y+24	; 0x18
     370:	89 2b       	or	r24, r25
     372:	61 f7       	brne	.-40     	; 0x34c <main+0x2ba>
		return;
     374:	1d c0       	rjmp	.+58     	; 0x3b0 <main+0x31e>
		__ticks = (uint16_t)__tmp;
     376:	6b 89       	ldd	r22, Y+19	; 0x13
     378:	7c 89       	ldd	r23, Y+20	; 0x14
     37a:	8d 89       	ldd	r24, Y+21	; 0x15
     37c:	9e 89       	ldd	r25, Y+22	; 0x16
     37e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     382:	25 96       	adiw	r28, 0x05	; 5
     384:	6c af       	std	Y+60, r22	; 0x3c
     386:	7d af       	std	Y+61, r23	; 0x3d
     388:	8e af       	std	Y+62, r24	; 0x3e
     38a:	9f af       	std	Y+63, r25	; 0x3f
     38c:	25 97       	sbiw	r28, 0x05	; 5
     38e:	23 96       	adiw	r28, 0x03	; 3
     390:	ee ad       	ldd	r30, Y+62	; 0x3e
     392:	ff ad       	ldd	r31, Y+63	; 0x3f
     394:	23 97       	sbiw	r28, 0x03	; 3
     396:	f8 8f       	std	Y+24, r31	; 0x18
     398:	ef 8b       	std	Y+23, r30	; 0x17
     39a:	8f 89       	ldd	r24, Y+23	; 0x17
     39c:	98 8d       	ldd	r25, Y+24	; 0x18
     39e:	9c 8f       	std	Y+28, r25	; 0x1c
     3a0:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     3a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x314>
     3aa:	9c 8f       	std	Y+28, r25	; 0x1c
     3ac:	8b 8f       	std	Y+27, r24	; 0x1b
}
     3ae:	00 00       	nop
		g_byte = UART_recieveByte(); /*  wait until receive number of pressed key */
     3b0:	59 cf       	rjmp	.-334    	; 0x264 <main+0x1d2>

000003b2 <createNewPass>:


/*
 * Description: Function to create password at first used or change password .
 */
void createNewPass(void) {
     3b2:	2f 92       	push	r2
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	a2 97       	sbiw	r28, 0x22	; 34
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
	do {
		enterPass(&g_pass); /* receive first password*/
     3e6:	89 e6       	ldi	r24, 0x69	; 105
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 4d 04 	call	0x89a	; 0x89a <enterPass>
		enterPass(&g_passCheck); /* receive second password*/
     3ee:	81 e7       	ldi	r24, 0x71	; 113
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 4d 04 	call	0x89a	; 0x89a <enterPass>
		if (g_pass == g_passCheck && g_pass != 0) { /* check that two password equal and pass not equal zero*/
     3f6:	a0 90 69 00 	lds	r10, 0x0069	; 0x800069 <g_pass>
     3fa:	b0 90 6a 00 	lds	r11, 0x006A	; 0x80006a <g_pass+0x1>
     3fe:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <g_pass+0x2>
     402:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <g_pass+0x3>
     406:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <g_pass+0x4>
     40a:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <g_pass+0x5>
     40e:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <g_pass+0x6>
     412:	10 91 70 00 	lds	r17, 0x0070	; 0x800070 <g_pass+0x7>
     416:	20 90 71 00 	lds	r2, 0x0071	; 0x800071 <g_passCheck>
     41a:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <g_passCheck+0x1>
     41e:	40 90 73 00 	lds	r4, 0x0073	; 0x800073 <g_passCheck+0x2>
     422:	50 90 74 00 	lds	r5, 0x0074	; 0x800074 <g_passCheck+0x3>
     426:	60 90 75 00 	lds	r6, 0x0075	; 0x800075 <g_passCheck+0x4>
     42a:	70 90 76 00 	lds	r7, 0x0076	; 0x800076 <g_passCheck+0x5>
     42e:	80 90 77 00 	lds	r8, 0x0077	; 0x800077 <g_passCheck+0x6>
     432:	90 90 78 00 	lds	r9, 0x0078	; 0x800078 <g_passCheck+0x7>
     436:	2a 2d       	mov	r18, r10
     438:	3b 2d       	mov	r19, r11
     43a:	4c 2d       	mov	r20, r12
     43c:	5d 2d       	mov	r21, r13
     43e:	6e 2d       	mov	r22, r14
     440:	7f 2d       	mov	r23, r15
     442:	80 2f       	mov	r24, r16
     444:	91 2f       	mov	r25, r17
     446:	a2 2c       	mov	r10, r2
     448:	b3 2c       	mov	r11, r3
     44a:	c4 2c       	mov	r12, r4
     44c:	d5 2c       	mov	r13, r5
     44e:	e6 2c       	mov	r14, r6
     450:	f7 2c       	mov	r15, r7
     452:	08 2d       	mov	r16, r8
     454:	19 2d       	mov	r17, r9
     456:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__cmpdi2>
     45a:	01 f5       	brne	.+64     	; 0x49c <__stack+0x3d>
     45c:	80 90 69 00 	lds	r8, 0x0069	; 0x800069 <g_pass>
     460:	90 90 6a 00 	lds	r9, 0x006A	; 0x80006a <g_pass+0x1>
     464:	a0 90 6b 00 	lds	r10, 0x006B	; 0x80006b <g_pass+0x2>
     468:	b0 90 6c 00 	lds	r11, 0x006C	; 0x80006c <g_pass+0x3>
     46c:	c0 90 6d 00 	lds	r12, 0x006D	; 0x80006d <g_pass+0x4>
     470:	d0 90 6e 00 	lds	r13, 0x006E	; 0x80006e <g_pass+0x5>
     474:	e0 90 6f 00 	lds	r14, 0x006F	; 0x80006f <g_pass+0x6>
     478:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <g_pass+0x7>
     47c:	28 2d       	mov	r18, r8
     47e:	39 2d       	mov	r19, r9
     480:	4a 2d       	mov	r20, r10
     482:	5b 2d       	mov	r21, r11
     484:	6c 2d       	mov	r22, r12
     486:	7d 2d       	mov	r23, r13
     488:	8e 2d       	mov	r24, r14
     48a:	9f 2d       	mov	r25, r15
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__cmpdi2_s8>
     492:	21 f0       	breq	.+8      	; 0x49c <__stack+0x3d>
			UART_sendByte(SUCCESS); /* tells MC1 that password is accepted & store in EEPROm*/
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__stack+0x43>
		} else {
			UART_sendByte(ERROR);/* tells MC1 that password is not accepted */
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	aa e7       	ldi	r26, 0x7A	; 122
     4a8:	b4 e4       	ldi	r27, 0x44	; 68
     4aa:	89 83       	std	Y+1, r24	; 0x01
     4ac:	9a 83       	std	Y+2, r25	; 0x02
     4ae:	ab 83       	std	Y+3, r26	; 0x03
     4b0:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	4a ef       	ldi	r20, 0xFA	; 250
     4b8:	54 e4       	ldi	r21, 0x44	; 68
     4ba:	69 81       	ldd	r22, Y+1	; 0x01
     4bc:	7a 81       	ldd	r23, Y+2	; 0x02
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     4c6:	6b 8b       	std	Y+19, r22	; 0x13
     4c8:	7c 8b       	std	Y+20, r23	; 0x14
     4ca:	8d 8b       	std	Y+21, r24	; 0x15
     4cc:	9e 8b       	std	Y+22, r25	; 0x16
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	ad 89       	ldd	r26, Y+21	; 0x15
     4d4:	be 89       	ldd	r27, Y+22	; 0x16
     4d6:	8d 83       	std	Y+5, r24	; 0x05
     4d8:	9e 83       	std	Y+6, r25	; 0x06
     4da:	af 83       	std	Y+7, r26	; 0x07
     4dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e8       	ldi	r20, 0x80	; 128
     4e4:	5f e3       	ldi	r21, 0x3F	; 63
     4e6:	6d 81       	ldd	r22, Y+5	; 0x05
     4e8:	7e 81       	ldd	r23, Y+6	; 0x06
     4ea:	8f 81       	ldd	r24, Y+7	; 0x07
     4ec:	98 85       	ldd	r25, Y+8	; 0x08
     4ee:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     4f2:	88 23       	and	r24, r24
     4f4:	2c f4       	brge	.+10     	; 0x500 <__stack+0xa1>
		__ticks = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9a 87       	std	Y+10, r25	; 0x0a
     4fc:	89 87       	std	Y+9, r24	; 0x09
     4fe:	54 c0       	rjmp	.+168    	; 0x5a8 <__stack+0x149>
	else if (__tmp > 65535)
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	3f ef       	ldi	r19, 0xFF	; 255
     504:	4f e7       	ldi	r20, 0x7F	; 127
     506:	57 e4       	ldi	r21, 0x47	; 71
     508:	6d 81       	ldd	r22, Y+5	; 0x05
     50a:	7e 81       	ldd	r23, Y+6	; 0x06
     50c:	8f 81       	ldd	r24, Y+7	; 0x07
     50e:	98 85       	ldd	r25, Y+8	; 0x08
     510:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     514:	18 16       	cp	r1, r24
     516:	d4 f5       	brge	.+116    	; 0x58c <__stack+0x12d>
		__ticks = (uint16_t) (__ms * 10.0);
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e2       	ldi	r20, 0x20	; 32
     51e:	51 e4       	ldi	r21, 0x41	; 65
     520:	69 81       	ldd	r22, Y+1	; 0x01
     522:	7a 81       	ldd	r23, Y+2	; 0x02
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     52c:	6f 8b       	std	Y+23, r22	; 0x17
     52e:	78 8f       	std	Y+24, r23	; 0x18
     530:	89 8f       	std	Y+25, r24	; 0x19
     532:	9a 8f       	std	Y+26, r25	; 0x1a
     534:	8f 89       	ldd	r24, Y+23	; 0x17
     536:	98 8d       	ldd	r25, Y+24	; 0x18
     538:	a9 8d       	ldd	r26, Y+25	; 0x19
     53a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     53c:	8f 87       	std	Y+15, r24	; 0x0f
     53e:	98 8b       	std	Y+16, r25	; 0x10
     540:	a9 8b       	std	Y+17, r26	; 0x11
     542:	ba 8b       	std	Y+18, r27	; 0x12
     544:	6f 85       	ldd	r22, Y+15	; 0x0f
     546:	78 89       	ldd	r23, Y+16	; 0x10
     548:	89 89       	ldd	r24, Y+17	; 0x11
     54a:	9a 89       	ldd	r25, Y+18	; 0x12
     54c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     550:	6b 8f       	std	Y+27, r22	; 0x1b
     552:	7c 8f       	std	Y+28, r23	; 0x1c
     554:	8d 8f       	std	Y+29, r24	; 0x1d
     556:	9e 8f       	std	Y+30, r25	; 0x1e
     558:	ab 8d       	ldd	r26, Y+27	; 0x1b
     55a:	bc 8d       	ldd	r27, Y+28	; 0x1c
     55c:	ba 87       	std	Y+10, r27	; 0x0a
     55e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     560:	10 c0       	rjmp	.+32     	; 0x582 <__stack+0x123>
     562:	88 ec       	ldi	r24, 0xC8	; 200
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9c 87       	std	Y+12, r25	; 0x0c
     568:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     56a:	8b 85       	ldd	r24, Y+11	; 0x0b
     56c:	9c 85       	ldd	r25, Y+12	; 0x0c
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <__stack+0x10f>
     572:	9c 87       	std	Y+12, r25	; 0x0c
     574:	8b 87       	std	Y+11, r24	; 0x0b
}
     576:	00 00       	nop
			__ticks --;
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	9a 87       	std	Y+10, r25	; 0x0a
     580:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     582:	89 85       	ldd	r24, Y+9	; 0x09
     584:	9a 85       	ldd	r25, Y+10	; 0x0a
     586:	89 2b       	or	r24, r25
     588:	61 f7       	brne	.-40     	; 0x562 <__stack+0x103>
		return;
     58a:	19 c0       	rjmp	.+50     	; 0x5be <__stack+0x15f>
		__ticks = (uint16_t)__tmp;
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	7e 81       	ldd	r23, Y+6	; 0x06
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     598:	6f 8f       	std	Y+31, r22	; 0x1f
     59a:	78 a3       	std	Y+32, r23	; 0x20
     59c:	89 a3       	std	Y+33, r24	; 0x21
     59e:	9a a3       	std	Y+34, r25	; 0x22
     5a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5a2:	98 a1       	ldd	r25, Y+32	; 0x20
     5a4:	9a 87       	std	Y+10, r25	; 0x0a
     5a6:	89 87       	std	Y+9, r24	; 0x09
     5a8:	89 85       	ldd	r24, Y+9	; 0x09
     5aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ac:	9e 87       	std	Y+14, r25	; 0x0e
     5ae:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     5b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__stack+0x155>
     5b8:	9e 87       	std	Y+14, r25	; 0x0e
     5ba:	8d 87       	std	Y+13, r24	; 0x0d
}
     5bc:	00 00       	nop
		}
		_delay_ms(1000); /*	wait one-half second to synchronize with HMI-ECU */
	} while (g_pass != g_passCheck); /* while password not accepted do that again*/
     5be:	a0 90 69 00 	lds	r10, 0x0069	; 0x800069 <g_pass>
     5c2:	b0 90 6a 00 	lds	r11, 0x006A	; 0x80006a <g_pass+0x1>
     5c6:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <g_pass+0x2>
     5ca:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <g_pass+0x3>
     5ce:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <g_pass+0x4>
     5d2:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <g_pass+0x5>
     5d6:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <g_pass+0x6>
     5da:	10 91 70 00 	lds	r17, 0x0070	; 0x800070 <g_pass+0x7>
     5de:	20 90 71 00 	lds	r2, 0x0071	; 0x800071 <g_passCheck>
     5e2:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <g_passCheck+0x1>
     5e6:	40 90 73 00 	lds	r4, 0x0073	; 0x800073 <g_passCheck+0x2>
     5ea:	50 90 74 00 	lds	r5, 0x0074	; 0x800074 <g_passCheck+0x3>
     5ee:	60 90 75 00 	lds	r6, 0x0075	; 0x800075 <g_passCheck+0x4>
     5f2:	70 90 76 00 	lds	r7, 0x0076	; 0x800076 <g_passCheck+0x5>
     5f6:	80 90 77 00 	lds	r8, 0x0077	; 0x800077 <g_passCheck+0x6>
     5fa:	90 90 78 00 	lds	r9, 0x0078	; 0x800078 <g_passCheck+0x7>
     5fe:	2a 2d       	mov	r18, r10
     600:	3b 2d       	mov	r19, r11
     602:	4c 2d       	mov	r20, r12
     604:	5d 2d       	mov	r21, r13
     606:	6e 2d       	mov	r22, r14
     608:	7f 2d       	mov	r23, r15
     60a:	80 2f       	mov	r24, r16
     60c:	91 2f       	mov	r25, r17
     60e:	a2 2c       	mov	r10, r2
     610:	b3 2c       	mov	r11, r3
     612:	c4 2c       	mov	r12, r4
     614:	d5 2c       	mov	r13, r5
     616:	e6 2c       	mov	r14, r6
     618:	f7 2c       	mov	r15, r7
     61a:	08 2d       	mov	r16, r8
     61c:	19 2d       	mov	r17, r9
     61e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__cmpdi2>
     622:	09 f0       	breq	.+2      	; 0x626 <__stack+0x1c7>
     624:	e0 ce       	rjmp	.-576    	; 0x3e6 <createNewPass+0x34>
	writePassInEEPROM(&addPass, &g_pass); /* store password in EEPROM */
     626:	69 e6       	ldi	r22, 0x69	; 105
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	85 e6       	ldi	r24, 0x65	; 101
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 a1 08 	call	0x1142	; 0x1142 <writePassInEEPROM>
}
     632:	00 00       	nop
     634:	a2 96       	adiw	r28, 0x22	; 34
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	4f 90       	pop	r4
     660:	3f 90       	pop	r3
     662:	2f 90       	pop	r2
     664:	08 95       	ret

00000666 <changePass>:

/*
 * Description: Function use to check that password enter is equal to password or not to open garage .
 */
void changePass(void) {
     666:	2f 92       	push	r2
     668:	3f 92       	push	r3
     66a:	4f 92       	push	r4
     66c:	5f 92       	push	r5
     66e:	6f 92       	push	r6
     670:	7f 92       	push	r7
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62

	enterPass(&g_pass); /* receive password from user*/
     68e:	89 e6       	ldi	r24, 0x69	; 105
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 4d 04 	call	0x89a	; 0x89a <enterPass>
	readPassFromEEPROM(&addPass, &g_passCheck); /*  read password from EEPROM */
     696:	61 e7       	ldi	r22, 0x71	; 113
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	85 e6       	ldi	r24, 0x65	; 101
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 a3 09 	call	0x1346	; 0x1346 <readPassFromEEPROM>
	if (g_pass == g_passCheck) { /* check that user enter correct password or not*/
     6a2:	a0 90 69 00 	lds	r10, 0x0069	; 0x800069 <g_pass>
     6a6:	b0 90 6a 00 	lds	r11, 0x006A	; 0x80006a <g_pass+0x1>
     6aa:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <g_pass+0x2>
     6ae:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <g_pass+0x3>
     6b2:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <g_pass+0x4>
     6b6:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <g_pass+0x5>
     6ba:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <g_pass+0x6>
     6be:	10 91 70 00 	lds	r17, 0x0070	; 0x800070 <g_pass+0x7>
     6c2:	20 90 71 00 	lds	r2, 0x0071	; 0x800071 <g_passCheck>
     6c6:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <g_passCheck+0x1>
     6ca:	40 90 73 00 	lds	r4, 0x0073	; 0x800073 <g_passCheck+0x2>
     6ce:	50 90 74 00 	lds	r5, 0x0074	; 0x800074 <g_passCheck+0x3>
     6d2:	60 90 75 00 	lds	r6, 0x0075	; 0x800075 <g_passCheck+0x4>
     6d6:	70 90 76 00 	lds	r7, 0x0076	; 0x800076 <g_passCheck+0x5>
     6da:	80 90 77 00 	lds	r8, 0x0077	; 0x800077 <g_passCheck+0x6>
     6de:	90 90 78 00 	lds	r9, 0x0078	; 0x800078 <g_passCheck+0x7>
     6e2:	2a 2d       	mov	r18, r10
     6e4:	3b 2d       	mov	r19, r11
     6e6:	4c 2d       	mov	r20, r12
     6e8:	5d 2d       	mov	r21, r13
     6ea:	6e 2d       	mov	r22, r14
     6ec:	7f 2d       	mov	r23, r15
     6ee:	80 2f       	mov	r24, r16
     6f0:	91 2f       	mov	r25, r17
     6f2:	a2 2c       	mov	r10, r2
     6f4:	b3 2c       	mov	r11, r3
     6f6:	c4 2c       	mov	r12, r4
     6f8:	d5 2c       	mov	r13, r5
     6fa:	e6 2c       	mov	r14, r6
     6fc:	f7 2c       	mov	r15, r7
     6fe:	08 2d       	mov	r16, r8
     700:	19 2d       	mov	r17, r9
     702:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__cmpdi2>
     706:	31 f4       	brne	.+12     	; 0x714 <changePass+0xae>
		UART_sendByte(SUCCESS); /*  tells HMI_ECU that user enter correct password */
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
		createNewPass(); /*  start create new password */
     70e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <createNewPass>

	} else {
		UART_sendByte(ERROR); /*  tells HMI_ECU that user enter wrong password */
	}
}
     712:	03 c0       	rjmp	.+6      	; 0x71a <changePass+0xb4>
		UART_sendByte(ERROR); /*  tells HMI_ECU that user enter wrong password */
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
}
     71a:	00 00       	nop
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	7f 90       	pop	r7
     736:	6f 90       	pop	r6
     738:	5f 90       	pop	r5
     73a:	4f 90       	pop	r4
     73c:	3f 90       	pop	r3
     73e:	2f 90       	pop	r2
     740:	08 95       	ret

00000742 <closeDoor>:

/*
 * Description: Function check that garage open first then close it .
 */
void closeDoor(void) {
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != '#'); /*  wait until MC1 is ready */
     74a:	00 00       	nop
     74c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
     750:	83 32       	cpi	r24, 0x23	; 35
     752:	e1 f7       	brne	.-8      	; 0x74c <closeDoor+0xa>

	while (UART_recieveByte() != '+') { /*  wait until user press in '+' key to start close garage */
     754:	03 c0       	rjmp	.+6      	; 0x75c <closeDoor+0x1a>

		UART_sendByte(ERROR); /* tells MHI-ECU that user press on wrong key*/
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
	while (UART_recieveByte() != '+') { /*  wait until user press in '+' key to start close garage */
     75c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
     760:	8b 32       	cpi	r24, 0x2B	; 43
     762:	c9 f7       	brne	.-14     	; 0x756 <closeDoor+0x14>
	}
	/* tells MHI-ECU that user press on correct key and will start to close garage*/
	UART_sendByte(SUCCESS);
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
	/* initialize timer to start  count*/
	TIMER_init(&timePtr);
     76a:	81 e6       	ldi	r24, 0x61	; 97
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 15 0c 	call	0x182a	; 0x182a <TIMER_init>

	/* edit output of motor pins to rotate motor anti-clockwise */
	SET_BIT(PORTD, PD5);
     772:	82 e3       	ldi	r24, 0x32	; 50
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	20 81       	ld	r18, Z
     77a:	82 e3       	ldi	r24, 0x32	; 50
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	20 62       	ori	r18, 0x20	; 32
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18
	CLEAR_BIT(PORTD, PD6);
     784:	82 e3       	ldi	r24, 0x32	; 50
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	fc 01       	movw	r30, r24
     78a:	20 81       	ld	r18, Z
     78c:	82 e3       	ldi	r24, 0x32	; 50
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	2f 7b       	andi	r18, 0xBF	; 191
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18

	timeIndex = 0; /* Initialize timer interrupt counter */
     796:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	g_state = CLOSING; /* indicate that garage in closing mode */
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <g_state>
	while (g_state == CLOSING); /*  wait until garage mode change to close mode */
     7a0:	00 00       	nop
     7a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	e1 f3       	breq	.-8      	; 0x7a2 <closeDoor+0x60>
}
     7aa:	00 00       	nop
     7ac:	00 00       	nop
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <TimerControl>:


/*
 * Description: it is callBack Function that call by Timer when interrupt has happen .
 */
void TimerControl(void) {
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	/* Increment to show how many timer1 interrupt happen after initialize Timer  */
	timeIndex++;
     7bc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

	/* check first that garage state is closing to close it . */
	if (g_state == CLOSING) {
     7c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	11 f5       	brne	.+68     	; 0x812 <TimerControl+0x5e>

		/* check second that  time count equal ( 3 time * 5 second )15 second after timer initialize . */
		if (timeIndex >= 3) {
     7ce:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	08 f4       	brcc	.+2      	; 0x7d8 <TimerControl+0x24>
     7d6:	5d c0       	rjmp	.+186    	; 0x892 <TimerControl+0xde>

			/* Clear Timer1 Register & active Sleep mode For Timer1.*/
			TIMER_Deinit();
     7d8:	0e 94 83 0c 	call	0x1906	; 0x1906 <TIMER_Deinit>

			/* Organize pins to stop motor rotate  */
			CLEAR_BIT(PORTD, PD5);
     7dc:	82 e3       	ldi	r24, 0x32	; 50
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 81       	ld	r18, Z
     7e4:	82 e3       	ldi	r24, 0x32	; 50
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2f 7d       	andi	r18, 0xDF	; 223
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
			CLEAR_BIT(PORTD, PD6);
     7ee:	82 e3       	ldi	r24, 0x32	; 50
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 81       	ld	r18, Z
     7f6:	82 e3       	ldi	r24, 0x32	; 50
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	2f 7b       	andi	r18, 0xBF	; 191
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 83       	st	Z, r18

			g_state = CLOSE;/*show state of garage door now is Close*/
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <g_state>

			UART_sendByte(CLOSE); /*  Alerts HMI_ECU that  garage is close  */
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>

			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
     80c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
			g_state = OPEN; /*show state of garage door now is open*/
			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
		}
	}

}
     810:	40 c0       	rjmp	.+128    	; 0x892 <TimerControl+0xde>
	} else if (g_state == BUZZER) { /* check first that garage state is in BUZZER mode */
     812:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	c1 f4       	brne	.+48     	; 0x84a <TimerControl+0x96>
		if (timeIndex >= 12) {
     81a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     81e:	8c 30       	cpi	r24, 0x0C	; 12
     820:	c0 f1       	brcs	.+112    	; 0x892 <TimerControl+0xde>
			UART_sendByte(CLOSE); /* tells HMI-ECU that garage is still close after buzzer stop*/
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
			TIMER_Deinit(); /* Clear Timer1 Register & active Sleep mode For Timer1.*/
     828:	0e 94 83 0c 	call	0x1906	; 0x1906 <TIMER_Deinit>
			CLEAR_BIT(PORTD, PD7);
     82c:	82 e3       	ldi	r24, 0x32	; 50
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	fc 01       	movw	r30, r24
     832:	20 81       	ld	r18, Z
     834:	82 e3       	ldi	r24, 0x32	; 50
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	2f 77       	andi	r18, 0x7F	; 127
     83a:	fc 01       	movw	r30, r24
     83c:	20 83       	st	Z, r18
			g_state = CLOSE; /*show state of garage door now is Close*/
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <g_state>
			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
     844:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
}
     848:	24 c0       	rjmp	.+72     	; 0x892 <TimerControl+0xde>
	} else if (g_state == OPENING) { /* check first that garage state is in opening mode */
     84a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     84e:	88 23       	and	r24, r24
     850:	01 f5       	brne	.+64     	; 0x892 <TimerControl+0xde>
		if (timeIndex >= 3) {
     852:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     856:	83 30       	cpi	r24, 0x03	; 3
     858:	e0 f0       	brcs	.+56     	; 0x892 <TimerControl+0xde>
			TIMER_Deinit();
     85a:	0e 94 83 0c 	call	0x1906	; 0x1906 <TIMER_Deinit>
			UART_sendByte(OPEN); /* tells HMI-ECU that garage become open */
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
			CLEAR_BIT(PORTD, PD5);/* Clear Timer1 Register & active Sleep mode For Timer1.*/
     864:	82 e3       	ldi	r24, 0x32	; 50
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	fc 01       	movw	r30, r24
     86a:	20 81       	ld	r18, Z
     86c:	82 e3       	ldi	r24, 0x32	; 50
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2f 7d       	andi	r18, 0xDF	; 223
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
			CLEAR_BIT(PORTD, PD6);
     876:	82 e3       	ldi	r24, 0x32	; 50
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	fc 01       	movw	r30, r24
     87c:	20 81       	ld	r18, Z
     87e:	82 e3       	ldi	r24, 0x32	; 50
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	2f 7b       	andi	r18, 0xBF	; 191
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
			g_state = OPEN; /*show state of garage door now is open*/
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <g_state>
			timeIndex = 0; /*  reset variable to start count from zero when timer initialize again */
     88e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
}
     892:	00 00       	nop
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <enterPass>:

/*
 * Description: Function receive Password From HMI-ECU  &
 * pointer to select pass store variable .
 */
void enterPass(uint64 *data) {
     89a:	2f 92       	push	r2
     89c:	3f 92       	push	r3
     89e:	4f 92       	push	r4
     8a0:	5f 92       	push	r5
     8a2:	6f 92       	push	r6
     8a4:	7f 92       	push	r7
     8a6:	8f 92       	push	r8
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	c4 54       	subi	r28, 0x44	; 68
     8c4:	d1 09       	sbc	r29, r1
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	98 8b       	std	Y+16, r25	; 0x10
     8d2:	8f 87       	std	Y+15, r24	; 0x0f
	(*data) = 0; /*  set variable that will receive password to zero */
     8d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d6:	98 89       	ldd	r25, Y+16	; 0x10
     8d8:	dc 01       	movw	r26, r24
     8da:	1c 92       	st	X, r1
     8dc:	fc 01       	movw	r30, r24
     8de:	11 82       	std	Z+1, r1	; 0x01
     8e0:	dc 01       	movw	r26, r24
     8e2:	12 96       	adiw	r26, 0x02	; 2
     8e4:	1c 92       	st	X, r1
     8e6:	fc 01       	movw	r30, r24
     8e8:	13 82       	std	Z+3, r1	; 0x03
     8ea:	dc 01       	movw	r26, r24
     8ec:	14 96       	adiw	r26, 0x04	; 4
     8ee:	1c 92       	st	X, r1
     8f0:	fc 01       	movw	r30, r24
     8f2:	15 82       	std	Z+5, r1	; 0x05
     8f4:	dc 01       	movw	r26, r24
     8f6:	16 96       	adiw	r26, 0x06	; 6
     8f8:	1c 92       	st	X, r1
     8fa:	fc 01       	movw	r30, r24
     8fc:	17 82       	std	Z+7, r1	; 0x07
	do {
		while (UART_recieveByte() != '*'); /*  wait until MC1 is ready */
     8fe:	00 00       	nop
     900:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
     904:	8a 32       	cpi	r24, 0x2A	; 42
     906:	e1 f7       	brne	.-8      	; 0x900 <enterPass+0x66>
		g_byte = UART_recieveByte(); /*  wait until receive byte from HMI_ECU  */
     908:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
     90c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <g_byte>

		if (g_byte <= 9) { /* check that key press is number or option key */
     910:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
     914:	8a 30       	cpi	r24, 0x0A	; 10
     916:	08 f0       	brcs	.+2      	; 0x91a <enterPass+0x80>
     918:	b5 c0       	rjmp	.+362    	; 0xa84 <enterPass+0x1ea>
			(*data) = ((*data) * 10) + g_byte; /* store key in first digit in password & shift pass one digit to lift */
     91a:	8f 85       	ldd	r24, Y+15	; 0x0f
     91c:	98 89       	ldd	r25, Y+16	; 0x10
     91e:	dc 01       	movw	r26, r24
     920:	bc 91       	ld	r27, X
     922:	b9 8b       	std	Y+17, r27	; 0x11
     924:	fc 01       	movw	r30, r24
     926:	f1 81       	ldd	r31, Z+1	; 0x01
     928:	fa 8b       	std	Y+18, r31	; 0x12
     92a:	dc 01       	movw	r26, r24
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	bc 91       	ld	r27, X
     930:	bb 8b       	std	Y+19, r27	; 0x13
     932:	fc 01       	movw	r30, r24
     934:	f3 81       	ldd	r31, Z+3	; 0x03
     936:	fc 8b       	std	Y+20, r31	; 0x14
     938:	dc 01       	movw	r26, r24
     93a:	14 96       	adiw	r26, 0x04	; 4
     93c:	bc 91       	ld	r27, X
     93e:	bd 8b       	std	Y+21, r27	; 0x15
     940:	fc 01       	movw	r30, r24
     942:	f5 81       	ldd	r31, Z+5	; 0x05
     944:	fe 8b       	std	Y+22, r31	; 0x16
     946:	dc 01       	movw	r26, r24
     948:	16 96       	adiw	r26, 0x06	; 6
     94a:	bc 91       	ld	r27, X
     94c:	bf 8b       	std	Y+23, r27	; 0x17
     94e:	fc 01       	movw	r30, r24
     950:	f7 81       	ldd	r31, Z+7	; 0x07
     952:	f8 8f       	std	Y+24, r31	; 0x18
     954:	89 88       	ldd	r8, Y+17	; 0x11
     956:	9a 88       	ldd	r9, Y+18	; 0x12
     958:	ab 88       	ldd	r10, Y+19	; 0x13
     95a:	bc 88       	ldd	r11, Y+20	; 0x14
     95c:	cd 88       	ldd	r12, Y+21	; 0x15
     95e:	de 88       	ldd	r13, Y+22	; 0x16
     960:	ef 88       	ldd	r14, Y+23	; 0x17
     962:	f8 8c       	ldd	r15, Y+24	; 0x18
     964:	28 2d       	mov	r18, r8
     966:	39 2d       	mov	r19, r9
     968:	4a 2d       	mov	r20, r10
     96a:	5b 2d       	mov	r21, r11
     96c:	6c 2d       	mov	r22, r12
     96e:	7d 2d       	mov	r23, r13
     970:	8e 2d       	mov	r24, r14
     972:	9f 2d       	mov	r25, r15
     974:	02 e0       	ldi	r16, 0x02	; 2
     976:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__ashldi3>
     97a:	2d a3       	std	Y+37, r18	; 0x25
     97c:	3e a3       	std	Y+38, r19	; 0x26
     97e:	4f a3       	std	Y+39, r20	; 0x27
     980:	58 a7       	std	Y+40, r21	; 0x28
     982:	69 a7       	std	Y+41, r22	; 0x29
     984:	7a a7       	std	Y+42, r23	; 0x2a
     986:	8b a7       	std	Y+43, r24	; 0x2b
     988:	9c a7       	std	Y+44, r25	; 0x2c
     98a:	8d a0       	ldd	r8, Y+37	; 0x25
     98c:	9e a0       	ldd	r9, Y+38	; 0x26
     98e:	af a0       	ldd	r10, Y+39	; 0x27
     990:	b8 a4       	ldd	r11, Y+40	; 0x28
     992:	c9 a4       	ldd	r12, Y+41	; 0x29
     994:	da a4       	ldd	r13, Y+42	; 0x2a
     996:	eb a4       	ldd	r14, Y+43	; 0x2b
     998:	fc a4       	ldd	r15, Y+44	; 0x2c
     99a:	28 2d       	mov	r18, r8
     99c:	39 2d       	mov	r19, r9
     99e:	4a 2d       	mov	r20, r10
     9a0:	5b 2d       	mov	r21, r11
     9a2:	6c 2d       	mov	r22, r12
     9a4:	7d 2d       	mov	r23, r13
     9a6:	8e 2d       	mov	r24, r14
     9a8:	9f 2d       	mov	r25, r15
     9aa:	a9 88       	ldd	r10, Y+17	; 0x11
     9ac:	ba 88       	ldd	r11, Y+18	; 0x12
     9ae:	cb 88       	ldd	r12, Y+19	; 0x13
     9b0:	dc 88       	ldd	r13, Y+20	; 0x14
     9b2:	ed 88       	ldd	r14, Y+21	; 0x15
     9b4:	fe 88       	ldd	r15, Y+22	; 0x16
     9b6:	0f 89       	ldd	r16, Y+23	; 0x17
     9b8:	18 8d       	ldd	r17, Y+24	; 0x18
     9ba:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__adddi3>
     9be:	82 2e       	mov	r8, r18
     9c0:	93 2e       	mov	r9, r19
     9c2:	a4 2e       	mov	r10, r20
     9c4:	b5 2e       	mov	r11, r21
     9c6:	c6 2e       	mov	r12, r22
     9c8:	d7 2e       	mov	r13, r23
     9ca:	e8 2e       	mov	r14, r24
     9cc:	f9 2e       	mov	r15, r25
     9ce:	28 2d       	mov	r18, r8
     9d0:	39 2d       	mov	r19, r9
     9d2:	4a 2d       	mov	r20, r10
     9d4:	5b 2d       	mov	r21, r11
     9d6:	6c 2d       	mov	r22, r12
     9d8:	7d 2d       	mov	r23, r13
     9da:	8e 2d       	mov	r24, r14
     9dc:	9f 2d       	mov	r25, r15
     9de:	01 e0       	ldi	r16, 0x01	; 1
     9e0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__ashldi3>
     9e4:	2d a7       	std	Y+45, r18	; 0x2d
     9e6:	3e a7       	std	Y+46, r19	; 0x2e
     9e8:	4f a7       	std	Y+47, r20	; 0x2f
     9ea:	58 ab       	std	Y+48, r21	; 0x30
     9ec:	69 ab       	std	Y+49, r22	; 0x31
     9ee:	7a ab       	std	Y+50, r23	; 0x32
     9f0:	8b ab       	std	Y+51, r24	; 0x33
     9f2:	9c ab       	std	Y+52, r25	; 0x34
     9f4:	8d a4       	ldd	r8, Y+45	; 0x2d
     9f6:	9e a4       	ldd	r9, Y+46	; 0x2e
     9f8:	af a4       	ldd	r10, Y+47	; 0x2f
     9fa:	b8 a8       	ldd	r11, Y+48	; 0x30
     9fc:	c9 a8       	ldd	r12, Y+49	; 0x31
     9fe:	da a8       	ldd	r13, Y+50	; 0x32
     a00:	eb a8       	ldd	r14, Y+51	; 0x33
     a02:	fc a8       	ldd	r15, Y+52	; 0x34
     a04:	89 8e       	std	Y+25, r8	; 0x19
     a06:	9a 8e       	std	Y+26, r9	; 0x1a
     a08:	ab 8e       	std	Y+27, r10	; 0x1b
     a0a:	bc 8e       	std	Y+28, r11	; 0x1c
     a0c:	cd 8e       	std	Y+29, r12	; 0x1d
     a0e:	de 8e       	std	Y+30, r13	; 0x1e
     a10:	ef 8e       	std	Y+31, r14	; 0x1f
     a12:	f8 a2       	std	Y+32, r15	; 0x20
     a14:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
     a18:	28 2e       	mov	r2, r24
     a1a:	31 2c       	mov	r3, r1
     a1c:	41 2c       	mov	r4, r1
     a1e:	51 2c       	mov	r5, r1
     a20:	61 2c       	mov	r6, r1
     a22:	71 2c       	mov	r7, r1
     a24:	43 01       	movw	r8, r6
     a26:	29 8d       	ldd	r18, Y+25	; 0x19
     a28:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a2a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a2c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a30:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a32:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a34:	98 a1       	ldd	r25, Y+32	; 0x20
     a36:	a2 2c       	mov	r10, r2
     a38:	b3 2c       	mov	r11, r3
     a3a:	c4 2c       	mov	r12, r4
     a3c:	d5 2c       	mov	r13, r5
     a3e:	e6 2c       	mov	r14, r6
     a40:	f7 2c       	mov	r15, r7
     a42:	08 2d       	mov	r16, r8
     a44:	19 2d       	mov	r17, r9
     a46:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__adddi3>
     a4a:	82 2e       	mov	r8, r18
     a4c:	93 2e       	mov	r9, r19
     a4e:	a4 2e       	mov	r10, r20
     a50:	b5 2e       	mov	r11, r21
     a52:	c6 2e       	mov	r12, r22
     a54:	d7 2e       	mov	r13, r23
     a56:	e8 2e       	mov	r14, r24
     a58:	f9 2e       	mov	r15, r25
     a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a5c:	98 89       	ldd	r25, Y+16	; 0x10
     a5e:	dc 01       	movw	r26, r24
     a60:	8c 92       	st	X, r8
     a62:	fc 01       	movw	r30, r24
     a64:	91 82       	std	Z+1, r9	; 0x01
     a66:	dc 01       	movw	r26, r24
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	ac 92       	st	X, r10
     a6c:	fc 01       	movw	r30, r24
     a6e:	b3 82       	std	Z+3, r11	; 0x03
     a70:	dc 01       	movw	r26, r24
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	cc 92       	st	X, r12
     a76:	fc 01       	movw	r30, r24
     a78:	d5 82       	std	Z+5, r13	; 0x05
     a7a:	dc 01       	movw	r26, r24
     a7c:	16 96       	adiw	r26, 0x06	; 6
     a7e:	ec 92       	st	X, r14
     a80:	fc 01       	movw	r30, r24
     a82:	f7 82       	std	Z+7, r15	; 0x07
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a8 ec       	ldi	r26, 0xC8	; 200
     a8a:	b3 e4       	ldi	r27, 0x43	; 67
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	ab 83       	std	Y+3, r26	; 0x03
     a92:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	4a ef       	ldi	r20, 0xFA	; 250
     a9a:	54 e4       	ldi	r21, 0x44	; 68
     a9c:	69 81       	ldd	r22, Y+1	; 0x01
     a9e:	7a 81       	ldd	r23, Y+2	; 0x02
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     aa8:	6d ab       	std	Y+53, r22	; 0x35
     aaa:	7e ab       	std	Y+54, r23	; 0x36
     aac:	8f ab       	std	Y+55, r24	; 0x37
     aae:	98 af       	std	Y+56, r25	; 0x38
     ab0:	8d a9       	ldd	r24, Y+53	; 0x35
     ab2:	9e a9       	ldd	r25, Y+54	; 0x36
     ab4:	af a9       	ldd	r26, Y+55	; 0x37
     ab6:	b8 ad       	ldd	r27, Y+56	; 0x38
     ab8:	8d 83       	std	Y+5, r24	; 0x05
     aba:	9e 83       	std	Y+6, r25	; 0x06
     abc:	af 83       	std	Y+7, r26	; 0x07
     abe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e8       	ldi	r20, 0x80	; 128
     ac6:	5f e3       	ldi	r21, 0x3F	; 63
     ac8:	6d 81       	ldd	r22, Y+5	; 0x05
     aca:	7e 81       	ldd	r23, Y+6	; 0x06
     acc:	8f 81       	ldd	r24, Y+7	; 0x07
     ace:	98 85       	ldd	r25, Y+8	; 0x08
     ad0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	2c f4       	brge	.+10     	; 0xae2 <enterPass+0x248>
		__ticks = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9a 87       	std	Y+10, r25	; 0x0a
     ade:	89 87       	std	Y+9, r24	; 0x09
     ae0:	5b c0       	rjmp	.+182    	; 0xb98 <enterPass+0x2fe>
	else if (__tmp > 65535)
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	4f e7       	ldi	r20, 0x7F	; 127
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	6d 81       	ldd	r22, Y+5	; 0x05
     aec:	7e 81       	ldd	r23, Y+6	; 0x06
     aee:	8f 81       	ldd	r24, Y+7	; 0x07
     af0:	98 85       	ldd	r25, Y+8	; 0x08
     af2:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     af6:	18 16       	cp	r1, r24
     af8:	0c f0       	brlt	.+2      	; 0xafc <enterPass+0x262>
     afa:	3c c0       	rjmp	.+120    	; 0xb74 <enterPass+0x2da>
		__ticks = (uint16_t) (__ms * 10.0);
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e2       	ldi	r20, 0x20	; 32
     b02:	51 e4       	ldi	r21, 0x41	; 65
     b04:	69 81       	ldd	r22, Y+1	; 0x01
     b06:	7a 81       	ldd	r23, Y+2	; 0x02
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     b10:	69 af       	std	Y+57, r22	; 0x39
     b12:	7a af       	std	Y+58, r23	; 0x3a
     b14:	8b af       	std	Y+59, r24	; 0x3b
     b16:	9c af       	std	Y+60, r25	; 0x3c
     b18:	89 ad       	ldd	r24, Y+57	; 0x39
     b1a:	9a ad       	ldd	r25, Y+58	; 0x3a
     b1c:	ab ad       	ldd	r26, Y+59	; 0x3b
     b1e:	bc ad       	ldd	r27, Y+60	; 0x3c
     b20:	89 a3       	std	Y+33, r24	; 0x21
     b22:	9a a3       	std	Y+34, r25	; 0x22
     b24:	ab a3       	std	Y+35, r26	; 0x23
     b26:	bc a3       	std	Y+36, r27	; 0x24
     b28:	69 a1       	ldd	r22, Y+33	; 0x21
     b2a:	7a a1       	ldd	r23, Y+34	; 0x22
     b2c:	8b a1       	ldd	r24, Y+35	; 0x23
     b2e:	9c a1       	ldd	r25, Y+36	; 0x24
     b30:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     b34:	21 96       	adiw	r28, 0x01	; 1
     b36:	6c af       	std	Y+60, r22	; 0x3c
     b38:	7d af       	std	Y+61, r23	; 0x3d
     b3a:	8e af       	std	Y+62, r24	; 0x3e
     b3c:	9f af       	std	Y+63, r25	; 0x3f
     b3e:	21 97       	sbiw	r28, 0x01	; 1
     b40:	ad ad       	ldd	r26, Y+61	; 0x3d
     b42:	be ad       	ldd	r27, Y+62	; 0x3e
     b44:	ba 87       	std	Y+10, r27	; 0x0a
     b46:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     b48:	10 c0       	rjmp	.+32     	; 0xb6a <enterPass+0x2d0>
     b4a:	88 ec       	ldi	r24, 0xC8	; 200
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9c 87       	std	Y+12, r25	; 0x0c
     b50:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
     b52:	8b 85       	ldd	r24, Y+11	; 0x0b
     b54:	9c 85       	ldd	r25, Y+12	; 0x0c
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <enterPass+0x2bc>
     b5a:	9c 87       	std	Y+12, r25	; 0x0c
     b5c:	8b 87       	std	Y+11, r24	; 0x0b
}
     b5e:	00 00       	nop
			__ticks --;
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	9a 87       	std	Y+10, r25	; 0x0a
     b68:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     b6a:	89 85       	ldd	r24, Y+9	; 0x09
     b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b6e:	89 2b       	or	r24, r25
     b70:	61 f7       	brne	.-40     	; 0xb4a <enterPass+0x2b0>
		return;
     b72:	1d c0       	rjmp	.+58     	; 0xbae <enterPass+0x314>
		__ticks = (uint16_t)__tmp;
     b74:	6d 81       	ldd	r22, Y+5	; 0x05
     b76:	7e 81       	ldd	r23, Y+6	; 0x06
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	98 85       	ldd	r25, Y+8	; 0x08
     b7c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     b80:	25 96       	adiw	r28, 0x05	; 5
     b82:	6c af       	std	Y+60, r22	; 0x3c
     b84:	7d af       	std	Y+61, r23	; 0x3d
     b86:	8e af       	std	Y+62, r24	; 0x3e
     b88:	9f af       	std	Y+63, r25	; 0x3f
     b8a:	25 97       	sbiw	r28, 0x05	; 5
     b8c:	23 96       	adiw	r28, 0x03	; 3
     b8e:	ee ad       	ldd	r30, Y+62	; 0x3e
     b90:	ff ad       	ldd	r31, Y+63	; 0x3f
     b92:	23 97       	sbiw	r28, 0x03	; 3
     b94:	fa 87       	std	Y+10, r31	; 0x0a
     b96:	e9 87       	std	Y+9, r30	; 0x09
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	9e 87       	std	Y+14, r25	; 0x0e
     b9e:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <enterPass+0x30a>
     ba8:	9e 87       	std	Y+14, r25	; 0x0e
     baa:	8d 87       	std	Y+13, r24	; 0x0d
}
     bac:	00 00       	nop
		}
		_delay_ms(400); /*  that wait to synchronize between human & ECU */
	} while (g_byte != '='); /* do that until press key is '=' */
     bae:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
     bb2:	8d 33       	cpi	r24, 0x3D	; 61
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <enterPass+0x31e>
     bb6:	a3 ce       	rjmp	.-698    	; 0x8fe <enterPass+0x64>
}
     bb8:	00 00       	nop
     bba:	00 00       	nop
     bbc:	cc 5b       	subi	r28, 0xBC	; 188
     bbe:	df 4f       	sbci	r29, 0xFF	; 255
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	6f 90       	pop	r6
     be6:	5f 90       	pop	r5
     be8:	4f 90       	pop	r4
     bea:	3f 90       	pop	r3
     bec:	2f 90       	pop	r2
     bee:	08 95       	ret

00000bf0 <runBuzzer>:

/*
 * Description: Function run Buzzer after user enter three time password wrong .
 */
void runBuzzer(void) {
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	/* run buzzer*/
	SET_BIT(PORTD, PD7);
     bf8:	82 e3       	ldi	r24, 0x32	; 50
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 81       	ld	r18, Z
     c00:	82 e3       	ldi	r24, 0x32	; 50
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	20 68       	ori	r18, 0x80	; 128
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18
	/* initialize timer to start count */
	TIMER_init(&timePtr);
     c0a:	81 e6       	ldi	r24, 0x61	; 97
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 15 0c 	call	0x182a	; 0x182a <TIMER_init>
	timeIndex = 0; /* Initialize timer interrupt counter */
     c12:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	g_state = BUZZER; /* indicate that garage in Buzzer mode */
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <g_state>
	while (g_state == BUZZER); /*  wait until garage mode change to close mode */
     c1c:	00 00       	nop
     c1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     c22:	84 30       	cpi	r24, 0x04	; 4
     c24:	e1 f3       	breq	.-8      	; 0xc1e <runBuzzer+0x2e>

}
     c26:	00 00       	nop
     c28:	00 00       	nop
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <openDoor>:

/*
 * Description: Function check password to open garage .
 */
void openDoor(void) {
     c30:	2f 92       	push	r2
     c32:	3f 92       	push	r3
     c34:	4f 92       	push	r4
     c36:	5f 92       	push	r5
     c38:	6f 92       	push	r6
     c3a:	7f 92       	push	r7
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	c7 56       	subi	r28, 0x67	; 103
     c5a:	d1 09       	sbc	r29, r1
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
     c66:	19 82       	std	Y+1, r1	; 0x01
	do {
		enterPass(&g_pass); /*  receive password from HMI-ECU */
     c68:	89 e6       	ldi	r24, 0x69	; 105
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 4d 04 	call	0x89a	; 0x89a <enterPass>
		/*  read password from EEPROM */
		readPassFromEEPROM(&addPass, &g_passCheck);
     c70:	61 e7       	ldi	r22, 0x71	; 113
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	85 e6       	ldi	r24, 0x65	; 101
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 a3 09 	call	0x1346	; 0x1346 <readPassFromEEPROM>

		UART_sendByte('#'); /*  tells HMI-ECU that MC2 become ready */
     c7c:	83 e2       	ldi	r24, 0x23	; 35
     c7e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>

		if (g_pass == g_passCheck) { /* check that user enter correct password or not */
     c82:	a0 90 69 00 	lds	r10, 0x0069	; 0x800069 <g_pass>
     c86:	b0 90 6a 00 	lds	r11, 0x006A	; 0x80006a <g_pass+0x1>
     c8a:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <g_pass+0x2>
     c8e:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <g_pass+0x3>
     c92:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <g_pass+0x4>
     c96:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <g_pass+0x5>
     c9a:	00 91 6f 00 	lds	r16, 0x006F	; 0x80006f <g_pass+0x6>
     c9e:	10 91 70 00 	lds	r17, 0x0070	; 0x800070 <g_pass+0x7>
     ca2:	20 90 71 00 	lds	r2, 0x0071	; 0x800071 <g_passCheck>
     ca6:	30 90 72 00 	lds	r3, 0x0072	; 0x800072 <g_passCheck+0x1>
     caa:	40 90 73 00 	lds	r4, 0x0073	; 0x800073 <g_passCheck+0x2>
     cae:	50 90 74 00 	lds	r5, 0x0074	; 0x800074 <g_passCheck+0x3>
     cb2:	60 90 75 00 	lds	r6, 0x0075	; 0x800075 <g_passCheck+0x4>
     cb6:	70 90 76 00 	lds	r7, 0x0076	; 0x800076 <g_passCheck+0x5>
     cba:	80 90 77 00 	lds	r8, 0x0077	; 0x800077 <g_passCheck+0x6>
     cbe:	90 90 78 00 	lds	r9, 0x0078	; 0x800078 <g_passCheck+0x7>
     cc2:	2a 2d       	mov	r18, r10
     cc4:	3b 2d       	mov	r19, r11
     cc6:	4c 2d       	mov	r20, r12
     cc8:	5d 2d       	mov	r21, r13
     cca:	6e 2d       	mov	r22, r14
     ccc:	7f 2d       	mov	r23, r15
     cce:	80 2f       	mov	r24, r16
     cd0:	91 2f       	mov	r25, r17
     cd2:	a2 2c       	mov	r10, r2
     cd4:	b3 2c       	mov	r11, r3
     cd6:	c4 2c       	mov	r12, r4
     cd8:	d5 2c       	mov	r13, r5
     cda:	e6 2c       	mov	r14, r6
     cdc:	f7 2c       	mov	r15, r7
     cde:	08 2d       	mov	r16, r8
     ce0:	19 2d       	mov	r17, r9
     ce2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__cmpdi2>
     ce6:	09 f0       	breq	.+2      	; 0xcea <openDoor+0xba>
     ce8:	c1 c0       	rjmp	.+386    	; 0xe6c <openDoor+0x23c>
			UART_sendByte(ERROR); /*  tells HMI_ECU that user enter correct password */
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e2       	ldi	r26, 0x20	; 32
     cf6:	b1 e4       	ldi	r27, 0x41	; 65
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	9b 83       	std	Y+3, r25	; 0x03
     cfc:	ac 83       	std	Y+4, r26	; 0x04
     cfe:	bd 83       	std	Y+5, r27	; 0x05
	__tmp = ((F_CPU) / 4e3) * __ms;
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	4a ef       	ldi	r20, 0xFA	; 250
     d06:	54 e4       	ldi	r21, 0x44	; 68
     d08:	6a 81       	ldd	r22, Y+2	; 0x02
     d0a:	7b 81       	ldd	r23, Y+3	; 0x03
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     d14:	68 af       	std	Y+56, r22	; 0x38
     d16:	79 af       	std	Y+57, r23	; 0x39
     d18:	8a af       	std	Y+58, r24	; 0x3a
     d1a:	9b af       	std	Y+59, r25	; 0x3b
     d1c:	88 ad       	ldd	r24, Y+56	; 0x38
     d1e:	99 ad       	ldd	r25, Y+57	; 0x39
     d20:	aa ad       	ldd	r26, Y+58	; 0x3a
     d22:	bb ad       	ldd	r27, Y+59	; 0x3b
     d24:	8e 83       	std	Y+6, r24	; 0x06
     d26:	9f 83       	std	Y+7, r25	; 0x07
     d28:	a8 87       	std	Y+8, r26	; 0x08
     d2a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	6e 81       	ldd	r22, Y+6	; 0x06
     d36:	7f 81       	ldd	r23, Y+7	; 0x07
     d38:	88 85       	ldd	r24, Y+8	; 0x08
     d3a:	99 85       	ldd	r25, Y+9	; 0x09
     d3c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     d40:	88 23       	and	r24, r24
     d42:	2c f4       	brge	.+10     	; 0xd4e <openDoor+0x11e>
		__ticks = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9b 87       	std	Y+11, r25	; 0x0b
     d4a:	8a 87       	std	Y+10, r24	; 0x0a
     d4c:	5d c0       	rjmp	.+186    	; 0xe08 <openDoor+0x1d8>
	else if (__tmp > 65535)
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	6e 81       	ldd	r22, Y+6	; 0x06
     d58:	7f 81       	ldd	r23, Y+7	; 0x07
     d5a:	88 85       	ldd	r24, Y+8	; 0x08
     d5c:	99 85       	ldd	r25, Y+9	; 0x09
     d5e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     d62:	18 16       	cp	r1, r24
     d64:	0c f0       	brlt	.+2      	; 0xd68 <openDoor+0x138>
     d66:	3e c0       	rjmp	.+124    	; 0xde4 <openDoor+0x1b4>
		__ticks = (uint16_t) (__ms * 10.0);
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	6a 81       	ldd	r22, Y+2	; 0x02
     d72:	7b 81       	ldd	r23, Y+3	; 0x03
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     d7c:	6c af       	std	Y+60, r22	; 0x3c
     d7e:	7d af       	std	Y+61, r23	; 0x3d
     d80:	8e af       	std	Y+62, r24	; 0x3e
     d82:	9f af       	std	Y+63, r25	; 0x3f
     d84:	8c ad       	ldd	r24, Y+60	; 0x3c
     d86:	9d ad       	ldd	r25, Y+61	; 0x3d
     d88:	ae ad       	ldd	r26, Y+62	; 0x3e
     d8a:	bf ad       	ldd	r27, Y+63	; 0x3f
     d8c:	8c a7       	std	Y+44, r24	; 0x2c
     d8e:	9d a7       	std	Y+45, r25	; 0x2d
     d90:	ae a7       	std	Y+46, r26	; 0x2e
     d92:	bf a7       	std	Y+47, r27	; 0x2f
     d94:	6c a5       	ldd	r22, Y+44	; 0x2c
     d96:	7d a5       	ldd	r23, Y+45	; 0x2d
     d98:	8e a5       	ldd	r24, Y+46	; 0x2e
     d9a:	9f a5       	ldd	r25, Y+47	; 0x2f
     d9c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     da0:	24 96       	adiw	r28, 0x04	; 4
     da2:	6c af       	std	Y+60, r22	; 0x3c
     da4:	7d af       	std	Y+61, r23	; 0x3d
     da6:	8e af       	std	Y+62, r24	; 0x3e
     da8:	9f af       	std	Y+63, r25	; 0x3f
     daa:	24 97       	sbiw	r28, 0x04	; 4
     dac:	22 96       	adiw	r28, 0x02	; 2
     dae:	ae ad       	ldd	r26, Y+62	; 0x3e
     db0:	bf ad       	ldd	r27, Y+63	; 0x3f
     db2:	22 97       	sbiw	r28, 0x02	; 2
     db4:	bb 87       	std	Y+11, r27	; 0x0b
     db6:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
     db8:	10 c0       	rjmp	.+32     	; 0xdda <openDoor+0x1aa>
     dba:	88 ec       	ldi	r24, 0xC8	; 200
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9d 87       	std	Y+13, r25	; 0x0d
     dc0:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
     dc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <openDoor+0x196>
     dca:	9d 87       	std	Y+13, r25	; 0x0d
     dcc:	8c 87       	std	Y+12, r24	; 0x0c
}
     dce:	00 00       	nop
			__ticks --;
     dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9b 87       	std	Y+11, r25	; 0x0b
     dd8:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
     dda:	8a 85       	ldd	r24, Y+10	; 0x0a
     ddc:	9b 85       	ldd	r25, Y+11	; 0x0b
     dde:	89 2b       	or	r24, r25
     de0:	61 f7       	brne	.-40     	; 0xdba <openDoor+0x18a>
		return;
     de2:	1d c0       	rjmp	.+58     	; 0xe1e <openDoor+0x1ee>
		__ticks = (uint16_t)__tmp;
     de4:	6e 81       	ldd	r22, Y+6	; 0x06
     de6:	7f 81       	ldd	r23, Y+7	; 0x07
     de8:	88 85       	ldd	r24, Y+8	; 0x08
     dea:	99 85       	ldd	r25, Y+9	; 0x09
     dec:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     df0:	28 96       	adiw	r28, 0x08	; 8
     df2:	6c af       	std	Y+60, r22	; 0x3c
     df4:	7d af       	std	Y+61, r23	; 0x3d
     df6:	8e af       	std	Y+62, r24	; 0x3e
     df8:	9f af       	std	Y+63, r25	; 0x3f
     dfa:	28 97       	sbiw	r28, 0x08	; 8
     dfc:	26 96       	adiw	r28, 0x06	; 6
     dfe:	ee ad       	ldd	r30, Y+62	; 0x3e
     e00:	ff ad       	ldd	r31, Y+63	; 0x3f
     e02:	26 97       	sbiw	r28, 0x06	; 6
     e04:	fb 87       	std	Y+11, r31	; 0x0b
     e06:	ea 87       	std	Y+10, r30	; 0x0a
     e08:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0c:	9f 87       	std	Y+15, r25	; 0x0f
     e0e:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
     e10:	8e 85       	ldd	r24, Y+14	; 0x0e
     e12:	9f 85       	ldd	r25, Y+15	; 0x0f
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <openDoor+0x1e4>
     e18:	9f 87       	std	Y+15, r25	; 0x0f
     e1a:	8e 87       	std	Y+14, r24	; 0x0e
}
     e1c:	00 00       	nop
			_delay_ms(10);
			UART_sendByte(SUCCESS);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
			/* initialize timer to start  count*/
			TIMER_init(&timePtr);
     e24:	81 e6       	ldi	r24, 0x61	; 97
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 15 0c 	call	0x182a	; 0x182a <TIMER_init>
			/* edit output of motor pins to rotate motor clockwise */
			CLEAR_BIT(PORTD, PD5);
     e2c:	82 e3       	ldi	r24, 0x32	; 50
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	dc 01       	movw	r26, r24
     e32:	2c 91       	ld	r18, X
     e34:	82 e3       	ldi	r24, 0x32	; 50
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	2f 7d       	andi	r18, 0xDF	; 223
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
			SET_BIT(PORTD, PD6);
     e3e:	82 e3       	ldi	r24, 0x32	; 50
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	dc 01       	movw	r26, r24
     e44:	2c 91       	ld	r18, X
     e46:	82 e3       	ldi	r24, 0x32	; 50
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	20 64       	ori	r18, 0x40	; 64
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18

			timeIndex = 0; /* Initialize timer interrupt counter */
     e50:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
			g_state = OPENING; /* indicate that garage in opening mode */
     e54:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <g_state>
			while (g_state == OPENING); /*  wait until garage mode change to open mode */
     e58:	00 00       	nop
     e5a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <g_state>
     e5e:	88 23       	and	r24, r24
     e60:	e1 f3       	breq	.-8      	; 0xe5a <openDoor+0x22a>
			closeDoor(); /*  start with close mode */
     e62:	0e 94 a1 03 	call	0x742	; 0x742 <closeDoor>
			i = 10; /* choose (10) that any number > 3 to break while loop*/
     e66:	8a e0       	ldi	r24, 0x0A	; 10
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	47 c1       	rjmp	.+654    	; 0x10fa <openDoor+0x4ca>
		} else {
			UART_sendByte(ERROR); /*  tells HMI_ECU that user enter wrong password */
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a0 e2       	ldi	r26, 0x20	; 32
     e78:	b1 e4       	ldi	r27, 0x41	; 65
     e7a:	8e 8f       	std	Y+30, r24	; 0x1e
     e7c:	9f 8f       	std	Y+31, r25	; 0x1f
     e7e:	a8 a3       	std	Y+32, r26	; 0x20
     e80:	b9 a3       	std	Y+33, r27	; 0x21
	__tmp = ((F_CPU) / 4e3) * __ms;
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e8c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e8e:	88 a1       	ldd	r24, Y+32	; 0x20
     e90:	99 a1       	ldd	r25, Y+33	; 0x21
     e92:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     e96:	2c 96       	adiw	r28, 0x0c	; 12
     e98:	6c af       	std	Y+60, r22	; 0x3c
     e9a:	7d af       	std	Y+61, r23	; 0x3d
     e9c:	8e af       	std	Y+62, r24	; 0x3e
     e9e:	9f af       	std	Y+63, r25	; 0x3f
     ea0:	2c 97       	sbiw	r28, 0x0c	; 12
     ea2:	2c 96       	adiw	r28, 0x0c	; 12
     ea4:	8c ad       	ldd	r24, Y+60	; 0x3c
     ea6:	9d ad       	ldd	r25, Y+61	; 0x3d
     ea8:	ae ad       	ldd	r26, Y+62	; 0x3e
     eaa:	bf ad       	ldd	r27, Y+63	; 0x3f
     eac:	2c 97       	sbiw	r28, 0x0c	; 12
     eae:	8a a3       	std	Y+34, r24	; 0x22
     eb0:	9b a3       	std	Y+35, r25	; 0x23
     eb2:	ac a3       	std	Y+36, r26	; 0x24
     eb4:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	6a a1       	ldd	r22, Y+34	; 0x22
     ec0:	7b a1       	ldd	r23, Y+35	; 0x23
     ec2:	8c a1       	ldd	r24, Y+36	; 0x24
     ec4:	9d a1       	ldd	r25, Y+37	; 0x25
     ec6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <openDoor+0x2a8>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9f a3       	std	Y+39, r25	; 0x27
     ed4:	8e a3       	std	Y+38, r24	; 0x26
     ed6:	61 c0       	rjmp	.+194    	; 0xf9a <openDoor+0x36a>
	else if (__tmp > 65535)
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	6a a1       	ldd	r22, Y+34	; 0x22
     ee2:	7b a1       	ldd	r23, Y+35	; 0x23
     ee4:	8c a1       	ldd	r24, Y+36	; 0x24
     ee6:	9d a1       	ldd	r25, Y+37	; 0x25
     ee8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
     eec:	18 16       	cp	r1, r24
     eee:	0c f0       	brlt	.+2      	; 0xef2 <openDoor+0x2c2>
     ef0:	42 c0       	rjmp	.+132    	; 0xf76 <openDoor+0x346>
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	6e 8d       	ldd	r22, Y+30	; 0x1e
     efc:	7f 8d       	ldd	r23, Y+31	; 0x1f
     efe:	88 a1       	ldd	r24, Y+32	; 0x20
     f00:	99 a1       	ldd	r25, Y+33	; 0x21
     f02:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     f06:	60 96       	adiw	r28, 0x10	; 16
     f08:	6c af       	std	Y+60, r22	; 0x3c
     f0a:	7d af       	std	Y+61, r23	; 0x3d
     f0c:	8e af       	std	Y+62, r24	; 0x3e
     f0e:	9f af       	std	Y+63, r25	; 0x3f
     f10:	60 97       	sbiw	r28, 0x10	; 16
     f12:	60 96       	adiw	r28, 0x10	; 16
     f14:	8c ad       	ldd	r24, Y+60	; 0x3c
     f16:	9d ad       	ldd	r25, Y+61	; 0x3d
     f18:	ae ad       	ldd	r26, Y+62	; 0x3e
     f1a:	bf ad       	ldd	r27, Y+63	; 0x3f
     f1c:	60 97       	sbiw	r28, 0x10	; 16
     f1e:	8c ab       	std	Y+52, r24	; 0x34
     f20:	9d ab       	std	Y+53, r25	; 0x35
     f22:	ae ab       	std	Y+54, r26	; 0x36
     f24:	bf ab       	std	Y+55, r27	; 0x37
     f26:	6c a9       	ldd	r22, Y+52	; 0x34
     f28:	7d a9       	ldd	r23, Y+53	; 0x35
     f2a:	8e a9       	ldd	r24, Y+54	; 0x36
     f2c:	9f a9       	ldd	r25, Y+55	; 0x37
     f2e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     f32:	64 96       	adiw	r28, 0x14	; 20
     f34:	6c af       	std	Y+60, r22	; 0x3c
     f36:	7d af       	std	Y+61, r23	; 0x3d
     f38:	8e af       	std	Y+62, r24	; 0x3e
     f3a:	9f af       	std	Y+63, r25	; 0x3f
     f3c:	64 97       	sbiw	r28, 0x14	; 20
     f3e:	62 96       	adiw	r28, 0x12	; 18
     f40:	ae ad       	ldd	r26, Y+62	; 0x3e
     f42:	bf ad       	ldd	r27, Y+63	; 0x3f
     f44:	62 97       	sbiw	r28, 0x12	; 18
     f46:	bf a3       	std	Y+39, r27	; 0x27
     f48:	ae a3       	std	Y+38, r26	; 0x26
		while(__ticks)
     f4a:	10 c0       	rjmp	.+32     	; 0xf6c <openDoor+0x33c>
     f4c:	88 ec       	ldi	r24, 0xC8	; 200
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	99 a7       	std	Y+41, r25	; 0x29
     f52:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
     f54:	88 a5       	ldd	r24, Y+40	; 0x28
     f56:	99 a5       	ldd	r25, Y+41	; 0x29
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <openDoor+0x328>
     f5c:	99 a7       	std	Y+41, r25	; 0x29
     f5e:	88 a7       	std	Y+40, r24	; 0x28
}
     f60:	00 00       	nop
			__ticks --;
     f62:	8e a1       	ldd	r24, Y+38	; 0x26
     f64:	9f a1       	ldd	r25, Y+39	; 0x27
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9f a3       	std	Y+39, r25	; 0x27
     f6a:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
     f6c:	8e a1       	ldd	r24, Y+38	; 0x26
     f6e:	9f a1       	ldd	r25, Y+39	; 0x27
     f70:	89 2b       	or	r24, r25
     f72:	61 f7       	brne	.-40     	; 0xf4c <openDoor+0x31c>
		return;
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <openDoor+0x380>
		__ticks = (uint16_t)__tmp;
     f76:	6a a1       	ldd	r22, Y+34	; 0x22
     f78:	7b a1       	ldd	r23, Y+35	; 0x23
     f7a:	8c a1       	ldd	r24, Y+36	; 0x24
     f7c:	9d a1       	ldd	r25, Y+37	; 0x25
     f7e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
     f82:	68 96       	adiw	r28, 0x18	; 24
     f84:	6c af       	std	Y+60, r22	; 0x3c
     f86:	7d af       	std	Y+61, r23	; 0x3d
     f88:	8e af       	std	Y+62, r24	; 0x3e
     f8a:	9f af       	std	Y+63, r25	; 0x3f
     f8c:	68 97       	sbiw	r28, 0x18	; 24
     f8e:	66 96       	adiw	r28, 0x16	; 22
     f90:	ee ad       	ldd	r30, Y+62	; 0x3e
     f92:	ff ad       	ldd	r31, Y+63	; 0x3f
     f94:	66 97       	sbiw	r28, 0x16	; 22
     f96:	ff a3       	std	Y+39, r31	; 0x27
     f98:	ee a3       	std	Y+38, r30	; 0x26
     f9a:	8e a1       	ldd	r24, Y+38	; 0x26
     f9c:	9f a1       	ldd	r25, Y+39	; 0x27
     f9e:	9b a7       	std	Y+43, r25	; 0x2b
     fa0:	8a a7       	std	Y+42, r24	; 0x2a
	__asm__ volatile (
     fa2:	8a a5       	ldd	r24, Y+42	; 0x2a
     fa4:	9b a5       	ldd	r25, Y+43	; 0x2b
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <openDoor+0x376>
     faa:	9b a7       	std	Y+43, r25	; 0x2b
     fac:	8a a7       	std	Y+42, r24	; 0x2a
}
     fae:	00 00       	nop
			_delay_ms(10);
			UART_sendByte(ERROR);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	aa e7       	ldi	r26, 0x7A	; 122
     fbc:	b4 e4       	ldi	r27, 0x44	; 68
     fbe:	88 8b       	std	Y+16, r24	; 0x10
     fc0:	99 8b       	std	Y+17, r25	; 0x11
     fc2:	aa 8b       	std	Y+18, r26	; 0x12
     fc4:	bb 8b       	std	Y+19, r27	; 0x13
	__tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a ef       	ldi	r20, 0xFA	; 250
     fcc:	54 e4       	ldi	r21, 0x44	; 68
     fce:	68 89       	ldd	r22, Y+16	; 0x10
     fd0:	79 89       	ldd	r23, Y+17	; 0x11
     fd2:	8a 89       	ldd	r24, Y+18	; 0x12
     fd4:	9b 89       	ldd	r25, Y+19	; 0x13
     fd6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
     fda:	6c 96       	adiw	r28, 0x1c	; 28
     fdc:	6c af       	std	Y+60, r22	; 0x3c
     fde:	7d af       	std	Y+61, r23	; 0x3d
     fe0:	8e af       	std	Y+62, r24	; 0x3e
     fe2:	9f af       	std	Y+63, r25	; 0x3f
     fe4:	6c 97       	sbiw	r28, 0x1c	; 28
     fe6:	6c 96       	adiw	r28, 0x1c	; 28
     fe8:	8c ad       	ldd	r24, Y+60	; 0x3c
     fea:	9d ad       	ldd	r25, Y+61	; 0x3d
     fec:	ae ad       	ldd	r26, Y+62	; 0x3e
     fee:	bf ad       	ldd	r27, Y+63	; 0x3f
     ff0:	6c 97       	sbiw	r28, 0x1c	; 28
     ff2:	8c 8b       	std	Y+20, r24	; 0x14
     ff4:	9d 8b       	std	Y+21, r25	; 0x15
     ff6:	ae 8b       	std	Y+22, r26	; 0x16
     ff8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	6c 89       	ldd	r22, Y+20	; 0x14
    1004:	7d 89       	ldd	r23, Y+21	; 0x15
    1006:	8e 89       	ldd	r24, Y+22	; 0x16
    1008:	9f 89       	ldd	r25, Y+23	; 0x17
    100a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <openDoor+0x3ec>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	99 8f       	std	Y+25, r25	; 0x19
    1018:	88 8f       	std	Y+24, r24	; 0x18
    101a:	61 c0       	rjmp	.+194    	; 0x10de <openDoor+0x4ae>
	else if (__tmp > 65535)
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	3f ef       	ldi	r19, 0xFF	; 255
    1020:	4f e7       	ldi	r20, 0x7F	; 127
    1022:	57 e4       	ldi	r21, 0x47	; 71
    1024:	6c 89       	ldd	r22, Y+20	; 0x14
    1026:	7d 89       	ldd	r23, Y+21	; 0x15
    1028:	8e 89       	ldd	r24, Y+22	; 0x16
    102a:	9f 89       	ldd	r25, Y+23	; 0x17
    102c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	0c f0       	brlt	.+2      	; 0x1036 <openDoor+0x406>
    1034:	42 c0       	rjmp	.+132    	; 0x10ba <openDoor+0x48a>
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	68 89       	ldd	r22, Y+16	; 0x10
    1040:	79 89       	ldd	r23, Y+17	; 0x11
    1042:	8a 89       	ldd	r24, Y+18	; 0x12
    1044:	9b 89       	ldd	r25, Y+19	; 0x13
    1046:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
    104a:	a0 96       	adiw	r28, 0x20	; 32
    104c:	6c af       	std	Y+60, r22	; 0x3c
    104e:	7d af       	std	Y+61, r23	; 0x3d
    1050:	8e af       	std	Y+62, r24	; 0x3e
    1052:	9f af       	std	Y+63, r25	; 0x3f
    1054:	a0 97       	sbiw	r28, 0x20	; 32
    1056:	a0 96       	adiw	r28, 0x20	; 32
    1058:	8c ad       	ldd	r24, Y+60	; 0x3c
    105a:	9d ad       	ldd	r25, Y+61	; 0x3d
    105c:	ae ad       	ldd	r26, Y+62	; 0x3e
    105e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1060:	a0 97       	sbiw	r28, 0x20	; 32
    1062:	88 ab       	std	Y+48, r24	; 0x30
    1064:	99 ab       	std	Y+49, r25	; 0x31
    1066:	aa ab       	std	Y+50, r26	; 0x32
    1068:	bb ab       	std	Y+51, r27	; 0x33
    106a:	68 a9       	ldd	r22, Y+48	; 0x30
    106c:	79 a9       	ldd	r23, Y+49	; 0x31
    106e:	8a a9       	ldd	r24, Y+50	; 0x32
    1070:	9b a9       	ldd	r25, Y+51	; 0x33
    1072:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    1076:	a4 96       	adiw	r28, 0x24	; 36
    1078:	6c af       	std	Y+60, r22	; 0x3c
    107a:	7d af       	std	Y+61, r23	; 0x3d
    107c:	8e af       	std	Y+62, r24	; 0x3e
    107e:	9f af       	std	Y+63, r25	; 0x3f
    1080:	a4 97       	sbiw	r28, 0x24	; 36
    1082:	a2 96       	adiw	r28, 0x22	; 34
    1084:	ae ad       	ldd	r26, Y+62	; 0x3e
    1086:	bf ad       	ldd	r27, Y+63	; 0x3f
    1088:	a2 97       	sbiw	r28, 0x22	; 34
    108a:	b9 8f       	std	Y+25, r27	; 0x19
    108c:	a8 8f       	std	Y+24, r26	; 0x18
		while(__ticks)
    108e:	10 c0       	rjmp	.+32     	; 0x10b0 <openDoor+0x480>
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9b 8f       	std	Y+27, r25	; 0x1b
    1096:	8a 8f       	std	Y+26, r24	; 0x1a
	__asm__ volatile (
    1098:	8a 8d       	ldd	r24, Y+26	; 0x1a
    109a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <openDoor+0x46c>
    10a0:	9b 8f       	std	Y+27, r25	; 0x1b
    10a2:	8a 8f       	std	Y+26, r24	; 0x1a
}
    10a4:	00 00       	nop
			__ticks --;
    10a6:	88 8d       	ldd	r24, Y+24	; 0x18
    10a8:	99 8d       	ldd	r25, Y+25	; 0x19
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	99 8f       	std	Y+25, r25	; 0x19
    10ae:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
    10b0:	88 8d       	ldd	r24, Y+24	; 0x18
    10b2:	99 8d       	ldd	r25, Y+25	; 0x19
    10b4:	89 2b       	or	r24, r25
    10b6:	61 f7       	brne	.-40     	; 0x1090 <openDoor+0x460>
		return;
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <openDoor+0x4c4>
		__ticks = (uint16_t)__tmp;
    10ba:	6c 89       	ldd	r22, Y+20	; 0x14
    10bc:	7d 89       	ldd	r23, Y+21	; 0x15
    10be:	8e 89       	ldd	r24, Y+22	; 0x16
    10c0:	9f 89       	ldd	r25, Y+23	; 0x17
    10c2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    10c6:	a8 96       	adiw	r28, 0x28	; 40
    10c8:	6c af       	std	Y+60, r22	; 0x3c
    10ca:	7d af       	std	Y+61, r23	; 0x3d
    10cc:	8e af       	std	Y+62, r24	; 0x3e
    10ce:	9f af       	std	Y+63, r25	; 0x3f
    10d0:	a8 97       	sbiw	r28, 0x28	; 40
    10d2:	a6 96       	adiw	r28, 0x26	; 38
    10d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    10d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    10d8:	a6 97       	sbiw	r28, 0x26	; 38
    10da:	f9 8f       	std	Y+25, r31	; 0x19
    10dc:	e8 8f       	std	Y+24, r30	; 0x18
    10de:	88 8d       	ldd	r24, Y+24	; 0x18
    10e0:	99 8d       	ldd	r25, Y+25	; 0x19
    10e2:	9d 8f       	std	Y+29, r25	; 0x1d
    10e4:	8c 8f       	std	Y+28, r24	; 0x1c
	__asm__ volatile (
    10e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <openDoor+0x4ba>
    10ee:	9d 8f       	std	Y+29, r25	; 0x1d
    10f0:	8c 8f       	std	Y+28, r24	; 0x1c
}
    10f2:	00 00       	nop
			/* wait one second to synchronize with HMI-ECU that now display error massage */
			_delay_ms(1000);
			i++;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	89 83       	std	Y+1, r24	; 0x01
		}
	} while (i < 3); /* wait until user enter correct pass or three time wrong password*/
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <openDoor+0x4d2>
    1100:	b3 cd       	rjmp	.-1178   	; 0xc68 <openDoor+0x38>
	if (i == 3) { /* that means user enter three time wrong password*/
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	11 f4       	brne	.+4      	; 0x110c <openDoor+0x4dc>
		runBuzzer(); /* start of buzzer mode */
    1108:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <runBuzzer>
	}

}
    110c:	00 00       	nop
    110e:	c9 59       	subi	r28, 0x99	; 153
    1110:	df 4f       	sbci	r29, 0xFF	; 255
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	5f 90       	pop	r5
    113a:	4f 90       	pop	r4
    113c:	3f 90       	pop	r3
    113e:	2f 90       	pop	r2
    1140:	08 95       	ret

00001142 <writePassInEEPROM>:

/*
 * Description: Function store password in EEPROM .
 */
void writePassInEEPROM(uint16 *add, uint64 *data) {
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	a7 97       	sbiw	r28, 0x27	; 39
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	99 8b       	std	Y+17, r25	; 0x11
    116a:	88 8b       	std	Y+16, r24	; 0x10
    116c:	7b 8b       	std	Y+19, r23	; 0x13
    116e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < 8; i++) {
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	d1 c0       	rjmp	.+418    	; 0x1316 <writePassInEEPROM+0x1d4>
		/* write i-byte of password in select location + i*/
		EEPROM_writeByte(((*add) + i), ((*data) >> (8 * i)));
    1174:	8a 89       	ldd	r24, Y+18	; 0x12
    1176:	9b 89       	ldd	r25, Y+19	; 0x13
    1178:	dc 01       	movw	r26, r24
    117a:	8c 90       	ld	r8, X
    117c:	fc 01       	movw	r30, r24
    117e:	91 80       	ldd	r9, Z+1	; 0x01
    1180:	dc 01       	movw	r26, r24
    1182:	12 96       	adiw	r26, 0x02	; 2
    1184:	ac 90       	ld	r10, X
    1186:	fc 01       	movw	r30, r24
    1188:	b3 80       	ldd	r11, Z+3	; 0x03
    118a:	dc 01       	movw	r26, r24
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	cc 90       	ld	r12, X
    1190:	fc 01       	movw	r30, r24
    1192:	d5 80       	ldd	r13, Z+5	; 0x05
    1194:	dc 01       	movw	r26, r24
    1196:	16 96       	adiw	r26, 0x06	; 6
    1198:	ec 90       	ld	r14, X
    119a:	fc 01       	movw	r30, r24
    119c:	f7 80       	ldd	r15, Z+7	; 0x07
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	28 2d       	mov	r18, r8
    11b4:	39 2d       	mov	r19, r9
    11b6:	4a 2d       	mov	r20, r10
    11b8:	5b 2d       	mov	r21, r11
    11ba:	6c 2d       	mov	r22, r12
    11bc:	7d 2d       	mov	r23, r13
    11be:	8e 2d       	mov	r24, r14
    11c0:	9f 2d       	mov	r25, r15
    11c2:	0e 2f       	mov	r16, r30
    11c4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__lshrdi3>
    11c8:	82 2e       	mov	r8, r18
    11ca:	93 2e       	mov	r9, r19
    11cc:	a4 2e       	mov	r10, r20
    11ce:	b5 2e       	mov	r11, r21
    11d0:	c6 2e       	mov	r12, r22
    11d2:	d7 2e       	mov	r13, r23
    11d4:	e8 2e       	mov	r14, r24
    11d6:	f9 2e       	mov	r15, r25
    11d8:	48 2d       	mov	r20, r8
    11da:	88 89       	ldd	r24, Y+16	; 0x10
    11dc:	99 89       	ldd	r25, Y+17	; 0x11
    11de:	dc 01       	movw	r26, r24
    11e0:	2d 91       	ld	r18, X+
    11e2:	3c 91       	ld	r19, X
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	64 2f       	mov	r22, r20
    11f0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <EEPROM_writeByte>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a0 e2       	ldi	r26, 0x20	; 32
    11fa:	b1 e4       	ldi	r27, 0x41	; 65
    11fc:	8a 83       	std	Y+2, r24	; 0x02
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	ac 83       	std	Y+4, r26	; 0x04
    1202:	bd 83       	std	Y+5, r27	; 0x05
	__tmp = ((F_CPU) / 4e3) * __ms;
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4a ef       	ldi	r20, 0xFA	; 250
    120a:	54 e4       	ldi	r21, 0x44	; 68
    120c:	6a 81       	ldd	r22, Y+2	; 0x02
    120e:	7b 81       	ldd	r23, Y+3	; 0x03
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
    1218:	68 8f       	std	Y+24, r22	; 0x18
    121a:	79 8f       	std	Y+25, r23	; 0x19
    121c:	8a 8f       	std	Y+26, r24	; 0x1a
    121e:	9b 8f       	std	Y+27, r25	; 0x1b
    1220:	88 8d       	ldd	r24, Y+24	; 0x18
    1222:	99 8d       	ldd	r25, Y+25	; 0x19
    1224:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1226:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1228:	8e 83       	std	Y+6, r24	; 0x06
    122a:	9f 83       	std	Y+7, r25	; 0x07
    122c:	a8 87       	std	Y+8, r26	; 0x08
    122e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	6e 81       	ldd	r22, Y+6	; 0x06
    123a:	7f 81       	ldd	r23, Y+7	; 0x07
    123c:	88 85       	ldd	r24, Y+8	; 0x08
    123e:	99 85       	ldd	r25, Y+9	; 0x09
    1240:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
    1244:	88 23       	and	r24, r24
    1246:	2c f4       	brge	.+10     	; 0x1252 <writePassInEEPROM+0x110>
		__ticks = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9b 87       	std	Y+11, r25	; 0x0b
    124e:	8a 87       	std	Y+10, r24	; 0x0a
    1250:	54 c0       	rjmp	.+168    	; 0x12fa <writePassInEEPROM+0x1b8>
	else if (__tmp > 65535)
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	57 e4       	ldi	r21, 0x47	; 71
    125a:	6e 81       	ldd	r22, Y+6	; 0x06
    125c:	7f 81       	ldd	r23, Y+7	; 0x07
    125e:	88 85       	ldd	r24, Y+8	; 0x08
    1260:	99 85       	ldd	r25, Y+9	; 0x09
    1262:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
    1266:	18 16       	cp	r1, r24
    1268:	d4 f5       	brge	.+116    	; 0x12de <writePassInEEPROM+0x19c>
		__ticks = (uint16_t) (__ms * 10.0);
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	6a 81       	ldd	r22, Y+2	; 0x02
    1274:	7b 81       	ldd	r23, Y+3	; 0x03
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
    127e:	6c 8f       	std	Y+28, r22	; 0x1c
    1280:	7d 8f       	std	Y+29, r23	; 0x1d
    1282:	8e 8f       	std	Y+30, r24	; 0x1e
    1284:	9f 8f       	std	Y+31, r25	; 0x1f
    1286:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1288:	9d 8d       	ldd	r25, Y+29	; 0x1d
    128a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    128c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    128e:	8c 8b       	std	Y+20, r24	; 0x14
    1290:	9d 8b       	std	Y+21, r25	; 0x15
    1292:	ae 8b       	std	Y+22, r26	; 0x16
    1294:	bf 8b       	std	Y+23, r27	; 0x17
    1296:	6c 89       	ldd	r22, Y+20	; 0x14
    1298:	7d 89       	ldd	r23, Y+21	; 0x15
    129a:	8e 89       	ldd	r24, Y+22	; 0x16
    129c:	9f 89       	ldd	r25, Y+23	; 0x17
    129e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    12a2:	68 a3       	std	Y+32, r22	; 0x20
    12a4:	79 a3       	std	Y+33, r23	; 0x21
    12a6:	8a a3       	std	Y+34, r24	; 0x22
    12a8:	9b a3       	std	Y+35, r25	; 0x23
    12aa:	a8 a1       	ldd	r26, Y+32	; 0x20
    12ac:	b9 a1       	ldd	r27, Y+33	; 0x21
    12ae:	bb 87       	std	Y+11, r27	; 0x0b
    12b0:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
    12b2:	10 c0       	rjmp	.+32     	; 0x12d4 <writePassInEEPROM+0x192>
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9d 87       	std	Y+13, r25	; 0x0d
    12ba:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
    12bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    12be:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <writePassInEEPROM+0x17e>
    12c4:	9d 87       	std	Y+13, r25	; 0x0d
    12c6:	8c 87       	std	Y+12, r24	; 0x0c
}
    12c8:	00 00       	nop
			__ticks --;
    12ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    12cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	9b 87       	std	Y+11, r25	; 0x0b
    12d2:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
    12d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d8:	89 2b       	or	r24, r25
    12da:	61 f7       	brne	.-40     	; 0x12b4 <writePassInEEPROM+0x172>
		return;
    12dc:	19 c0       	rjmp	.+50     	; 0x1310 <writePassInEEPROM+0x1ce>
		__ticks = (uint16_t)__tmp;
    12de:	6e 81       	ldd	r22, Y+6	; 0x06
    12e0:	7f 81       	ldd	r23, Y+7	; 0x07
    12e2:	88 85       	ldd	r24, Y+8	; 0x08
    12e4:	99 85       	ldd	r25, Y+9	; 0x09
    12e6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    12ea:	6c a3       	std	Y+36, r22	; 0x24
    12ec:	7d a3       	std	Y+37, r23	; 0x25
    12ee:	8e a3       	std	Y+38, r24	; 0x26
    12f0:	9f a3       	std	Y+39, r25	; 0x27
    12f2:	ec a1       	ldd	r30, Y+36	; 0x24
    12f4:	fd a1       	ldd	r31, Y+37	; 0x25
    12f6:	fb 87       	std	Y+11, r31	; 0x0b
    12f8:	ea 87       	std	Y+10, r30	; 0x0a
    12fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fe:	9f 87       	std	Y+15, r25	; 0x0f
    1300:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
    1302:	8e 85       	ldd	r24, Y+14	; 0x0e
    1304:	9f 85       	ldd	r25, Y+15	; 0x0f
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <writePassInEEPROM+0x1c4>
    130a:	9f 87       	std	Y+15, r25	; 0x0f
    130c:	8e 87       	std	Y+14, r24	; 0x0e
}
    130e:	00 00       	nop
	for (i = 0; i < 8; i++) {
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	08 f4       	brcc	.+2      	; 0x131e <writePassInEEPROM+0x1dc>
    131c:	2b cf       	rjmp	.-426    	; 0x1174 <writePassInEEPROM+0x32>
		_delay_ms(10); /* wait to write byte in EEPROM correctly */
	}
}
    131e:	00 00       	nop
    1320:	00 00       	nop
    1322:	a7 96       	adiw	r28, 0x27	; 39
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	8f 90       	pop	r8
    1344:	08 95       	ret

00001346 <readPassFromEEPROM>:

/*
 * Description: Function read  stored password from  EEPROM .
 */
void readPassFromEEPROM(uint16 *add, uint64 *data) {
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	af 97       	sbiw	r28, 0x2f	; 47
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	99 8b       	std	Y+17, r25	; 0x11
    1378:	88 8b       	std	Y+16, r24	; 0x10
    137a:	7b 8b       	std	Y+19, r23	; 0x13
    137c:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	for (i = 0; i < 8; i++) {
    137e:	19 82       	std	Y+1, r1	; 0x01
    1380:	fc c0       	rjmp	.+504    	; 0x157a <readPassFromEEPROM+0x234>
		/* read i-byte of password in select location + i */
		EEPROM_readByte(((*add) + i), &g_byte);
    1382:	88 89       	ldd	r24, Y+16	; 0x10
    1384:	99 89       	ldd	r25, Y+17	; 0x11
    1386:	dc 01       	movw	r26, r24
    1388:	2d 91       	ld	r18, X+
    138a:	3c 91       	ld	r19, X
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	82 0f       	add	r24, r18
    1394:	93 1f       	adc	r25, r19
    1396:	6b e7       	ldi	r22, 0x7B	; 123
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	0e 94 21 0b 	call	0x1642	; 0x1642 <EEPROM_readByte>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e2       	ldi	r26, 0x20	; 32
    13a4:	b1 e4       	ldi	r27, 0x41	; 65
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	ac 83       	std	Y+4, r26	; 0x04
    13ac:	bd 83       	std	Y+5, r27	; 0x05
	__tmp = ((F_CPU) / 4e3) * __ms;
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a ef       	ldi	r20, 0xFA	; 250
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	6a 81       	ldd	r22, Y+2	; 0x02
    13b8:	7b 81       	ldd	r23, Y+3	; 0x03
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
    13c2:	68 a3       	std	Y+32, r22	; 0x20
    13c4:	79 a3       	std	Y+33, r23	; 0x21
    13c6:	8a a3       	std	Y+34, r24	; 0x22
    13c8:	9b a3       	std	Y+35, r25	; 0x23
    13ca:	c8 a0       	ldd	r12, Y+32	; 0x20
    13cc:	d9 a0       	ldd	r13, Y+33	; 0x21
    13ce:	ea a0       	ldd	r14, Y+34	; 0x22
    13d0:	fb a0       	ldd	r15, Y+35	; 0x23
    13d2:	ce 82       	std	Y+6, r12	; 0x06
    13d4:	df 82       	std	Y+7, r13	; 0x07
    13d6:	e8 86       	std	Y+8, r14	; 0x08
    13d8:	f9 86       	std	Y+9, r15	; 0x09
	if (__tmp < 1.0)
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	6e 81       	ldd	r22, Y+6	; 0x06
    13e4:	7f 81       	ldd	r23, Y+7	; 0x07
    13e6:	88 85       	ldd	r24, Y+8	; 0x08
    13e8:	99 85       	ldd	r25, Y+9	; 0x09
    13ea:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__cmpsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <readPassFromEEPROM+0xb6>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9b 87       	std	Y+11, r25	; 0x0b
    13f8:	8a 87       	std	Y+10, r24	; 0x0a
    13fa:	54 c0       	rjmp	.+168    	; 0x14a4 <readPassFromEEPROM+0x15e>
	else if (__tmp > 65535)
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	4f e7       	ldi	r20, 0x7F	; 127
    1402:	57 e4       	ldi	r21, 0x47	; 71
    1404:	6e 81       	ldd	r22, Y+6	; 0x06
    1406:	7f 81       	ldd	r23, Y+7	; 0x07
    1408:	88 85       	ldd	r24, Y+8	; 0x08
    140a:	99 85       	ldd	r25, Y+9	; 0x09
    140c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__gesf2>
    1410:	18 16       	cp	r1, r24
    1412:	d4 f5       	brge	.+116    	; 0x1488 <readPassFromEEPROM+0x142>
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	6a 81       	ldd	r22, Y+2	; 0x02
    141e:	7b 81       	ldd	r23, Y+3	; 0x03
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3>
    1428:	6c a3       	std	Y+36, r22	; 0x24
    142a:	7d a3       	std	Y+37, r23	; 0x25
    142c:	8e a3       	std	Y+38, r24	; 0x26
    142e:	9f a3       	std	Y+39, r25	; 0x27
    1430:	8c a1       	ldd	r24, Y+36	; 0x24
    1432:	9d a1       	ldd	r25, Y+37	; 0x25
    1434:	ae a1       	ldd	r26, Y+38	; 0x26
    1436:	bf a1       	ldd	r27, Y+39	; 0x27
    1438:	8c 8f       	std	Y+28, r24	; 0x1c
    143a:	9d 8f       	std	Y+29, r25	; 0x1d
    143c:	ae 8f       	std	Y+30, r26	; 0x1e
    143e:	bf 8f       	std	Y+31, r27	; 0x1f
    1440:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1442:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1444:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1446:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1448:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    144c:	68 a7       	std	Y+40, r22	; 0x28
    144e:	79 a7       	std	Y+41, r23	; 0x29
    1450:	8a a7       	std	Y+42, r24	; 0x2a
    1452:	9b a7       	std	Y+43, r25	; 0x2b
    1454:	a8 a5       	ldd	r26, Y+40	; 0x28
    1456:	b9 a5       	ldd	r27, Y+41	; 0x29
    1458:	bb 87       	std	Y+11, r27	; 0x0b
    145a:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
    145c:	10 c0       	rjmp	.+32     	; 0x147e <readPassFromEEPROM+0x138>
    145e:	88 ec       	ldi	r24, 0xC8	; 200
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9d 87       	std	Y+13, r25	; 0x0d
    1464:	8c 87       	std	Y+12, r24	; 0x0c
	__asm__ volatile (
    1466:	8c 85       	ldd	r24, Y+12	; 0x0c
    1468:	9d 85       	ldd	r25, Y+13	; 0x0d
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <readPassFromEEPROM+0x124>
    146e:	9d 87       	std	Y+13, r25	; 0x0d
    1470:	8c 87       	std	Y+12, r24	; 0x0c
}
    1472:	00 00       	nop
			__ticks --;
    1474:	8a 85       	ldd	r24, Y+10	; 0x0a
    1476:	9b 85       	ldd	r25, Y+11	; 0x0b
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9b 87       	std	Y+11, r25	; 0x0b
    147c:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
    147e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1480:	9b 85       	ldd	r25, Y+11	; 0x0b
    1482:	89 2b       	or	r24, r25
    1484:	61 f7       	brne	.-40     	; 0x145e <readPassFromEEPROM+0x118>
		return;
    1486:	19 c0       	rjmp	.+50     	; 0x14ba <readPassFromEEPROM+0x174>
		__ticks = (uint16_t)__tmp;
    1488:	6e 81       	ldd	r22, Y+6	; 0x06
    148a:	7f 81       	ldd	r23, Y+7	; 0x07
    148c:	88 85       	ldd	r24, Y+8	; 0x08
    148e:	99 85       	ldd	r25, Y+9	; 0x09
    1490:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__fixunssfsi>
    1494:	6c a7       	std	Y+44, r22	; 0x2c
    1496:	7d a7       	std	Y+45, r23	; 0x2d
    1498:	8e a7       	std	Y+46, r24	; 0x2e
    149a:	9f a7       	std	Y+47, r25	; 0x2f
    149c:	ec a5       	ldd	r30, Y+44	; 0x2c
    149e:	fd a5       	ldd	r31, Y+45	; 0x2d
    14a0:	fb 87       	std	Y+11, r31	; 0x0b
    14a2:	ea 87       	std	Y+10, r30	; 0x0a
    14a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a8:	9f 87       	std	Y+15, r25	; 0x0f
    14aa:	8e 87       	std	Y+14, r24	; 0x0e
	__asm__ volatile (
    14ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <readPassFromEEPROM+0x16a>
    14b4:	9f 87       	std	Y+15, r25	; 0x0f
    14b6:	8e 87       	std	Y+14, r24	; 0x0e
}
    14b8:	00 00       	nop
		_delay_ms(10); /* wait to read byte in EEPROM correctly */
		/* store read i-byte in i-byte of password variable*/
		(*data) = (*data) | ((uint32) g_byte << (8 * i));
    14ba:	8a 89       	ldd	r24, Y+18	; 0x12
    14bc:	9b 89       	ldd	r25, Y+19	; 0x13
    14be:	dc 01       	movw	r26, r24
    14c0:	0c 91       	ld	r16, X
    14c2:	fc 01       	movw	r30, r24
    14c4:	11 81       	ldd	r17, Z+1	; 0x01
    14c6:	dc 01       	movw	r26, r24
    14c8:	12 96       	adiw	r26, 0x02	; 2
    14ca:	2c 91       	ld	r18, X
    14cc:	fc 01       	movw	r30, r24
    14ce:	33 81       	ldd	r19, Z+3	; 0x03
    14d0:	dc 01       	movw	r26, r24
    14d2:	14 96       	adiw	r26, 0x04	; 4
    14d4:	4c 91       	ld	r20, X
    14d6:	fc 01       	movw	r30, r24
    14d8:	55 81       	ldd	r21, Z+5	; 0x05
    14da:	dc 01       	movw	r26, r24
    14dc:	16 96       	adiw	r26, 0x06	; 6
    14de:	6c 91       	ld	r22, X
    14e0:	fc 01       	movw	r30, r24
    14e2:	77 81       	ldd	r23, Z+7	; 0x07
    14e4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <g_byte>
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e9 81       	ldd	r30, Y+1	; 0x01
    14f2:	ee 2f       	mov	r30, r30
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	04 c0       	rjmp	.+8      	; 0x150c <readPassFromEEPROM+0x1c6>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	aa 1f       	adc	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	ea 95       	dec	r30
    150e:	d2 f7       	brpl	.-12     	; 0x1504 <readPassFromEEPROM+0x1be>
    1510:	4c 01       	movw	r8, r24
    1512:	5d 01       	movw	r10, r26
    1514:	c1 2c       	mov	r12, r1
    1516:	d1 2c       	mov	r13, r1
    1518:	76 01       	movw	r14, r12
    151a:	8c 8a       	std	Y+20, r8	; 0x14
    151c:	9d 8a       	std	Y+21, r9	; 0x15
    151e:	ae 8a       	std	Y+22, r10	; 0x16
    1520:	bf 8a       	std	Y+23, r11	; 0x17
    1522:	c8 8e       	std	Y+24, r12	; 0x18
    1524:	d9 8e       	std	Y+25, r13	; 0x19
    1526:	ea 8e       	std	Y+26, r14	; 0x1a
    1528:	fb 8e       	std	Y+27, r15	; 0x1b
    152a:	4c 88       	ldd	r4, Y+20	; 0x14
    152c:	40 2a       	or	r4, r16
    152e:	5d 88       	ldd	r5, Y+21	; 0x15
    1530:	51 2a       	or	r5, r17
    1532:	6e 88       	ldd	r6, Y+22	; 0x16
    1534:	62 2a       	or	r6, r18
    1536:	7f 88       	ldd	r7, Y+23	; 0x17
    1538:	73 2a       	or	r7, r19
    153a:	88 8c       	ldd	r8, Y+24	; 0x18
    153c:	84 2a       	or	r8, r20
    153e:	99 8c       	ldd	r9, Y+25	; 0x19
    1540:	95 2a       	or	r9, r21
    1542:	aa 8c       	ldd	r10, Y+26	; 0x1a
    1544:	a6 2a       	or	r10, r22
    1546:	bb 8c       	ldd	r11, Y+27	; 0x1b
    1548:	b7 2a       	or	r11, r23
    154a:	8a 89       	ldd	r24, Y+18	; 0x12
    154c:	9b 89       	ldd	r25, Y+19	; 0x13
    154e:	dc 01       	movw	r26, r24
    1550:	4c 92       	st	X, r4
    1552:	fc 01       	movw	r30, r24
    1554:	51 82       	std	Z+1, r5	; 0x01
    1556:	dc 01       	movw	r26, r24
    1558:	12 96       	adiw	r26, 0x02	; 2
    155a:	6c 92       	st	X, r6
    155c:	fc 01       	movw	r30, r24
    155e:	73 82       	std	Z+3, r7	; 0x03
    1560:	dc 01       	movw	r26, r24
    1562:	14 96       	adiw	r26, 0x04	; 4
    1564:	8c 92       	st	X, r8
    1566:	fc 01       	movw	r30, r24
    1568:	95 82       	std	Z+5, r9	; 0x05
    156a:	dc 01       	movw	r26, r24
    156c:	16 96       	adiw	r26, 0x06	; 6
    156e:	ac 92       	st	X, r10
    1570:	fc 01       	movw	r30, r24
    1572:	b7 82       	std	Z+7, r11	; 0x07
	for (i = 0; i < 8; i++) {
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 30       	cpi	r24, 0x08	; 8
    157e:	08 f4       	brcc	.+2      	; 0x1582 <readPassFromEEPROM+0x23c>
    1580:	00 cf       	rjmp	.-512    	; 0x1382 <readPassFromEEPROM+0x3c>
	}
}
    1582:	00 00       	nop
    1584:	00 00       	nop
    1586:	af 96       	adiw	r28, 0x2f	; 47
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	bf 90       	pop	r11
    15a4:	af 90       	pop	r10
    15a6:	9f 90       	pop	r9
    15a8:	8f 90       	pop	r8
    15aa:	7f 90       	pop	r7
    15ac:	6f 90       	pop	r6
    15ae:	5f 90       	pop	r5
    15b0:	4f 90       	pop	r4
    15b2:	08 95       	ret

000015b4 <EEPROM_init>:
#include "EEPROM.h"

#include "I2C.h"

void EEPROM_init(void)
{
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    15bc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <TWI_init>
}
    15c0:	00 00       	nop
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <EEPROM_writeByte+0x6>
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15da:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_start>
    if (TWI_getStatus() != TW_START)
    15de:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	11 f0       	breq	.+4      	; 0x15ea <EEPROM_writeByte+0x22>
        return ERROR;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	26 c0       	rjmp	.+76     	; 0x1636 <EEPROM_writeByte+0x6e>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	88 0f       	add	r24, r24
    15f0:	89 2f       	mov	r24, r25
    15f2:	88 1f       	adc	r24, r24
    15f4:	99 0b       	sbc	r25, r25
    15f6:	91 95       	neg	r25
    15f8:	8e 70       	andi	r24, 0x0E	; 14
    15fa:	80 6a       	ori	r24, 0xA0	; 160
    15fc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1600:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    1604:	88 31       	cpi	r24, 0x18	; 24
    1606:	11 f0       	breq	.+4      	; 0x160c <EEPROM_writeByte+0x44>
        return ERROR; 
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <EEPROM_writeByte+0x6e>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1612:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    1616:	88 32       	cpi	r24, 0x28	; 40
    1618:	11 f0       	breq	.+4      	; 0x161e <EEPROM_writeByte+0x56>
        return ERROR;
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0c c0       	rjmp	.+24     	; 0x1636 <EEPROM_writeByte+0x6e>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1624:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    1628:	88 32       	cpi	r24, 0x28	; 40
    162a:	11 f0       	breq	.+4      	; 0x1630 <EEPROM_writeByte+0x68>
        return ERROR;
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <EEPROM_writeByte+0x6e>

    /* Send the Stop Bit */
    TWI_stop();
    1630:	0e 94 ad 0b 	call	0x175a	; 0x175a <TWI_stop>
	
    return SUCCESS;
    1634:	81 e0       	ldi	r24, 0x01	; 1
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <EEPROM_readByte+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <EEPROM_readByte+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	7c 83       	std	Y+4, r23	; 0x04
    1654:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1656:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_start>
    if (TWI_getStatus() != TW_START)
    165a:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	11 f0       	breq	.+4      	; 0x1666 <EEPROM_readByte+0x24>
        return ERROR;
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	43 c0       	rjmp	.+134    	; 0x16ec <EEPROM_readByte+0xaa>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	88 0f       	add	r24, r24
    166c:	89 2f       	mov	r24, r25
    166e:	88 1f       	adc	r24, r24
    1670:	99 0b       	sbc	r25, r25
    1672:	91 95       	neg	r25
    1674:	8e 70       	andi	r24, 0x0E	; 14
    1676:	80 6a       	ori	r24, 0xA0	; 160
    1678:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    167c:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    1680:	88 31       	cpi	r24, 0x18	; 24
    1682:	11 f0       	breq	.+4      	; 0x1688 <EEPROM_readByte+0x46>
        return ERROR;
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	32 c0       	rjmp	.+100    	; 0x16ec <EEPROM_readByte+0xaa>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    168e:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    1692:	88 32       	cpi	r24, 0x28	; 40
    1694:	11 f0       	breq	.+4      	; 0x169a <EEPROM_readByte+0x58>
        return ERROR;
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	29 c0       	rjmp	.+82     	; 0x16ec <EEPROM_readByte+0xaa>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    169a:	0e 94 98 0b 	call	0x1730	; 0x1730 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    169e:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    16a2:	80 31       	cpi	r24, 0x10	; 16
    16a4:	11 f0       	breq	.+4      	; 0x16aa <EEPROM_readByte+0x68>
        return ERROR;
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	21 c0       	rjmp	.+66     	; 0x16ec <EEPROM_readByte+0xaa>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	88 0f       	add	r24, r24
    16b0:	89 2f       	mov	r24, r25
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 0b       	sbc	r25, r25
    16b6:	91 95       	neg	r25
    16b8:	8e 70       	andi	r24, 0x0E	; 14
    16ba:	81 6a       	ori	r24, 0xA1	; 161
    16bc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    16c0:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    16c4:	80 34       	cpi	r24, 0x40	; 64
    16c6:	11 f0       	breq	.+4      	; 0x16cc <EEPROM_readByte+0x8a>
        return ERROR;
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	10 c0       	rjmp	.+32     	; 0x16ec <EEPROM_readByte+0xaa>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    16cc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <TWI_readWithNACK>
    16d0:	28 2f       	mov	r18, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    16da:	0e 94 05 0c 	call	0x180a	; 0x180a <TWI_getStatus>
    16de:	88 35       	cpi	r24, 0x58	; 88
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <EEPROM_readByte+0xa4>
        return ERROR;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <EEPROM_readByte+0xaa>

    /* Send the Stop Bit */
    TWI_stop();
    16e6:	0e 94 ad 0b 	call	0x175a	; 0x175a <TWI_stop>
    return SUCCESS;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <TWI_init>:
 *******************************************************************************/
 
#include "I2C.h"

void TWI_init(void)
{
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	22 e0       	ldi	r18, 0x02	; 2
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
	TWSR = 0x00;
    170c:	81 e2       	ldi	r24, 0x21	; 33
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	fc 01       	movw	r30, r24
    1712:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1714:	82 e2       	ldi	r24, 0x22	; 34
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	22 e0       	ldi	r18, 0x02	; 2
    171a:	fc 01       	movw	r30, r24
    171c:	20 83       	st	Z, r18
	
    TWCR = (1<<TWEN); /* enable TWI */
    171e:	86 e5       	ldi	r24, 0x56	; 86
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	24 e0       	ldi	r18, 0x04	; 4
    1724:	fc 01       	movw	r30, r24
    1726:	20 83       	st	Z, r18
}
    1728:	00 00       	nop
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret

00001730 <TWI_start>:

void TWI_start(void)
{
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1738:	86 e5       	ldi	r24, 0x56	; 86
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	24 ea       	ldi	r18, 0xA4	; 164
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1742:	00 00       	nop
    1744:	86 e5       	ldi	r24, 0x56	; 86
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	88 23       	and	r24, r24
    174e:	d4 f7       	brge	.-12     	; 0x1744 <TWI_start+0x14>
}
    1750:	00 00       	nop
    1752:	00 00       	nop
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	08 95       	ret

0000175a <TWI_stop>:

void TWI_stop(void)
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1762:	86 e5       	ldi	r24, 0x56	; 86
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	24 e9       	ldi	r18, 0x94	; 148
    1768:	fc 01       	movw	r30, r24
    176a:	20 83       	st	Z, r18
}
    176c:	00 00       	nop
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <TWI_write>:

void TWI_write(uint8 data)
{
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1780:	83 e2       	ldi	r24, 0x23	; 35
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	29 81       	ldd	r18, Y+1	; 0x01
    1786:	fc 01       	movw	r30, r24
    1788:	20 83       	st	Z, r18
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    178a:	86 e5       	ldi	r24, 0x56	; 86
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	24 e8       	ldi	r18, 0x84	; 132
    1790:	fc 01       	movw	r30, r24
    1792:	20 83       	st	Z, r18
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1794:	00 00       	nop
    1796:	86 e5       	ldi	r24, 0x56	; 86
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	88 23       	and	r24, r24
    17a0:	d4 f7       	brge	.-12     	; 0x1796 <TWI_write+0x22>
}
    17a2:	00 00       	nop
    17a4:	00 00       	nop
    17a6:	0f 90       	pop	r0
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    17b6:	86 e5       	ldi	r24, 0x56	; 86
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	24 ec       	ldi	r18, 0xC4	; 196
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17c0:	00 00       	nop
    17c2:	86 e5       	ldi	r24, 0x56	; 86
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	88 23       	and	r24, r24
    17cc:	d4 f7       	brge	.-12     	; 0x17c2 <TWI_readWithACK+0x14>
    /* Read Data */
    return TWDR;
    17ce:	83 e2       	ldi	r24, 0x23	; 35
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	fc 01       	movw	r30, r24
    17d4:	80 81       	ld	r24, Z
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    17e4:	86 e5       	ldi	r24, 0x56	; 86
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	24 e8       	ldi	r18, 0x84	; 132
    17ea:	fc 01       	movw	r30, r24
    17ec:	20 83       	st	Z, r18
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17ee:	00 00       	nop
    17f0:	86 e5       	ldi	r24, 0x56	; 86
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	88 23       	and	r24, r24
    17fa:	d4 f7       	brge	.-12     	; 0x17f0 <TWI_readWithNACK+0x14>
    /* Read Data */
    return TWDR;
    17fc:	83 e2       	ldi	r24, 0x23	; 35
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	fc 01       	movw	r30, r24
    1802:	80 81       	ld	r24, Z
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1814:	81 e2       	ldi	r24, 0x21	; 33
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	fc 01       	movw	r30, r24
    181a:	80 81       	ld	r24, Z
    181c:	88 7f       	andi	r24, 0xF8	; 248
    181e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
}
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <TIMER_init>:
 * 	1. Set the required clock.
 * 	2. Set the required Mode.
 * 	3. Enable the Interrupt for select Mode Timer1.
 * 	4. Initialize Timer1 Registers
 */
void TIMER_init(TIMER_Config *Str){
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	00 d0       	rcall	.+0      	; 0x1830 <TIMER_init+0x6>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=0;
    1838:	8f e4       	ldi	r24, 0x4F	; 79
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	fc 01       	movw	r30, r24
    183e:	10 82       	st	Z, r1

	/*Set the required Mode.*/
	TCCR1B =(TCCR1B & 0xE7) | (Str->mode<<3);
    1840:	8e e4       	ldi	r24, 0x4E	; 78
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	27 7e       	andi	r18, 0xE7	; 231
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	28 2b       	or	r18, r24
    1866:	8e e4       	ldi	r24, 0x4E	; 78
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
	/* Set the required clock */
	TCCR1B =(TCCR1B & 0xF8) | (Str->scale);
    186e:	8e e4       	ldi	r24, 0x4E	; 78
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	fc 01       	movw	r30, r24
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	28 7f       	andi	r18, 0xF8	; 248
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	fc 01       	movw	r30, r24
    1880:	81 81       	ldd	r24, Z+1	; 0x01
    1882:	28 2b       	or	r18, r24
    1884:	8e e4       	ldi	r24, 0x4E	; 78
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	fc 01       	movw	r30, r24
    188a:	20 83       	st	Z, r18
	/* init timer 1 start count from zero */
	TCNT1=0;
    188c:	8c e4       	ldi	r24, 0x4C	; 76
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	11 82       	std	Z+1, r1	; 0x01
    1894:	10 82       	st	Z, r1


	if(Str->mode == CTC){
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	fc 01       	movw	r30, r24
    189c:	80 81       	ld	r24, Z
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	a1 f4       	brne	.+40     	; 0x18ca <TIMER_init+0xa0>
		OCR1A=(Str->ctc);
    18a2:	8a e4       	ldi	r24, 0x4A	; 74
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	29 81       	ldd	r18, Y+1	; 0x01
    18a8:	3a 81       	ldd	r19, Y+2	; 0x02
    18aa:	f9 01       	movw	r30, r18
    18ac:	22 81       	ldd	r18, Z+2	; 0x02
    18ae:	33 81       	ldd	r19, Z+3	; 0x03
    18b0:	fc 01       	movw	r30, r24
    18b2:	31 83       	std	Z+1, r19	; 0x01
    18b4:	20 83       	st	Z, r18
		TIMSK |=(1<<OCIE1A); /* enable device bit interrupt */
    18b6:	89 e5       	ldi	r24, 0x59	; 89
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 81       	ld	r18, Z
    18be:	89 e5       	ldi	r24, 0x59	; 89
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	20 61       	ori	r18, 0x10	; 16
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 83       	st	Z, r18
    18c8:	0f c0       	rjmp	.+30     	; 0x18e8 <TIMER_init+0xbe>
	}else if(Str->mode == OVF){
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	49 f4       	brne	.+18     	; 0x18e8 <TIMER_init+0xbe>
		TIMSK |=(1<<TOIE1);
    18d6:	89 e5       	ldi	r24, 0x59	; 89
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	fc 01       	movw	r30, r24
    18dc:	20 81       	ld	r18, Z
    18de:	89 e5       	ldi	r24, 0x59	; 89
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	24 60       	ori	r18, 0x04	; 4
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
	}
	SREG |=(1<<7);
    18e8:	8f e5       	ldi	r24, 0x5F	; 95
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 81       	ld	r18, Z
    18f0:	8f e5       	ldi	r24, 0x5F	; 95
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	20 68       	ori	r18, 0x80	; 128
    18f6:	fc 01       	movw	r30, r24
    18f8:	20 83       	st	Z, r18

}
    18fa:	00 00       	nop
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <TIMER_Deinit>:

/*
 * Description: Function to Clear Timer1 Register & active Sleep mode For Timer1.
 */
void TIMER_Deinit(void){
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    190e:	8f e4       	ldi	r24, 0x4F	; 79
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	fc 01       	movw	r30, r24
    1914:	10 82       	st	Z, r1
	TCCR1B=0;
    1916:	8e e4       	ldi	r24, 0x4E	; 78
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	fc 01       	movw	r30, r24
    191c:	10 82       	st	Z, r1
	TCNT1=0;
    191e:	8c e4       	ldi	r24, 0x4C	; 76
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	fc 01       	movw	r30, r24
    1924:	11 82       	std	Z+1, r1	; 0x01
    1926:	10 82       	st	Z, r1
	TIMSK=0;
    1928:	89 e5       	ldi	r24, 0x59	; 89
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	fc 01       	movw	r30, r24
    192e:	10 82       	st	Z, r1
	OCR1A=0;
    1930:	8a e4       	ldi	r24, 0x4A	; 74
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	11 82       	std	Z+1, r1	; 0x01
    1938:	10 82       	st	Z, r1
}
    193a:	00 00       	nop
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <TIMER_SETCTC>:

/*
 * Description: Function to set Compare Value to Timer1 .
 */
void TIMER_SETCTC(uint16 *Ptr_CTC){
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	00 d0       	rcall	.+0      	; 0x1948 <TIMER_SETCTC+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=0;
    1950:	8c e4       	ldi	r24, 0x4C	; 76
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	11 82       	std	Z+1, r1	; 0x01
    1958:	10 82       	st	Z, r1
	OCR1A=*Ptr_CTC;
    195a:	8a e4       	ldi	r24, 0x4A	; 74
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	29 81       	ldd	r18, Y+1	; 0x01
    1960:	3a 81       	ldd	r19, Y+2	; 0x02
    1962:	f9 01       	movw	r30, r18
    1964:	20 81       	ld	r18, Z
    1966:	31 81       	ldd	r19, Z+1	; 0x01
    1968:	fc 01       	movw	r30, r24
    196a:	31 83       	std	Z+1, r19	; 0x01
    196c:	20 83       	st	Z, r18
}
    196e:	00 00       	nop
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <TIMER_setCallBack>:

/*
 * Description: Function to set Which Function Called by Timer1  in ISR Vector.
 */
void TIMER_setCallBack(void (*Fun)(void)){
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	00 d0       	rcall	.+0      	; 0x1980 <TIMER_setCallBack+0x6>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=Fun;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <g_CallBackPtr+0x1>
    1990:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <g_CallBackPtr>
}
    1994:	00 00       	nop
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	11 24       	eor	r1, r1
    19aa:	2f 93       	push	r18
    19ac:	3f 93       	push	r19
    19ae:	4f 93       	push	r20
    19b0:	5f 93       	push	r21
    19b2:	6f 93       	push	r22
    19b4:	7f 93       	push	r23
    19b6:	8f 93       	push	r24
    19b8:	9f 93       	push	r25
    19ba:	af 93       	push	r26
    19bc:	bf 93       	push	r27
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    19ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_CallBackPtr>
    19ce:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_CallBackPtr+0x1>
    19d2:	89 2b       	or	r24, r25
    19d4:	31 f0       	breq	.+12     	; 0x19e2 <__vector_6+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    19d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_CallBackPtr>
    19da:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_CallBackPtr+0x1>
    19de:	fc 01       	movw	r30, r24
    19e0:	09 95       	icall
	}

}
    19e2:	00 00       	nop
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_8>:

ISR(TIMER1_OVF_vect){
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL)
    1a34:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_CallBackPtr>
    1a38:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_CallBackPtr+0x1>
    1a3c:	89 2b       	or	r24, r25
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <__vector_8+0x42>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_CallBackPtr)();
    1a40:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <g_CallBackPtr>
    1a44:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <g_CallBackPtr+0x1>
    1a48:	fc 01       	movw	r30, r24
    1a4a:	09 95       	icall
	}
}
    1a4c:	00 00       	nop
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <UART_init>:
 *******************************************************************************/

/*
 * Function responsible to initialize UART module .
 */
void UART_init(void) {
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA, U2X);
    1a7c:	8b e2       	ldi	r24, 0x2B	; 43
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	fc 01       	movw	r30, r24
    1a82:	20 81       	ld	r18, Z
    1a84:	8b e2       	ldi	r24, 0x2B	; 43
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	22 60       	ori	r18, 0x02	; 2
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	SET_BIT(UCSRB, TXEN);
    1a8e:	8a e2       	ldi	r24, 0x2A	; 42
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	fc 01       	movw	r30, r24
    1a94:	20 81       	ld	r18, Z
    1a96:	8a e2       	ldi	r24, 0x2A	; 42
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	28 60       	ori	r18, 0x08	; 8
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 83       	st	Z, r18
	SET_BIT(UCSRB, RXEN);
    1aa0:	8a e2       	ldi	r24, 0x2A	; 42
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	20 81       	ld	r18, Z
    1aa8:	8a e2       	ldi	r24, 0x2A	; 42
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	20 61       	ori	r18, 0x10	; 16
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	SET_BIT(UCSRC, URSEL);
    1ab2:	80 e4       	ldi	r24, 0x40	; 64
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	20 81       	ld	r18, Z
    1aba:	80 e4       	ldi	r24, 0x40	; 64
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	20 68       	ori	r18, 0x80	; 128
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ1);
    1ac4:	80 e4       	ldi	r24, 0x40	; 64
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 81       	ld	r18, Z
    1acc:	80 e4       	ldi	r24, 0x40	; 64
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	24 60       	ori	r18, 0x04	; 4
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	20 83       	st	Z, r18
	SET_BIT(UCSRC, UCSZ0);
    1ad6:	80 e4       	ldi	r24, 0x40	; 64
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	fc 01       	movw	r30, r24
    1adc:	20 81       	ld	r18, Z
    1ade:	80 e4       	ldi	r24, 0x40	; 64
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	22 60       	ori	r18, 0x02	; 2
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18

	/*	select type of parity */
	SET_BIT(UCSRC, UPM1);
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	fc 01       	movw	r30, r24
    1aee:	20 81       	ld	r18, Z
    1af0:	80 e4       	ldi	r24, 0x40	; 64
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	20 62       	ori	r18, 0x20	; 32
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = 12 >> 8;
    1afa:	80 e4       	ldi	r24, 0x40	; 64
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	fc 01       	movw	r30, r24
    1b00:	10 82       	st	Z, r1
	UBRRL = 12;
    1b02:	89 e2       	ldi	r24, 0x29	; 41
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	2c e0       	ldi	r18, 0x0C	; 12
    1b08:	fc 01       	movw	r30, r24
    1b0a:	20 83       	st	Z, r18

}
    1b0c:	00 00       	nop
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <UART_sendByte>:

/*
 * Function responsible to send byte to another device .
 */
void UART_sendByte(const uint8 data) {
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	89 83       	std	Y+1, r24	; 0x01

	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1b20:	00 00       	nop
    1b22:	8b e2       	ldi	r24, 0x2B	; 43
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	fc 01       	movw	r30, r24
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	80 72       	andi	r24, 0x20	; 32
    1b30:	99 27       	eor	r25, r25
    1b32:	89 2b       	or	r24, r25
    1b34:	b1 f3       	breq	.-20     	; 0x1b22 <UART_sendByte+0xe>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1b36:	8c e2       	ldi	r24, 0x2C	; 44
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	29 81       	ldd	r18, Y+1	; 0x01
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 83       	st	Z, r18
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/

}
    1b40:	00 00       	nop
    1b42:	0f 90       	pop	r0
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <UART_recieveByte>:

/*
 * Function responsible to receive byte from another device .
 */
uint8 UART_recieveByte(void) {
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1b52:	00 00       	nop
    1b54:	8b e2       	ldi	r24, 0x2B	; 43
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	fc 01       	movw	r30, r24
    1b5a:	80 81       	ld	r24, Z
    1b5c:	88 23       	and	r24, r24
    1b5e:	d4 f7       	brge	.-12     	; 0x1b54 <UART_recieveByte+0xa>
	/* Read the received data from the RX buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1b60:	8c e2       	ldi	r24, 0x2C	; 44
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	fc 01       	movw	r30, r24
    1b66:	80 81       	ld	r24, Z
}
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <UART_sendString>:

/*
 * Function responsible to send String from another device .
 */
void UART_sendString(const uint8 *Str) {
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <UART_sendString+0x6>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	9b 83       	std	Y+3, r25	; 0x03
    1b7c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);		/* send string character by character until null character */
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b8c:	82 0f       	add	r24, r18
    1b8e:	93 1f       	adc	r25, r19
    1b90:	fc 01       	movw	r30, r24
    1b92:	80 81       	ld	r24, Z
    1b94:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
		i++;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	while(Str[i] != '\0')
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba8:	82 0f       	add	r24, r18
    1baa:	93 1f       	adc	r25, r19
    1bac:	fc 01       	movw	r30, r24
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 23       	and	r24, r24
    1bb2:	39 f7       	brne	.-50     	; 0x1b82 <UART_sendString+0x14>
	}
	UART_sendByte('#');
    1bb4:	83 e2       	ldi	r24, 0x23	; 35
    1bb6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <UART_sendByte>
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/

}
    1bba:	00 00       	nop
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <UART_receiveString>:

/*
 * Function responsible to receive String from another device .
 */
void UART_receiveString(uint8 *Str) {
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <UART_receiveString+0xa>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1bdc:	19 82       	std	Y+1, r1	; 0x01
	do{

		Str[i] = UART_recieveByte();
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	2a 81       	ldd	r18, Y+2	; 0x02
    1be6:	3b 81       	ldd	r19, Y+3	; 0x03
    1be8:	89 01       	movw	r16, r18
    1bea:	08 0f       	add	r16, r24
    1bec:	19 1f       	adc	r17, r25
    1bee:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <UART_recieveByte>
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	80 83       	st	Z, r24

	}while(Str[i++] != '#');		/* still receive character until '#' symbol  send */
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	98 0f       	add	r25, r24
    1bfc:	99 83       	std	Y+1, r25	; 0x01
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	2a 81       	ldd	r18, Y+2	; 0x02
    1c04:	3b 81       	ldd	r19, Y+3	; 0x03
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	80 81       	ld	r24, Z
    1c0e:	83 32       	cpi	r24, 0x23	; 35
    1c10:	31 f7       	brne	.-52     	; 0x1bde <UART_receiveString+0x16>

	Str[--i] = '\0';			/* add null character at the end of string */
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c20:	3b 81       	ldd	r19, Y+3	; 0x03
    1c22:	82 0f       	add	r24, r18
    1c24:	93 1f       	adc	r25, r19
    1c26:	fc 01       	movw	r30, r24
    1c28:	10 82       	st	Z, r1

}
    1c2a:	00 00       	nop
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <__ashldi3>:
    1c3c:	00 2e       	mov	r0, r16
    1c3e:	08 30       	cpi	r16, 0x08	; 8
    1c40:	90 f0       	brcs	.+36     	; 0x1c66 <__ashldi3+0x2a>
    1c42:	98 2f       	mov	r25, r24
    1c44:	87 2f       	mov	r24, r23
    1c46:	76 2f       	mov	r23, r22
    1c48:	65 2f       	mov	r22, r21
    1c4a:	54 2f       	mov	r21, r20
    1c4c:	43 2f       	mov	r20, r19
    1c4e:	32 2f       	mov	r19, r18
    1c50:	22 27       	eor	r18, r18
    1c52:	08 50       	subi	r16, 0x08	; 8
    1c54:	f4 cf       	rjmp	.-24     	; 0x1c3e <__ashldi3+0x2>
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	44 1f       	adc	r20, r20
    1c5c:	55 1f       	adc	r21, r21
    1c5e:	66 1f       	adc	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 95       	dec	r16
    1c68:	b2 f7       	brpl	.-20     	; 0x1c56 <__ashldi3+0x1a>
    1c6a:	00 2d       	mov	r16, r0
    1c6c:	08 95       	ret

00001c6e <__ashrdi3>:
    1c6e:	97 fd       	sbrc	r25, 7
    1c70:	10 94       	com	r1

00001c72 <__lshrdi3>:
    1c72:	00 2e       	mov	r0, r16
    1c74:	08 30       	cpi	r16, 0x08	; 8
    1c76:	98 f0       	brcs	.+38     	; 0x1c9e <__lshrdi3+0x2c>
    1c78:	08 50       	subi	r16, 0x08	; 8
    1c7a:	23 2f       	mov	r18, r19
    1c7c:	34 2f       	mov	r19, r20
    1c7e:	45 2f       	mov	r20, r21
    1c80:	56 2f       	mov	r21, r22
    1c82:	67 2f       	mov	r22, r23
    1c84:	78 2f       	mov	r23, r24
    1c86:	89 2f       	mov	r24, r25
    1c88:	91 2d       	mov	r25, r1
    1c8a:	f4 cf       	rjmp	.-24     	; 0x1c74 <__lshrdi3+0x2>
    1c8c:	15 94       	asr	r1
    1c8e:	97 95       	ror	r25
    1c90:	87 95       	ror	r24
    1c92:	77 95       	ror	r23
    1c94:	67 95       	ror	r22
    1c96:	57 95       	ror	r21
    1c98:	47 95       	ror	r20
    1c9a:	37 95       	ror	r19
    1c9c:	27 95       	ror	r18
    1c9e:	0a 95       	dec	r16
    1ca0:	aa f7       	brpl	.-22     	; 0x1c8c <__lshrdi3+0x1a>
    1ca2:	11 24       	eor	r1, r1
    1ca4:	00 2d       	mov	r16, r0
    1ca6:	08 95       	ret

00001ca8 <__adddi3>:
    1ca8:	2a 0d       	add	r18, r10
    1caa:	3b 1d       	adc	r19, r11
    1cac:	4c 1d       	adc	r20, r12
    1cae:	5d 1d       	adc	r21, r13
    1cb0:	6e 1d       	adc	r22, r14
    1cb2:	7f 1d       	adc	r23, r15
    1cb4:	80 1f       	adc	r24, r16
    1cb6:	91 1f       	adc	r25, r17
    1cb8:	08 95       	ret

00001cba <__cmpdi2>:
    1cba:	2a 15       	cp	r18, r10
    1cbc:	3b 05       	cpc	r19, r11
    1cbe:	4c 05       	cpc	r20, r12
    1cc0:	5d 05       	cpc	r21, r13
    1cc2:	6e 05       	cpc	r22, r14
    1cc4:	7f 05       	cpc	r23, r15
    1cc6:	80 07       	cpc	r24, r16
    1cc8:	91 07       	cpc	r25, r17
    1cca:	08 95       	ret

00001ccc <__cmpdi2_s8>:
    1ccc:	00 24       	eor	r0, r0
    1cce:	a7 fd       	sbrc	r26, 7
    1cd0:	00 94       	com	r0
    1cd2:	2a 17       	cp	r18, r26
    1cd4:	30 05       	cpc	r19, r0
    1cd6:	40 05       	cpc	r20, r0
    1cd8:	50 05       	cpc	r21, r0
    1cda:	60 05       	cpc	r22, r0
    1cdc:	70 05       	cpc	r23, r0
    1cde:	80 05       	cpc	r24, r0
    1ce0:	90 05       	cpc	r25, r0
    1ce2:	08 95       	ret

00001ce4 <__cmpsf2>:
    1ce4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_cmp>
    1ce8:	08 f4       	brcc	.+2      	; 0x1cec <__cmpsf2+0x8>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	08 95       	ret

00001cee <__fixunssfsi>:
    1cee:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__fp_splitA>
    1cf2:	88 f0       	brcs	.+34     	; 0x1d16 <__fixunssfsi+0x28>
    1cf4:	9f 57       	subi	r25, 0x7F	; 127
    1cf6:	98 f0       	brcs	.+38     	; 0x1d1e <__fixunssfsi+0x30>
    1cf8:	b9 2f       	mov	r27, r25
    1cfa:	99 27       	eor	r25, r25
    1cfc:	b7 51       	subi	r27, 0x17	; 23
    1cfe:	b0 f0       	brcs	.+44     	; 0x1d2c <__fixunssfsi+0x3e>
    1d00:	e1 f0       	breq	.+56     	; 0x1d3a <__fixunssfsi+0x4c>
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	1a f0       	brmi	.+6      	; 0x1d12 <__fixunssfsi+0x24>
    1d0c:	ba 95       	dec	r27
    1d0e:	c9 f7       	brne	.-14     	; 0x1d02 <__fixunssfsi+0x14>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <__fixunssfsi+0x4c>
    1d12:	b1 30       	cpi	r27, 0x01	; 1
    1d14:	91 f0       	breq	.+36     	; 0x1d3a <__fixunssfsi+0x4c>
    1d16:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__fp_zero>
    1d1a:	b1 e0       	ldi	r27, 0x01	; 1
    1d1c:	08 95       	ret
    1d1e:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__fp_zero>
    1d22:	67 2f       	mov	r22, r23
    1d24:	78 2f       	mov	r23, r24
    1d26:	88 27       	eor	r24, r24
    1d28:	b8 5f       	subi	r27, 0xF8	; 248
    1d2a:	39 f0       	breq	.+14     	; 0x1d3a <__fixunssfsi+0x4c>
    1d2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1d2e:	cc f3       	brlt	.-14     	; 0x1d22 <__fixunssfsi+0x34>
    1d30:	86 95       	lsr	r24
    1d32:	77 95       	ror	r23
    1d34:	67 95       	ror	r22
    1d36:	b3 95       	inc	r27
    1d38:	d9 f7       	brne	.-10     	; 0x1d30 <__fixunssfsi+0x42>
    1d3a:	3e f4       	brtc	.+14     	; 0x1d4a <__fixunssfsi+0x5c>
    1d3c:	90 95       	com	r25
    1d3e:	80 95       	com	r24
    1d40:	70 95       	com	r23
    1d42:	61 95       	neg	r22
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	8f 4f       	sbci	r24, 0xFF	; 255
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	08 95       	ret

00001d4c <__fp_cmp>:
    1d4c:	99 0f       	add	r25, r25
    1d4e:	00 08       	sbc	r0, r0
    1d50:	55 0f       	add	r21, r21
    1d52:	aa 0b       	sbc	r26, r26
    1d54:	e0 e8       	ldi	r30, 0x80	; 128
    1d56:	fe ef       	ldi	r31, 0xFE	; 254
    1d58:	16 16       	cp	r1, r22
    1d5a:	17 06       	cpc	r1, r23
    1d5c:	e8 07       	cpc	r30, r24
    1d5e:	f9 07       	cpc	r31, r25
    1d60:	c0 f0       	brcs	.+48     	; 0x1d92 <__fp_cmp+0x46>
    1d62:	12 16       	cp	r1, r18
    1d64:	13 06       	cpc	r1, r19
    1d66:	e4 07       	cpc	r30, r20
    1d68:	f5 07       	cpc	r31, r21
    1d6a:	98 f0       	brcs	.+38     	; 0x1d92 <__fp_cmp+0x46>
    1d6c:	62 1b       	sub	r22, r18
    1d6e:	73 0b       	sbc	r23, r19
    1d70:	84 0b       	sbc	r24, r20
    1d72:	95 0b       	sbc	r25, r21
    1d74:	39 f4       	brne	.+14     	; 0x1d84 <__fp_cmp+0x38>
    1d76:	0a 26       	eor	r0, r26
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <__fp_cmp+0x46>
    1d7a:	23 2b       	or	r18, r19
    1d7c:	24 2b       	or	r18, r20
    1d7e:	25 2b       	or	r18, r21
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <__fp_cmp+0x3e>
    1d82:	08 95       	ret
    1d84:	0a 26       	eor	r0, r26
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <__fp_cmp+0x3e>
    1d88:	a1 40       	sbci	r26, 0x01	; 1
    1d8a:	a6 95       	lsr	r26
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	81 1d       	adc	r24, r1
    1d90:	81 1d       	adc	r24, r1
    1d92:	08 95       	ret

00001d94 <__fp_split3>:
    1d94:	57 fd       	sbrc	r21, 7
    1d96:	90 58       	subi	r25, 0x80	; 128
    1d98:	44 0f       	add	r20, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	59 f0       	breq	.+22     	; 0x1db4 <__fp_splitA+0x10>
    1d9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1da0:	71 f0       	breq	.+28     	; 0x1dbe <__fp_splitA+0x1a>
    1da2:	47 95       	ror	r20

00001da4 <__fp_splitA>:
    1da4:	88 0f       	add	r24, r24
    1da6:	97 fb       	bst	r25, 7
    1da8:	99 1f       	adc	r25, r25
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <__fp_splitA+0x20>
    1dac:	9f 3f       	cpi	r25, 0xFF	; 255
    1dae:	79 f0       	breq	.+30     	; 0x1dce <__fp_splitA+0x2a>
    1db0:	87 95       	ror	r24
    1db2:	08 95       	ret
    1db4:	12 16       	cp	r1, r18
    1db6:	13 06       	cpc	r1, r19
    1db8:	14 06       	cpc	r1, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	f2 cf       	rjmp	.-28     	; 0x1da2 <__fp_split3+0xe>
    1dbe:	46 95       	lsr	r20
    1dc0:	f1 df       	rcall	.-30     	; 0x1da4 <__fp_splitA>
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <__fp_splitA+0x30>
    1dc4:	16 16       	cp	r1, r22
    1dc6:	17 06       	cpc	r1, r23
    1dc8:	18 06       	cpc	r1, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	f1 cf       	rjmp	.-30     	; 0x1db0 <__fp_splitA+0xc>
    1dce:	86 95       	lsr	r24
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	61 05       	cpc	r22, r1
    1dd4:	08 94       	sec
    1dd6:	08 95       	ret

00001dd8 <__fp_zero>:
    1dd8:	e8 94       	clt

00001dda <__fp_szero>:
    1dda:	bb 27       	eor	r27, r27
    1ddc:	66 27       	eor	r22, r22
    1dde:	77 27       	eor	r23, r23
    1de0:	cb 01       	movw	r24, r22
    1de2:	97 f9       	bld	r25, 7
    1de4:	08 95       	ret

00001de6 <__gesf2>:
    1de6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_cmp>
    1dea:	08 f4       	brcc	.+2      	; 0x1dee <__gesf2+0x8>
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	08 95       	ret

00001df0 <__mulsf3>:
    1df0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__mulsf3x>
    1df4:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__fp_round>
    1df8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fp_pscA>
    1dfc:	38 f0       	brcs	.+14     	; 0x1e0c <__mulsf3+0x1c>
    1dfe:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__fp_pscB>
    1e02:	20 f0       	brcs	.+8      	; 0x1e0c <__mulsf3+0x1c>
    1e04:	95 23       	and	r25, r21
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <__mulsf3+0x1c>
    1e08:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__fp_inf>
    1e0c:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_nan>
    1e10:	11 24       	eor	r1, r1
    1e12:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>

00001e16 <__mulsf3x>:
    1e16:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_split3>
    1e1a:	70 f3       	brcs	.-36     	; 0x1df8 <__mulsf3+0x8>

00001e1c <__mulsf3_pse>:
    1e1c:	95 9f       	mul	r25, r21
    1e1e:	c1 f3       	breq	.-16     	; 0x1e10 <__mulsf3+0x20>
    1e20:	95 0f       	add	r25, r21
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	55 1f       	adc	r21, r21
    1e26:	62 9f       	mul	r22, r18
    1e28:	f0 01       	movw	r30, r0
    1e2a:	72 9f       	mul	r23, r18
    1e2c:	bb 27       	eor	r27, r27
    1e2e:	f0 0d       	add	r31, r0
    1e30:	b1 1d       	adc	r27, r1
    1e32:	63 9f       	mul	r22, r19
    1e34:	aa 27       	eor	r26, r26
    1e36:	f0 0d       	add	r31, r0
    1e38:	b1 1d       	adc	r27, r1
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	64 9f       	mul	r22, r20
    1e3e:	66 27       	eor	r22, r22
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	66 1f       	adc	r22, r22
    1e46:	82 9f       	mul	r24, r18
    1e48:	22 27       	eor	r18, r18
    1e4a:	b0 0d       	add	r27, r0
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	62 1f       	adc	r22, r18
    1e50:	73 9f       	mul	r23, r19
    1e52:	b0 0d       	add	r27, r0
    1e54:	a1 1d       	adc	r26, r1
    1e56:	62 1f       	adc	r22, r18
    1e58:	83 9f       	mul	r24, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	22 1f       	adc	r18, r18
    1e60:	74 9f       	mul	r23, r20
    1e62:	33 27       	eor	r19, r19
    1e64:	a0 0d       	add	r26, r0
    1e66:	61 1d       	adc	r22, r1
    1e68:	23 1f       	adc	r18, r19
    1e6a:	84 9f       	mul	r24, r20
    1e6c:	60 0d       	add	r22, r0
    1e6e:	21 1d       	adc	r18, r1
    1e70:	82 2f       	mov	r24, r18
    1e72:	76 2f       	mov	r23, r22
    1e74:	6a 2f       	mov	r22, r26
    1e76:	11 24       	eor	r1, r1
    1e78:	9f 57       	subi	r25, 0x7F	; 127
    1e7a:	50 40       	sbci	r21, 0x00	; 0
    1e7c:	9a f0       	brmi	.+38     	; 0x1ea4 <__mulsf3_pse+0x88>
    1e7e:	f1 f0       	breq	.+60     	; 0x1ebc <__mulsf3_pse+0xa0>
    1e80:	88 23       	and	r24, r24
    1e82:	4a f0       	brmi	.+18     	; 0x1e96 <__mulsf3_pse+0x7a>
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	66 1f       	adc	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	50 40       	sbci	r21, 0x00	; 0
    1e94:	a9 f7       	brne	.-22     	; 0x1e80 <__mulsf3_pse+0x64>
    1e96:	9e 3f       	cpi	r25, 0xFE	; 254
    1e98:	51 05       	cpc	r21, r1
    1e9a:	80 f0       	brcs	.+32     	; 0x1ebc <__mulsf3_pse+0xa0>
    1e9c:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__fp_inf>
    1ea0:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__fp_szero>
    1ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea6:	e4 f3       	brlt	.-8      	; 0x1ea0 <__mulsf3_pse+0x84>
    1ea8:	98 3e       	cpi	r25, 0xE8	; 232
    1eaa:	d4 f3       	brlt	.-12     	; 0x1ea0 <__mulsf3_pse+0x84>
    1eac:	86 95       	lsr	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	b7 95       	ror	r27
    1eb4:	f7 95       	ror	r31
    1eb6:	e7 95       	ror	r30
    1eb8:	9f 5f       	subi	r25, 0xFF	; 255
    1eba:	c1 f7       	brne	.-16     	; 0x1eac <__mulsf3_pse+0x90>
    1ebc:	fe 2b       	or	r31, r30
    1ebe:	88 0f       	add	r24, r24
    1ec0:	91 1d       	adc	r25, r1
    1ec2:	96 95       	lsr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	97 f9       	bld	r25, 7
    1ec8:	08 95       	ret

00001eca <__fp_inf>:
    1eca:	97 f9       	bld	r25, 7
    1ecc:	9f 67       	ori	r25, 0x7F	; 127
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	08 95       	ret

00001ed6 <__fp_nan>:
    1ed6:	9f ef       	ldi	r25, 0xFF	; 255
    1ed8:	80 ec       	ldi	r24, 0xC0	; 192
    1eda:	08 95       	ret

00001edc <__fp_pscA>:
    1edc:	00 24       	eor	r0, r0
    1ede:	0a 94       	dec	r0
    1ee0:	16 16       	cp	r1, r22
    1ee2:	17 06       	cpc	r1, r23
    1ee4:	18 06       	cpc	r1, r24
    1ee6:	09 06       	cpc	r0, r25
    1ee8:	08 95       	ret

00001eea <__fp_pscB>:
    1eea:	00 24       	eor	r0, r0
    1eec:	0a 94       	dec	r0
    1eee:	12 16       	cp	r1, r18
    1ef0:	13 06       	cpc	r1, r19
    1ef2:	14 06       	cpc	r1, r20
    1ef4:	05 06       	cpc	r0, r21
    1ef6:	08 95       	ret

00001ef8 <__fp_round>:
    1ef8:	09 2e       	mov	r0, r25
    1efa:	03 94       	inc	r0
    1efc:	00 0c       	add	r0, r0
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <__fp_round+0xc>
    1f00:	88 23       	and	r24, r24
    1f02:	52 f0       	brmi	.+20     	; 0x1f18 <__fp_round+0x20>
    1f04:	bb 0f       	add	r27, r27
    1f06:	40 f4       	brcc	.+16     	; 0x1f18 <__fp_round+0x20>
    1f08:	bf 2b       	or	r27, r31
    1f0a:	11 f4       	brne	.+4      	; 0x1f10 <__fp_round+0x18>
    1f0c:	60 ff       	sbrs	r22, 0
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <__fp_round+0x20>
    1f10:	6f 5f       	subi	r22, 0xFF	; 255
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	08 95       	ret

00001f1a <_exit>:
    1f1a:	f8 94       	cli

00001f1c <__stop_program>:
    1f1c:	ff cf       	rjmp	.-2      	; 0x1f1c <__stop_program>
